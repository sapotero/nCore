/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(2);
	__webpack_require__(3);
	__webpack_require__(4);

	__webpack_require__(5);
	__webpack_require__(6);

	__webpack_require__(12);
	__webpack_require__(15);

/***/ },
/* 1 */
/***/ function(module, exports) {

	core = (function(){

	  var Subscriber = function(fn, options, context) {
	    if (!(this instanceof Subscriber)) {
	      return new Subscriber(fn, options, context);
	    }

	    this.id = this.guidGenerator();
	    this.fn = fn;
	    this.options = options;
	    this.context = context;
	    this.channel = null;
	  }
	  Subscriber.prototype.guid = function(options) {
	    return ( ( ( 1 + Math.random() ) * 0x10000)   | 0 ).toString(16).substring(1);
	  }
	  Subscriber.prototype.guidGenerator = function(options) {
	    var S4 = this.guid;
	    return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
	  }
	  Subscriber.prototype.update = function(options) {
	    if (options) {
	      this.fn = options.fn || this.fn;
	      this.context = options.context || this.context;
	      this.options = options.options || this.options;
	      if (this.channel && this.options && this.options.priority !== undefined) {
	          this.channel.setPriority(this.id, this.options.priority);
	      }
	    }
	  }

	  var Channel = function(namespace, parent) {
	    if (!(this instanceof Channel)) {
	      return new Channel(namespace);
	    }

	    this.namespace = namespace || "";
	    this._subscribers = [];
	    this._channels = {};
	    this._parent = parent;
	    this.stopped = false;
	  }
	  Channel.prototype.addSubscriber = function(fn, options, context) {
	    var subscriber = new Subscriber(fn, options, context);

	    if (options && options.priority !== undefined) {
	      
	      
	      
	      options.priority = options.priority >> 0;

	      if (options.priority < 0) { options.priority = 0; }
	      if (options.priority >= this._subscribers.length) { options.priority = this._subscribers.length-1; }

	      this._subscribers.splice(options.priority, 0, subscriber);
	    }else{
	      this._subscribers.push(subscriber);
	    }

	    subscriber.channel = this;

	    return subscriber;
	  }
	  Channel.prototype.stopPropagation = function() {
	    this.stopped = true;
	  }
	  Channel.prototype.getSubscriber = function(identifier) {
	    var x = 0,
	        y = this._subscribers.length;

	    for(x, y; x < y; x++) {
	      if (this._subscribers[x].id === identifier || this._subscribers[x].fn === identifier) {
	        return this._subscribers[x];
	      }
	    }
	  }
	  Channel.prototype.setPriority = function(identifier, priority) {
	    var oldIndex = 0,
	        x = 0,
	        sub, firstHalf, lastHalf, y;

	    for(x = 0, y = this._subscribers.length; x < y; x++) {
	      if (this._subscribers[x].id === identifier || this._subscribers[x].fn === identifier) {
	        break;
	      }
	      oldIndex ++;
	    }

	    sub = this._subscribers[oldIndex];
	    firstHalf = this._subscribers.slice(0, oldIndex);
	    lastHalf = this._subscribers.slice(oldIndex+1);

	    this._subscribers = firstHalf.concat(lastHalf);
	    this._subscribers.splice(priority, 0, sub);
	  }
	  Channel.prototype.addChannel = function(channel) {
	    this._channels[channel] = new Channel((this.namespace ? this.namespace + ':' : '') + channel, this);
	  }
	  Channel.prototype.hasChannel = function(channel) {
	    return this._channels.hasOwnProperty(channel);
	  }
	  Channel.prototype.returnChannel = function(channel) {
	    return this._channels[channel];
	  }
	  Channel.prototype.removeSubscriber = function(identifier) {
	    var x = this._subscribers.length - 1;

	    
	    if (!identifier) {
	      this._subscribers = [];
	      return;
	    }

	    
	    for(x; x >= 0; x--) {
	      if (this._subscribers[x].fn === identifier || this._subscribers[x].id === identifier) {
	        this._subscribers[x].channel = null;
	        this._subscribers.splice(x,1);
	      }
	    }
	  }
	  Channel.prototype.publish = function(data) {
	    var x = 0,
	        y = this._subscribers.length,
	        shouldCall = false,
	        subscriber, l,
	        subsBefore,subsAfter;

	    
	    for(x, y; x < y; x++) {
	      
	      shouldCall = false;
	      subscriber = this._subscribers[x];

	      if (!this.stopped) {
	        subsBefore = this._subscribers.length;
	        if (subscriber.options !== undefined && typeof subscriber.options.predicate === "function") {
	          if (subscriber.options.predicate.apply(subscriber.context, data)) {
	            
	            shouldCall = true;
	          }
	        }else{
	          
	          shouldCall = true;
	        }
	      }

	      
	      if (shouldCall) {
	        
	        if (subscriber.options && subscriber.options.calls !== undefined) {
	          
	          subscriber.options.calls--;
	          
	          if (subscriber.options.calls < 1) {
	            this.removeSubscriber(subscriber.id);
	          }
	        }
	        
	        
	        subscriber.fn.apply(subscriber.context, data);

	        subsAfter = this._subscribers.length;
	        y = subsAfter;
	        if (subsAfter === subsBefore - 1) {
	          x--;
	        }
	      }
	    }

	    if (this._parent) {
	      this._parent.publish(data);
	    }

	    this.stopped = false;
	  }

	  var Mediator = function() {
	    if (!(this instanceof Mediator)) {
	      return new Mediator();
	    }

	    this._channels = new Channel('');
	  }
	  Mediator.prototype.getChannel = function(namespace, readOnly) {
	    var channel = this._channels,
	        namespaceHierarchy = namespace.split(':'),
	        x = 0,
	        y = namespaceHierarchy.length;

	    if (namespace === '') {
	      return channel;
	    }

	    if (namespaceHierarchy.length > 0) {
	      for(x, y; x < y; x++) {

	        if (!channel.hasChannel(namespaceHierarchy[x])) {
	          if (readOnly) {
	            break;
	          } else {
	            channel.addChannel(namespaceHierarchy[x]);
	          }
	        }

	        channel = channel.returnChannel(namespaceHierarchy[x]);
	      }
	    }

	    return channel;
	  }
	  Mediator.prototype.subscribe = function(channelName, fn, options, context) {
	    var channel = this.getChannel(channelName || "", false);

	    options = options || {};
	    context = context || {};

	    return channel.addSubscriber(fn, options, context);
	  }
	  Mediator.prototype.once = function(channelName, fn, options, context) {
	    options = options || {};
	    options.calls = 1;

	    return this.subscribe(channelName, fn, options, context);
	  }
	  Mediator.prototype.getSubscriber = function(identifier, channelName) {
	    var channel = this.getChannel(channelName || "", true);
	    
	    
	    if (channel.namespace !== channelName) {
	      return null;
	    }

	    return channel.getSubscriber(identifier);
	  }
	  Mediator.prototype.remove = function(channelName, identifier) {
	    var channel = this.getChannel(channelName || "", true);
	    if (channel.namespace !== channelName) {
	      return false;
	    }

	    channel.removeSubscriber(identifier);
	  }
	  Mediator.prototype.publish = function(channelName) {
	    var channel = this.getChannel(channelName || "", true);
	    if (channel.namespace !== channelName) {
	      return null;
	    }

	    var args = Array.prototype.slice.call(arguments, 1);

	    args.push(channel);

	    channel.publish(args);
	  }
	  Mediator.prototype.on = Mediator.prototype.subscribe;
	  Mediator.prototype.bind = Mediator.prototype.subscribe;
	  Mediator.prototype.emit = Mediator.prototype.publish;
	  Mediator.prototype.trigger = Mediator.prototype.publish;
	  Mediator.prototype.off = Mediator.prototype.remove;

	  Mediator.Channel = Channel;
	  Mediator.Subscriber = Subscriber;

	  var WebWorker = function(){
	    this.worker = new Worker("assets/js/core/worker.js");
	    this.worker.onmessage = function( e ) {
	      console.log('FROM WORKER: ', e);
	      var data = e.data;
	      for (var key in data) {
	        if (data.hasOwnProperty(key)) {
	          data[key];

	          switch (key) {
	            case 'template:loaded':
	              var templateName = Object.keys( data[key] )[0],
	                  data         = data[key][templateName];
	              
	              core.events.publish("core::template:loaded", {
	                name : templateName,
	                raw  : data
	              });
	              
	              break;
	            default:
	              console.log('default');
	              break;
	          }

	        }
	      }
	    };

	    return this.worker;
	  };

	  var Loader = function(){
	    console.log('loader ');
	  };

	  var Core = function( config ){
	    this.events   = new Mediator();
	    this.worker   = new WebWorker();
	    this.loader   = new Loader();
	    this.dom      = {};
	    this.utils    = {};
	    this.modules  = {};
	    this.debug    = true;

	    this.bindEvents();
	    // this.startAll();
	  };

	  Core.prototype.bindEvents = function() {
	    var core = this;

	    core.events.subscribe("core::preloader:finish", function(){
	      console.log('core::preloader:finish');
	      
	      setTimeout(function(){
	        core.modules.progressbar.destroy();
	        core.events.remove("core::preloader:start");
	        core.events.remove("core::preloader:finish");
	      }, 1000);

	      core.modules.router.start();
	      location.hash = '#reports';

	    });

	    core.events.subscribe( "core::template:load", function (template) {
	       core.worker.postMessage( [ 'template:load', template ] )
	    });


	  };

	  Core.prototype.start = function(module) {
	    this.events.publish( "core::start:" + module );
	  };
	  Core.prototype.destroy = function(module) {
	    this.events.publish( "core::destroy:" + module );
	  };

	  Core.prototype.startAll = function() {
	    this.events.publish("core::start:all");
	  };
	  Core.prototype.destroyAll = function() {
	    this.events.publish("core::destroy:all");
	  };

	  return new Core();
	})();


/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	core.dom = (function(){
	  var DomManager = function(){
	    this.root        = document;
	    this.application = {};
	    this.snackbar    = {};

	  };

	  DomManager.prototype.start = function() {
	    console.log( 'DomManager: start' );
	    
	    var application = document.createElement('div');
	    application.id = 'core-application';
	    this.application = application;

	    this.root.body.appendChild( application );

	  };
	  DomManager.prototype.stop = function() {
	    console.log( 'DomManager: stop' );
	  };
	  DomManager.prototype.destroy = function() {
	    console.log( 'DomManager: destroy' );
	  };

	  var manager = new DomManager();
	  

	  core.events.subscribe("core::start:all", function(){
	    console.log('core::start:manager');
	    manager.start();
	  }, { priority: 0 });

	  return manager;
	})();

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';

	core.utils = (function(){
	  var Utils = function(){
	    this.element = [];
	  };
	  Utils.prototype.merge = function (from, to) {
	    var result = {};

	    for ( var key in from ) {
	      if ( from.hasOwnProperty(key) ) {
	        if ( !result.hasOwnProperty(key) ) {
	          result[key] = from[key]
	        };
	      }
	    }
	    for (var key in to) {
	      if (to.hasOwnProperty(key)) {
	        if ( !result.hasOwnProperty(key) ) {
	          result[key] = to[key]
	        };
	      }
	    }
	    return result;
	  }
	  Utils.prototype.start = function() {
	    console.log( 'Utils: start' );
	  };
	  Utils.prototype.stop = function() {
	    console.log( 'Utils: stop' );
	  };
	  Utils.prototype.destroy = function() {
	    console.log( 'Utils: destroy' );
	    this.element = [];
	  };

	  return new Utils();
	})();


/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';

	core.preloader = (function(){

	  var Preloader = function(){
	    this.modules = [];
	  };
	  Preloader.prototype.start = function() {
	    console.log( 'Preloader: start' );
	    this.modules = ['userInfo', 'userDocs'];
	  };
	  Preloader.prototype.stop = function() {
	    console.log( 'Preloader: stop' );
	  };
	  Preloader.prototype.destroy = function() {
	    console.log( 'Preloader: destroy' );
	    delete this.modules;
	  };

	  return new Preloader();
	})();

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';

	core.modules.template = (function() {
	  var Template = function(config){
	    this.name = config.name || '';
	    this.path = config.path || '';
	    this.raw  = config.raw  || '';
	    return this;
	  };
	  Template.prototype.load = function() {
	    core.events.publish( "core::template:load", this.name );
	    return this;
	  };

	  var Templates = function(){
	    this.templates = {};
	    this.ready     = false;
	    this.toLoad    = ['core-progressbar', 'reports-index'];
	  };
	  Templates.prototype.Template = Template;
	  
	  Templates.prototype.add = function(name) {
	    this.templates[ name ] = new this.Template({ name: name }).load();
	  };

	  Templates.prototype.init = function() {

	    for (var i = this.toLoad.length - 1; i >= 0; i--) {
	      this.add( this.toLoad[i] );
	    };

	    core.events.publish( "core::templates:load", this.templates );
	  };

	  Templates.prototype.bindEvents = function() {
	    var templates = this;

	    core.events.subscribe("core::templates:load::success", function ( tmp ){
	      console.log( 'Load::',tmp );
	    });
	    
	    core.events.subscribe("core::templates:load::fails",   function ( e ){
	      throw new Error(e);
	    });

	    core.events.subscribe("core::template:loaded", function (data) {
	       console.log('***', data);
	       templates.templates[data.name].raw = data.raw;
	       
	       var dataNameParse = data.name.split('-');

	       var moduleRoot = dataNameParse[0],
	           moduleName = dataNameParse[1];
	      
	       if ( Object.keys(templates.templates).length == templates.toLoad.length ) {
	         core.events.publish( moduleRoot + "::" + moduleName + ":template:ready", templates.templates[data.name] );
	         this.loaded = true;
	       }
	       // templates.tempates[ data.name ].raw = data.data;
	    });
	  };
	  

	  Templates.prototype.start = function() {
	    this.init();
	    this.bindEvents();
	  };

	  Templates.prototype.stop = function() {
	    // console.log( 'Templates: stop' );
	  };

	  Templates.prototype.destroy = function() {
	    // console.log( 'Templates: destroy' );
	  };

	  var templates = new Templates();

	  core.events.subscribe("core::start:all", function(){
	    console.log('core::start:templates');
	    templates.start();
	  });

	  return templates;
	}());

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	core.modules.progressbar = (function(){

	  var Progressbar = function() {
	    this.modules = [];
	    this.total   = this.modules.length;
	    this.count   = 0;
	    this.percent = 0;
	  
	    this.ready   = false;
	    this.element = {};
	    this.bindEvents();
	  };

	  Progressbar.prototype.bindEvents = function() {
	    var progressbar = this;

	    core.events.subscribe("core::start:all", function(){
	      console.log('core::start:progress');
	      progressbar.start();
	    });

	    core.events.subscribe("core::progressbar:template:ready", function(template){
	      console.log('core::progressbar:template:ready', template );
	      progressbar.updateRoot( template.raw );
	      progressbar.action();
	    });
	    
	  };

	  Progressbar.prototype.start = function() {
	    this.build();
	  };
	  Progressbar.prototype.stop = function() {
	    // this.build();
	    // this.action();
	  };
	  Progressbar.prototype.destroy = function() {
	    this.element.remove();
	    delete this.element;
	  };

	  Progressbar.prototype.build = function() {
	    this.element = document.createElement('div');
	    this.element.id = 'core-progessbar';
	    this.element.classList.add('core-progressbar');
	    core.dom.application.appendChild( this.element );
	  };

	  Progressbar.prototype.action = function() {
	    var progressbar = this;
	    var modules = [ 'user', 'router', 'snackbar', 'reports' ];

	    for (var i = modules.length - 1; i >= 0; i--) {
	      var module = modules[i];

	      var promise = new Promise(
	        function( resolve, reject ) {
	          var moduleRaw = __webpack_require__(7)("./" + module + '.js');
	          setTimeout(function(){
	            resolve(true);
	          }, Math.random() * 500);
	        }
	      );

	      promise.then(function(){
	        progressbar.updateProgress();
	      }).catch(function(e){
	        throw new Error(e);
	      });

	      progressbar.modules.push( promise );
	    }

	    progressbar.total = progressbar.modules.length;

	    Promise.all( progressbar.modules ).then(
	      function( values ) {
	        progressbar.finish();
	      }
	    ).catch(function(e){
	      throw new Error(e);
	    });
	  };

	  Progressbar.prototype.finish = function() {
	    core.events.publish("core::preloader:finish");
	    this.element.classList.remove('fadeIn');
	    this.element.classList.add('fadeOut');
	  };

	  Progressbar.prototype.updateProgress = function() {
	    this.count++;
	    this.percent = parseFloat( this.count / this.total );
	    this.element.querySelector('.core-progressbar-bar').style.width = this.percent * 100 + '%';
	    console.log( 'updateProgress', this.count, this.total, parseFloat( this.count / this.total )*100 );
	  };
	  Progressbar.prototype.updateRoot = function(html) {
	    this.element.innerHTML = html;
	    this.element.classList.add('animated');
	    this.element.classList.add('fadeIn');
	  };

	  var progress = new Progressbar();

	  return progress;
	})();

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./progressbar.js": 6,
		"./reports.js": 8,
		"./router.js": 9,
		"./snackbar.js": 10,
		"./templates.js": 5,
		"./user.js": 11
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 7;


/***/ },
/* 8 */
/***/ function(module, exports) {

	"use strict";
	core.modules.reports = (function(){
	  var Reports = function(){
	    this.element = [];
	  };
	  Reports.prototype.show = function(id) {
	    console.log( 'Reports: show -> ', id );
	  };

	  Reports.prototype.start = function() {
	    console.log( 'Reports: start' );
	  };
	  Reports.prototype.stop = function() {
	    console.log( 'Reports: stop' );
	  };
	  Reports.prototype.destroy = function() {
	    console.log( 'Reports: destroy' );
	    this.element = [];
	  };

	  return new Reports();
	})();

/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';

	core.modules.router = (function() {

	  function Route(path, callback, router) {
	    this.path     = path;
	    this.callback = callback;
	    this.router   = router;
	    this.values   = [];
	  };
	  Route.prototype.regex =  function() {

	    var path = this.path;

	    if (typeof path === 'string') {
	      return new RegExp('^' + path.replace(/\//g, '\\/').replace(this.router.namedParam.match, this.router.namedParam.replace) + '$');
	    }
	    return path;
	  };
	  Route.prototype.params =  function() {

	    var obj = {},
	      name, values = this.values,
	      params = values,
	      i, t = 0,
	      path = this.path;

	    if (typeof path === 'string') {
	      t = 1;
	      params = path.match(this.router.namedParam.match);
	    }

	    for (i in params) {
	      name = t ? params[i].replace(this.router.namedParam.match, '$1') : i;
	      obj[name] = values[i];
	    }

	    return obj;
	  };
	  Route.prototype.test =  function(url) {
	    // console.log('Route:test -> url: ', url, this.regex(), url.match(this.regex()) );
	    
	    var matches;
	    if ( matches = url.match(this.regex()) ) {
	      this.values = matches.slice(1);
	      return true;
	    }
	    return false;
	  };
	  Route.prototype.run =  function() {
	    if (typeof this.callback === 'string') {
	      return this.router.handler[this.callback](this.params());
	    }
	    return this.callback.apply(this.router.context, [this.params()]);
	  };

	  function Router() {
	    this.pathRoot = '';
	    this.routes = [];
	    this.type = 'hash';
	    this.path = null;
	    this.hash = null;
	    this.context = this;
	    this.handler = window;

	    var namedParam = '([\\w-]+)';
	    this.namedParam = {
	      match: new RegExp('{(' + namedParam + ')}', 'g'),
	      replace: namedParam
	    };
	  };
	  Router.prototype.Route = Route;
	  Router.prototype.update = function(options) {
	    options = options || {};

	    if (options.type){
	      this.setType(options.type)
	    }
	    if (options.path){
	      this.setPath(options.path)
	    }
	    if (options.pathRoot){
	      this.setPathRoot(options.pathRoot)
	    }
	    if (options.hash){
	      this.setHash(options.hash)
	    }
	    if (options.context){
	      this.setContext(options.context)
	    }
	    if (options.handler){
	      this.setHandler(options.handler)
	    }
	    if (options.routes) {
	      var route;
	      for (route in options.routes) {
	        this.add(route, options.routes[route]);
	      }
	    }
	  };
	  Router.prototype.add =  function(route, callback) {
	    this.routes.push(new this.Route(route, callback, this));
	    return this;
	  };
	  Router.prototype.empty =  function() {
	    this.routes = [];
	    return this;
	  };
	  Router.prototype.setType =  function(type) {
	    this.type = type;
	    return this;
	  };
	  Router.prototype.setPathRoot =  function(url) {
	    this.pathRoot = url;
	    return this;
	  };
	  Router.prototype.setPath =  function(path) {
	    this.path = path;
	    return this;
	  };
	  Router.prototype.setHash =  function(hash) {
	    this.hash = hash;
	    return this;
	  };
	  Router.prototype.setContext =  function(context) {
	    this.context = context;
	    return this;
	  };
	  Router.prototype.setHandler =  function(handler) {
	    this.handler = handler;
	    return this;
	  };
	  Router.prototype.getUrl =  function(routeType) {

	    var url;
	    routeType = routeType || this.type;

	    if (routeType == 'path') {
	      var rootRegex = new RegExp('^' + this.pathRoot + '/?');
	      url = this.path || window.location.pathname.substring(1);
	      url = url.replace(rootRegex, '');
	    } else if (routeType == 'hash') {
	      url = this.hash || window.location.hash.substring(1);
	    }

	    return decodeURI(url);
	  };
	  Router.prototype.match =  function(path, callback) {
	    var route = new this.Route(path, callback, this);
	    if (route.test(this.getUrl())) {
	      return route.run();
	    }
	  };
	  Router.prototype.run =  function() {
	    var url   = this.getUrl(),
	        route = {};

	    for (var i in this.routes) {
	      route = this.routes[i];

	      if (route.test(url)) {
	        route.run();
	        return route;
	      }
	    }
	  };
	  Router.prototype.bindEvents = function() {
	    window.addEventListener('hashchange', this.run.bind(this) );
	  };
	  Router.prototype.start = function() {
	    
	    this.update({
	      pathRoot : '',
	      routes   : {
	        reports : function(params) {
	          console.log('[reports]: ', params);
	          core.modules.reports.start();
	        },
	        'reports/{id}' : function(params) {
	          console.log('[reports/{id}]: ', params);
	          core.modules.reports.show( params.id );
	        }
	      }
	    });
	    this.bindEvents();
	    this.run();
	  };
	  Router.prototype.stop = function() {
	    // console.log( 'Router: stop' );
	  };
	  Router.prototype.destroy = function() {
	    // console.log( 'Router: destroy' );
	  };

	  var router = new Router();

	  core.events.subscribe("core::start:all", function(){
	    console.log('core::start:router');
	    router.start();
	  });

	  return router;
	}());

/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";

	core.modules.snackbar = (function(){

	  var Snackbar = function() {

	    this.element       = {};
	    this.textElement   = {};
	    this.actionElement = {};

	    this.active        = false;
	    this.actionHandler = undefined;
	    this.message       = undefined;
	    this.actionText    = undefined;
	    this.queuedNotifications = [];
	    this.setActionHidden(true);
	  };
	  Snackbar.prototype.Constant = {
	    ANIMATION_LENGTH: 500
	  };
	  Snackbar.prototype.cssClasses = {
	    SNACKBAR: 'core-snackbar',
	    MESSAGE:  'core-snackbar__text',
	    ACTION:   'core-snackbar__action',
	    ACTIVE:   'core-snackbar--active'
	  };
	  Snackbar.prototype.displaySnackbar = function() {
	    this.element.setAttribute('aria-hidden', 'true');

	    if (this.actionHandler) {
	      this.actionElement.textContent = this.actionText;
	      this.actionElement.addEventListener('click', this.actionHandler);
	      this.setActionHidden(false);
	    }

	    this.textElement.textContent = this.message;
	    this.element.classList.add(this.cssClasses.ACTIVE);
	    this.element.setAttribute('aria-hidden', 'false');
	    setTimeout(this.cleanup.bind(this), this.timeout);
	  };
	  Snackbar.prototype.showSnackbar = function(data) {
	    if (data === undefined) {
	      console.error('Please provide a data object with at least a message to display.');
	      return false;
	    }

	    if (data.message === undefined) {
	      console.error('Please provide a message to be displayed.');
	      return false;
	    }

	    if (data.actionHandler && !data.actionText) {
	      console.error('Please provide action text with the handler.');
	      return false;
	    }

	    if (this.active) {
	      this.queuedNotifications.push(data);
	    } else {
	      this.active = true;
	      this.message = data.message;
	      if (data.timeout) {
	        this.timeout = data.timeout;
	      } else {
	        this.timeout = 2750;
	      }
	      if (data.actionHandler) {
	        this.actionHandler = data.actionHandler;
	      }
	      if (data.actionText) {
	        this.actionText = data.actionText;
	      }
	      this.displaySnackbar();
	    }
	  };
	  Snackbar.prototype.checkQueue = function() {
	    if ( this.queuedNotifications.length > 0) {
	      this.showSnackbar(this.queuedNotifications.shift());
	    }
	  };
	  Snackbar.prototype.cleanup = function() {
	    this.element.classList.remove(this.cssClasses.ACTIVE);
	    setTimeout(function() {
	      this.element.setAttribute('aria-hidden', 'true');
	      this.textElement.textContent = '';
	      if (!this.actionElement.getAttribute('aria-hidden')) {
	        this.setActionHidden(true);
	        this.actionElement.textContent = '';
	        this.actionElement.removeEventListener('click', this.actionHandler);
	      }
	      this.actionHandler = undefined;
	      this.message = undefined;
	      this.actionText = undefined;
	      this.active = false;
	      this.checkQueue();
	    }.bind(this), (this.Constant.ANIMATION_LENGTH));
	  };
	  Snackbar.prototype.setActionHidden = function(value) {
	    if ( Object.keys(this.actionElement).length ) {
	      value ? this.actionElement.setAttribute('aria-hidden', 'true') : this.actionElement.removeAttribute('aria-hidden');
	    }
	  };

	  Snackbar.prototype.start = function() {
	    console.log( 'Snackbar: start' );
	    
	    // <div id="core-snackbar" class="core-snackbar">
	    //   <div class="core-snackbar__text"></div>
	    //   <button class="core-snackbar__action" type="button"></button>
	    // </div>

	    var coreSnackbar = document.createElement("div");
	    coreSnackbar.id = 'core-snackbar';
	    coreSnackbar.classList.add('core-snackbar');
	    
	    var coreSnackbarText = document.createElement("div");
	    coreSnackbarText.classList.add('core-snackbar__text');
	    coreSnackbar.appendChild( coreSnackbarText );

	    var coreSnackbarButton = document.createElement("button");
	    coreSnackbarButton.classList.add('core-snackbar__action');
	    coreSnackbar.appendChild( coreSnackbarButton );

	    core.dom.snackbar = coreSnackbar;
	    core.dom.application.appendChild( coreSnackbar );
	    
	    this.element       = coreSnackbar;
	    this.textElement   = this.element.querySelector('.' + this.cssClasses.MESSAGE);
	    this.actionElement = this.element.querySelector('.' + this.cssClasses.ACTION);
	  };
	  Snackbar.prototype.stop = function() {
	    console.log( 'Snackbar: stop' );
	  };
	  Snackbar.prototype.destroy = function() {
	    console.log( 'Snackbar: destroy' );
	    this.element.remove();
	    delete this.element;
	  };

	  var snackbar = new Snackbar();

	  core.events.subscribe("core::start:all", function(){
	    console.log('core::start:snackbar');
	    snackbar.start();
	  });


	  return snackbar;
	})();


/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict';

	core.modules.user = (function() {

	  var User = function(){
	    this.name = '';
	  };
	  User.prototype.start = function() {
	    // console.log( 'User: start' );
	  };
	  User.prototype.stop = function() {
	    // console.log( 'User: stop' );
	  };
	  User.prototype.destroy = function() {
	    // console.log( 'User: destroy' );
	  };

	  var user = new User();

	  core.events.subscribe("core::start:all", function(){
	    console.log('core::start:user');
	    user.start();
	  });

	  return user;
	}());

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;var __WEBPACK_AMD_DEFINE_RESULT__;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	var $, Context, Transparency, _, helpers,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	_ = require('../lib/lodash.js');

	helpers = require('./helpers');

	Context = require('./context');

	Transparency = {};

	Transparency.render = function(context, models, directives, options) {
	  var base, log;
	  if (models == null) {
	    models = [];
	  }
	  if (directives == null) {
	    directives = {};
	  }
	  if (options == null) {
	    options = {};
	  }
	  log = options.debug && console ? helpers.consoleLogger : helpers.nullLogger;
	  log("Transparency.render:", context, models, directives, options);
	  if (!context) {
	    return;
	  }
	  if (!_.isArray(models)) {
	    models = [models];
	  }
	  context = (base = helpers.data(context)).context || (base.context = new Context(context, Transparency));
	  return context.render(models, directives, options).el;
	};

	Transparency.matcher = function(element, key) {
	  return element.el.id === key || indexOf.call(element.classNames, key) >= 0 || element.el.name === key || element.el.getAttribute('data-bind') === key;
	};

	Transparency.clone = function(node) {
	  return $(node).clone()[0];
	};

	Transparency.jQueryPlugin = helpers.chainable(function(models, directives, options) {
	  var context, i, len, results;
	  results = [];
	  for (i = 0, len = this.length; i < len; i++) {
	    context = this[i];
	    results.push(Transparency.render(context, models, directives, options));
	  }
	  return results;
	});

	if ((typeof jQuery !== "undefined" && jQuery !== null) || (typeof Zepto !== "undefined" && Zepto !== null)) {
	  $ = jQuery || Zepto;
	  if ($ != null) {
	    $.fn.render = Transparency.jQueryPlugin;
	  }
	}

	if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
	  module.exports = Transparency;
	}

	if (typeof window !== "undefined" && window !== null) {
	  window.Transparency = Transparency;
	}

	if ("function" !== "undefined" && __webpack_require__(13) !== null ? __webpack_require__(14) : void 0) {
	  !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    return Transparency;
	  }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}

	},{"../lib/lodash.js":7,"./context":3,"./helpers":5}],2:[function(require,module,exports){
	var Attribute, AttributeFactory, BooleanAttribute, Class, Html, Text, _, helpers,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	_ = require('../lib/lodash');

	helpers = require('./helpers');

	module.exports = AttributeFactory = {
	  Attributes: {},
	  createAttribute: function(element, name) {
	    var Attr;
	    Attr = AttributeFactory.Attributes[name] || Attribute;
	    return new Attr(element, name);
	  }
	};

	Attribute = (function() {
	  function Attribute(el1, name1) {
	    this.el = el1;
	    this.name = name1;
	    this.templateValue = this.el.getAttribute(this.name) || '';
	  }

	  Attribute.prototype.set = function(value) {
	    this.el[this.name] = value;
	    return this.el.setAttribute(this.name, value.toString());
	  };

	  return Attribute;

	})();

	BooleanAttribute = (function(superClass) {
	  var BOOLEAN_ATTRIBUTES, i, len, name;

	  extend(BooleanAttribute, superClass);

	  BOOLEAN_ATTRIBUTES = ['hidden', 'async', 'defer', 'autofocus', 'formnovalidate', 'disabled', 'autofocus', 'formnovalidate', 'multiple', 'readonly', 'required', 'checked', 'scoped', 'reversed', 'selected', 'loop', 'muted', 'autoplay', 'controls', 'seamless', 'default', 'ismap', 'novalidate', 'open', 'typemustmatch', 'truespeed'];

	  for (i = 0, len = BOOLEAN_ATTRIBUTES.length; i < len; i++) {
	    name = BOOLEAN_ATTRIBUTES[i];
	    AttributeFactory.Attributes[name] = BooleanAttribute;
	  }

	  function BooleanAttribute(el1, name1) {
	    this.el = el1;
	    this.name = name1;
	    this.templateValue = this.el.getAttribute(this.name) || false;
	  }

	  BooleanAttribute.prototype.set = function(value) {
	    this.el[this.name] = value;
	    if (value) {
	      return this.el.setAttribute(this.name, this.name);
	    } else {
	      return this.el.removeAttribute(this.name);
	    }
	  };

	  return BooleanAttribute;

	})(Attribute);

	Text = (function(superClass) {
	  extend(Text, superClass);

	  AttributeFactory.Attributes['text'] = Text;

	  function Text(el1, name1) {
	    var child;
	    this.el = el1;
	    this.name = name1;
	    this.templateValue = ((function() {
	      var i, len, ref, results;
	      ref = this.el.childNodes;
	      results = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        child = ref[i];
	        if (child.nodeType === helpers.TEXT_NODE) {
	          results.push(child.nodeValue);
	        }
	      }
	      return results;
	    }).call(this)).join('');
	    this.children = _.toArray(this.el.children);
	    if (!(this.textNode = this.el.firstChild)) {
	      this.el.appendChild(this.textNode = this.el.ownerDocument.createTextNode(''));
	    } else if (this.textNode.nodeType !== helpers.TEXT_NODE) {
	      this.textNode = this.el.insertBefore(this.el.ownerDocument.createTextNode(''), this.textNode);
	    }
	  }

	  Text.prototype.set = function(text) {
	    var child, i, len, ref, results;
	    while (child = this.el.firstChild) {
	      this.el.removeChild(child);
	    }
	    this.textNode.nodeValue = text;
	    this.el.appendChild(this.textNode);
	    ref = this.children;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      child = ref[i];
	      results.push(this.el.appendChild(child));
	    }
	    return results;
	  };

	  return Text;

	})(Attribute);

	Html = (function(superClass) {
	  extend(Html, superClass);

	  AttributeFactory.Attributes['html'] = Html;

	  function Html(el1) {
	    this.el = el1;
	    this.templateValue = '';
	    this.children = _.toArray(this.el.children);
	  }

	  Html.prototype.set = function(html) {
	    var child, i, len, ref, results;
	    while (child = this.el.firstChild) {
	      this.el.removeChild(child);
	    }
	    this.el.innerHTML = html + this.templateValue;
	    ref = this.children;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      child = ref[i];
	      results.push(this.el.appendChild(child));
	    }
	    return results;
	  };

	  return Html;

	})(Attribute);

	Class = (function(superClass) {
	  extend(Class, superClass);

	  AttributeFactory.Attributes['class'] = Class;

	  function Class(el) {
	    Class.__super__.constructor.call(this, el, 'class');
	  }

	  return Class;

	})(Attribute);

	},{"../lib/lodash":7,"./helpers":5}],3:[function(require,module,exports){
	var Context, Instance, after, before, chainable, cloneNode, ref;

	ref = require('./helpers'), before = ref.before, after = ref.after, chainable = ref.chainable, cloneNode = ref.cloneNode;

	Instance = require('./instance');

	module.exports = Context = (function() {
	  var attach, detach;

	  detach = chainable(function() {
	    this.parent = this.el.parentNode;
	    if (this.parent) {
	      this.nextSibling = this.el.nextSibling;
	      return this.parent.removeChild(this.el);
	    }
	  });

	  attach = chainable(function() {
	    if (this.parent) {
	      if (this.nextSibling) {
	        return this.parent.insertBefore(this.el, this.nextSibling);
	      } else {
	        return this.parent.appendChild(this.el);
	      }
	    }
	  });

	  function Context(el, Transparency) {
	    this.el = el;
	    this.Transparency = Transparency;
	    this.template = cloneNode(this.el);
	    this.instances = [new Instance(this.el, this.Transparency)];
	    this.instanceCache = [];
	  }

	  Context.prototype.render = before(detach)(after(attach)(chainable(function(models, directives, options) {
	    var children, i, index, instance, len, model, results;
	    while (models.length < this.instances.length) {
	      this.instanceCache.push(this.instances.pop().remove());
	    }
	    while (models.length > this.instances.length) {
	      instance = this.instanceCache.pop() || new Instance(cloneNode(this.template), this.Transparency);
	      this.instances.push(instance.appendTo(this.el));
	    }
	    results = [];
	    for (index = i = 0, len = models.length; i < len; index = ++i) {
	      model = models[index];
	      instance = this.instances[index];
	      children = [];
	      results.push(instance.prepare(model, children).renderValues(model, children).renderDirectives(model, index, directives).renderChildren(model, children, directives, options));
	    }
	    return results;
	  })));

	  return Context;

	})();

	},{"./helpers":5,"./instance":6}],4:[function(require,module,exports){
	var AttributeFactory, Checkbox, Element, ElementFactory, Input, Radio, Select, TextArea, VoidElement, _, helpers,
	  hasProp = {}.hasOwnProperty,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

	_ = require('../lib/lodash.js');

	helpers = require('./helpers');

	AttributeFactory = require('./attributeFactory');

	module.exports = ElementFactory = {
	  Elements: {
	    input: {}
	  },
	  createElement: function(el) {
	    var El, name;
	    if ('input' === (name = el.nodeName.toLowerCase())) {
	      El = ElementFactory.Elements[name][el.type.toLowerCase()] || Input;
	    } else {
	      El = ElementFactory.Elements[name] || Element;
	    }
	    return new El(el);
	  }
	};

	Element = (function() {
	  function Element(el1) {
	    this.el = el1;
	    this.attributes = {};
	    this.childNodes = _.toArray(this.el.childNodes);
	    this.nodeName = this.el.nodeName.toLowerCase();
	    this.classNames = this.el.className.split(' ');
	    this.originalAttributes = {};
	  }

	  Element.prototype.empty = function() {
	    var child;
	    while (child = this.el.firstChild) {
	      this.el.removeChild(child);
	    }
	    return this;
	  };

	  Element.prototype.reset = function() {
	    var attribute, name, ref, results;
	    ref = this.attributes;
	    results = [];
	    for (name in ref) {
	      attribute = ref[name];
	      results.push(attribute.set(attribute.templateValue));
	    }
	    return results;
	  };

	  Element.prototype.render = function(value) {
	    return this.attr('text', value);
	  };

	  Element.prototype.attr = function(name, value) {
	    var attribute, base;
	    attribute = (base = this.attributes)[name] || (base[name] = AttributeFactory.createAttribute(this.el, name, value));
	    if (value != null) {
	      attribute.set(value);
	    }
	    return attribute;
	  };

	  Element.prototype.renderDirectives = function(model, index, attributes) {
	    var directive, name, results, value;
	    results = [];
	    for (name in attributes) {
	      if (!hasProp.call(attributes, name)) continue;
	      directive = attributes[name];
	      if (!(typeof directive === 'function')) {
	        continue;
	      }
	      value = directive.call(model, {
	        element: this.el,
	        index: index,
	        value: this.attr(name).templateValue
	      });
	      if (value != null) {
	        results.push(this.attr(name, value));
	      } else {
	        results.push(void 0);
	      }
	    }
	    return results;
	  };

	  return Element;

	})();

	Select = (function(superClass) {
	  extend(Select, superClass);

	  ElementFactory.Elements['select'] = Select;

	  function Select(el) {
	    Select.__super__.constructor.call(this, el);
	    this.elements = helpers.getElements(el);
	  }

	  Select.prototype.render = function(value) {
	    var i, len, option, ref, results;
	    value = value.toString();
	    ref = this.elements;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      option = ref[i];
	      if (option.nodeName === 'option') {
	        results.push(option.attr('selected', option.el.value === value));
	      }
	    }
	    return results;
	  };

	  return Select;

	})(Element);

	VoidElement = (function(superClass) {
	  var VOID_ELEMENTS, i, len, nodeName;

	  extend(VoidElement, superClass);

	  function VoidElement() {
	    return VoidElement.__super__.constructor.apply(this, arguments);
	  }

	  VOID_ELEMENTS = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];

	  for (i = 0, len = VOID_ELEMENTS.length; i < len; i++) {
	    nodeName = VOID_ELEMENTS[i];
	    ElementFactory.Elements[nodeName] = VoidElement;
	  }

	  VoidElement.prototype.attr = function(name, value) {
	    if (name !== 'text' && name !== 'html') {
	      return VoidElement.__super__.attr.call(this, name, value);
	    }
	  };

	  return VoidElement;

	})(Element);

	Input = (function(superClass) {
	  extend(Input, superClass);

	  function Input() {
	    return Input.__super__.constructor.apply(this, arguments);
	  }

	  Input.prototype.render = function(value) {
	    return this.attr('value', value);
	  };

	  return Input;

	})(VoidElement);

	TextArea = (function(superClass) {
	  extend(TextArea, superClass);

	  function TextArea() {
	    return TextArea.__super__.constructor.apply(this, arguments);
	  }

	  ElementFactory.Elements['textarea'] = TextArea;

	  return TextArea;

	})(Input);

	Checkbox = (function(superClass) {
	  extend(Checkbox, superClass);

	  function Checkbox() {
	    return Checkbox.__super__.constructor.apply(this, arguments);
	  }

	  ElementFactory.Elements['input']['checkbox'] = Checkbox;

	  Checkbox.prototype.render = function(value) {
	    return this.attr('checked', Boolean(value));
	  };

	  return Checkbox;

	})(Input);

	Radio = (function(superClass) {
	  extend(Radio, superClass);

	  function Radio() {
	    return Radio.__super__.constructor.apply(this, arguments);
	  }

	  ElementFactory.Elements['input']['radio'] = Radio;

	  return Radio;

	})(Checkbox);

	},{"../lib/lodash.js":7,"./attributeFactory":2,"./helpers":5}],5:[function(require,module,exports){
	var ElementFactory, _getElements, expando, html5Clone;

	ElementFactory = require('./elementFactory');

	exports.before = function(decorator) {
	  return function(method) {
	    return function() {
	      decorator.apply(this, arguments);
	      return method.apply(this, arguments);
	    };
	  };
	};

	exports.after = function(decorator) {
	  return function(method) {
	    return function() {
	      method.apply(this, arguments);
	      return decorator.apply(this, arguments);
	    };
	  };
	};

	exports.chainable = exports.after(function() {
	  return this;
	});

	exports.onlyWith$ = function(fn) {
	  if ((typeof jQuery !== "undefined" && jQuery !== null) || (typeof Zepto !== "undefined" && Zepto !== null)) {
	    return (function($) {
	      return fn(arguments);
	    })(jQuery || Zepto);
	  }
	};

	exports.getElements = function(el) {
	  var elements;
	  elements = [];
	  _getElements(el, elements);
	  return elements;
	};

	_getElements = function(template, elements) {
	  var child, results;
	  child = template.firstChild;
	  results = [];
	  while (child) {
	    if (child.nodeType === exports.ELEMENT_NODE) {
	      elements.push(new ElementFactory.createElement(child));
	      _getElements(child, elements);
	    }
	    results.push(child = child.nextSibling);
	  }
	  return results;
	};

	exports.ELEMENT_NODE = 1;

	exports.TEXT_NODE = 3;

	html5Clone = function() {
	  return document.createElement('nav').cloneNode(true).outerHTML !== '<:nav></:nav>';
	};

	exports.cloneNode = (typeof document === "undefined" || document === null) || html5Clone() ? function(node) {
	  return node.cloneNode(true);
	} : function(node) {
	  var cloned, element, i, len, ref;
	  cloned = Transparency.clone(node);
	  if (cloned.nodeType === exports.ELEMENT_NODE) {
	    cloned.removeAttribute(expando);
	    ref = cloned.getElementsByTagName('*');
	    for (i = 0, len = ref.length; i < len; i++) {
	      element = ref[i];
	      element.removeAttribute(expando);
	    }
	  }
	  return cloned;
	};

	expando = 'transparency';

	exports.data = function(element) {
	  return element[expando] || (element[expando] = {});
	};

	exports.nullLogger = function() {};

	exports.consoleLogger = function() {
	  return console.log(arguments);
	};

	exports.log = exports.nullLogger;

	},{"./elementFactory":4}],6:[function(require,module,exports){
	var Instance, _, chainable, helpers,
	  hasProp = {}.hasOwnProperty;

	_ = require('../lib/lodash.js');

	chainable = (helpers = require('./helpers')).chainable;

	module.exports = Instance = (function() {
	  function Instance(template, Transparency) {
	    this.Transparency = Transparency;
	    this.queryCache = {};
	    this.childNodes = _.toArray(template.childNodes);
	    this.elements = helpers.getElements(template);
	  }

	  Instance.prototype.remove = chainable(function() {
	    var i, len, node, ref, results;
	    ref = this.childNodes;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      node = ref[i];
	      results.push(node.parentNode.removeChild(node));
	    }
	    return results;
	  });

	  Instance.prototype.appendTo = chainable(function(parent) {
	    var i, len, node, ref, results;
	    ref = this.childNodes;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      node = ref[i];
	      results.push(parent.appendChild(node));
	    }
	    return results;
	  });

	  Instance.prototype.prepare = chainable(function(model) {
	    var element, i, len, ref, results;
	    ref = this.elements;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      element = ref[i];
	      element.reset();
	      results.push(helpers.data(element.el).model = model);
	    }
	    return results;
	  });

	  Instance.prototype.renderValues = chainable(function(model, children) {
	    var element, key, results, value;
	    if (_.isElement(model) && (element = this.elements[0])) {
	      return element.empty().el.appendChild(model);
	    } else if (typeof model === 'object') {
	      results = [];
	      for (key in model) {
	        if (!hasProp.call(model, key)) continue;
	        value = model[key];
	        if (value != null) {
	          if (_.isString(value) || _.isNumber(value) || _.isBoolean(value) || _.isDate(value)) {
	            results.push((function() {
	              var i, len, ref, results1;
	              ref = this.matchingElements(key);
	              results1 = [];
	              for (i = 0, len = ref.length; i < len; i++) {
	                element = ref[i];
	                results1.push(element.render(value));
	              }
	              return results1;
	            }).call(this));
	          } else if (typeof value === 'object') {
	            results.push(children.push(key));
	          } else {
	            results.push(void 0);
	          }
	        }
	      }
	      return results;
	    }
	  });

	  Instance.prototype.renderDirectives = chainable(function(model, index, directives) {
	    var attributes, element, key, results;
	    results = [];
	    for (key in directives) {
	      if (!hasProp.call(directives, key)) continue;
	      attributes = directives[key];
	      if (!(typeof attributes === 'object')) {
	        continue;
	      }
	      if (typeof model !== 'object') {
	        model = {
	          value: model
	        };
	      }
	      results.push((function() {
	        var i, len, ref, results1;
	        ref = this.matchingElements(key);
	        results1 = [];
	        for (i = 0, len = ref.length; i < len; i++) {
	          element = ref[i];
	          results1.push(element.renderDirectives(model, index, attributes));
	        }
	        return results1;
	      }).call(this));
	    }
	    return results;
	  });

	  Instance.prototype.renderChildren = chainable(function(model, children, directives, options) {
	    var element, i, key, len, results;
	    results = [];
	    for (i = 0, len = children.length; i < len; i++) {
	      key = children[i];
	      results.push((function() {
	        var j, len1, ref, results1;
	        ref = this.matchingElements(key);
	        results1 = [];
	        for (j = 0, len1 = ref.length; j < len1; j++) {
	          element = ref[j];
	          results1.push(this.Transparency.render(element.el, model[key], directives[key], options));
	        }
	        return results1;
	      }).call(this));
	    }
	    return results;
	  });

	  Instance.prototype.matchingElements = function(key) {
	    var base, el, elements;
	    elements = (base = this.queryCache)[key] || (base[key] = (function() {
	      var i, len, ref, results;
	      ref = this.elements;
	      results = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        el = ref[i];
	        if (this.Transparency.matcher(el, key)) {
	          results.push(el);
	        }
	      }
	      return results;
	    }).call(this));
	    helpers.log("Matching elements for '" + key + "':", elements);
	    return elements;
	  };

	  return Instance;

	})();

	},{"../lib/lodash.js":7,"./helpers":5}],7:[function(require,module,exports){
	 var _ = {};

	_.toString = Object.prototype.toString;

	_.toArray = function(obj) {
	  var arr = new Array(obj.length);
	  for (var i = 0; i < obj.length; i++) {
	    arr[i] = obj[i];
	  }
	  return arr;
	};

	_.isString = function(obj) { return _.toString.call(obj) == '[object String]'; };

	_.isNumber = function(obj) { return _.toString.call(obj) == '[object Number]'; };

	_.isArray = Array.isArray || function(obj) {
	  return _.toString.call(obj) === '[object Array]';
	};

	_.isDate = function(obj) {
	  return _.toString.call(obj) === '[object Date]';
	};

	_.isElement = function(obj) {
	  return !!(obj && obj.nodeType === 1);
	};

	_.isPlainValue = function(obj) {
	  var type;
	  type = typeof obj;
	  return (type !== 'object' && type !== 'function') || exports.isDate(obj);
	};

	_.isBoolean = function(obj) {
	  return obj === true || obj === false;
	};

	module.exports = _;

	},{}]},{},[1]);


/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 14 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;!function e(t,n,i){function o(l,s){if(!n[l]){if(!t[l]){var a="function"==typeof require&&require;if(!s&&a)return require(l,!0);if(r)return r(l,!0);throw new Error("Cannot find module '"+l+"'")}var c=n[l]={exports:{}};t[l][0].call(c.exports,function(e){var n=t[l][1][e];return o(n?n:e)},c,c.exports,e,t,n,i)}return n[l].exports}for(var r="function"==typeof require&&require,l=0;l<i.length;l++)o(i[l]);return o}({1:[function(e,t,n){!function(t){"use strict";if(!t._muiLoadedJS){t._muiLoadedJS=!0;var n=e("src/js/lib/jqLite"),i=e("src/js/dropdown"),o=e("src/js/overlay"),r=e("src/js/ripple"),l=e("src/js/select"),s=e("src/js/tabs"),a=e("src/js/textfield");t.mui={overlay:o,tabs:s.api},n.ready(function(){a.initListeners(),l.initListeners(),r.initListeners(),i.initListeners(),s.initListeners()})}}(window)},{"src/js/dropdown":6,"src/js/lib/jqLite":7,"src/js/overlay":8,"src/js/ripple":9,"src/js/select":10,"src/js/tabs":11,"src/js/textfield":12}],2:[function(e,t,n){t.exports={debug:!0}},{}],3:[function(e,t,n){"use strict";function i(e,t,n){var i,a,c,u,d=document.documentElement.clientHeight,f=t*l+2*s,p=Math.min(f,d);a=s+l-(o+r),a-=n*l,c=-1*e.getBoundingClientRect().top,u=d-p+c,i=Math.min(Math.max(a,c),u);var m,h,v=0;return f>d&&(m=s+(n+1)*l-(-1*i+o+r),h=t*l+2*s-p,v=Math.min(m,h)),{height:p+"px",top:i+"px",scrollTop:v}}var o=15,r=32,l=42,s=8;t.exports={getMenuPositionalCSS:i}},{}],4:[function(e,t,n){"use strict";function i(e,t){if(t&&e.setAttribute){for(var n,i=h(e),o=t.split(" "),r=0;r<o.length;r++)n=o[r].trim(),-1===i.indexOf(" "+n+" ")&&(i+=n+" ");e.setAttribute("class",i.trim())}}function o(e,t,n){if(void 0===t)return getComputedStyle(e);var i=l(t);{if("object"!==i){"string"===i&&void 0!==n&&(e.style[v(t)]=n);var o=getComputedStyle(e),r="array"===l(t);if(!r)return b(e,t,o);for(var s,a={},c=0;c<t.length;c++)s=t[c],a[s]=b(e,s,o);return a}for(var s in t)e.style[v(s)]=t[s]}}function r(e,t){return t&&e.getAttribute?h(e).indexOf(" "+t+" ")>-1:!1}function l(e){if(void 0===e)return"undefined";var t=Object.prototype.toString.call(e);if(0===t.indexOf("[object "))return t.slice(8,-1).toLowerCase();throw new Error("MUI: Could not understand type: "+t)}function s(e,t,n,i){i=void 0===i?!1:i,e.addEventListener(t,n,i);var o=e._muiEventCache=e._muiEventCache||{};o[t]=o[t]||[],o[t].push([n,i])}function a(e,t,n,i){i=void 0===i?!1:i;var o,r,l=e._muiEventCache=e._muiEventCache||{},s=l[t]||[];for(r=s.length;r--;)o=s[r],(void 0===n||o[0]===n&&o[1]===i)&&(s.splice(r,1),e.removeEventListener(t,o[0],o[1]))}function c(e,t,n,i){s(e,t,function o(i){n&&n.apply(this,arguments),a(e,t,o)},i)}function u(e,t){var n=window;if(void 0===t){if(e===n){var i=document.documentElement;return(n.pageXOffset||i.scrollLeft)-(i.clientLeft||0)}return e.scrollLeft}e===n?n.scrollTo(t,d(n)):e.scrollLeft=t}function d(e,t){var n=window;if(void 0===t){if(e===n){var i=document.documentElement;return(n.pageYOffset||i.scrollTop)-(i.clientTop||0)}return e.scrollTop}e===n?n.scrollTo(u(n),t):e.scrollTop=t}function f(e){var t=window,n=e.getBoundingClientRect(),i=d(t),o=u(t);return{top:n.top+i,left:n.left+o,height:n.height,width:n.width}}function p(e){var t=!1,n=!0,i=document,o=i.defaultView,r=i.documentElement,l=i.addEventListener?"addEventListener":"attachEvent",s=i.addEventListener?"removeEventListener":"detachEvent",a=i.addEventListener?"":"on",c=function(n){("readystatechange"!=n.type||"complete"==i.readyState)&&(("load"==n.type?o:i)[s](a+n.type,c,!1),!t&&(t=!0)&&e.call(o,n.type||n))},u=function(){try{r.doScroll("left")}catch(e){return void setTimeout(u,50)}c("poll")};if("complete"==i.readyState)e.call(o,"lazy");else{if(i.createEventObject&&r.doScroll){try{n=!o.frameElement}catch(d){}n&&u()}i[l](a+"DOMContentLoaded",c,!1),i[l](a+"readystatechange",c,!1),o[l](a+"load",c,!1)}}function m(e,t){if(t&&e.setAttribute){for(var n,i=h(e),o=t.split(" "),r=0;r<o.length;r++)for(n=o[r].trim();i.indexOf(" "+n+" ")>=0;)i=i.replace(" "+n+" "," ");e.setAttribute("class",i.trim())}}function h(e){var t=(e.getAttribute("class")||"").replace(/[\n\t]/g,"");return" "+t+" "}function v(e){return e.replace(g,function(e,t,n,i){return i?n.toUpperCase():n}).replace(E,"Moz$1")}function b(e,t,n){var i;return i=n.getPropertyValue(t),""!==i||e.ownerDocument||(i=e.style[v(t)]),i}var y,g=/([\:\-\_]+(.))/g,E=/^moz([A-Z])/;y={multiple:!0,selected:!0,checked:!0,disabled:!0,readonly:!0,required:!0,open:!0},t.exports={addClass:i,css:o,hasClass:r,off:a,offset:f,on:s,one:c,ready:p,removeClass:m,type:l,scrollLeft:u,scrollTop:d}},{}],5:[function(e,t,n){"use strict";function i(){var e=window;if(v.debug&&"undefined"!=typeof e.console)try{e.console.log.apply(e.console,arguments)}catch(t){var n=Array.prototype.slice.call(arguments);e.console.log(n.join("\n"))}}function o(e){var t,n=document;t=n.head||n.getElementsByTagName("head")[0]||n.documentElement;var i=n.createElement("style");return i.type="text/css",i.styleSheet?i.styleSheet.cssText=e:i.appendChild(n.createTextNode(e)),t.insertBefore(i,t.firstChild),i}function r(e,t){if(!t)throw new Error("MUI: "+e);"undefined"!=typeof console&&console.error("MUI Warning: "+e)}function l(e){if(y.push(e),void 0===y._initialized){var t=document;b.on(t,"animationstart",s),b.on(t,"mozAnimationStart",s),b.on(t,"webkitAnimationStart",s),y._initialized=!0}}function s(e){if("mui-node-inserted"===e.animationName)for(var t=e.target,n=y.length-1;n>=0;n--)y[n](t)}function a(e){var t="";for(var n in e)t+=e[n]?n+" ":"";return t.trim()}function c(){if(void 0!==h)return h;var e=document.createElement("x");return e.style.cssText="pointer-events:auto",h="auto"===e.style.pointerEvents}function u(e,t){return function(){e[t].apply(e,arguments)}}function d(e,t,n,i,o){var r,l=document.createEvent("HTMLEvents"),n=void 0!==n?n:!0,i=void 0!==i?i:!0;if(l.initEvent(t,n,i),o)for(r in o)l[r]=o[r];return e&&e.dispatchEvent(l),l}function f(){if(g+=1,1===g){var e=window,t=document;m={left:b.scrollLeft(e),top:b.scrollTop(e)},b.addClass(t.body,E),e.scrollTo(m.left,m.top)}}function p(){if(0!==g&&(g-=1,0===g)){var e=window,t=document;b.removeClass(t.body,E),e.scrollTo(m.left,m.top)}}var m,h,v=e("../config"),b=e("./jqLite"),y=[],g=0,E="mui-body--scroll-lock";t.exports={callback:u,classNames:a,disableScrollLock:p,dispatchEvent:d,enableScrollLock:f,log:i,loadStyle:o,onNodeInserted:l,raiseError:r,supportsPointerEvents:c}},{"../config":2,"./jqLite":4}],6:[function(e,t,n){"use strict";function i(e){e._muiDropdown!==!0&&(e._muiDropdown=!0,e.hasAttribute("type")||(e.type="button"),l.on(e,"click",o))}function o(e){if(0===e.button){var t=this;null===t.getAttribute("disabled")&&r(t)}}function r(e){function t(){l.removeClass(o,u),l.off(r,"click",t)}function n(){var n=i.getBoundingClientRect(),s=e.getBoundingClientRect(),a=s.top-n.top+s.height;l.css(o,"top",a+"px"),l.addClass(o,u),setTimeout(function(){l.on(r,"click",t)},0)}var i=e.parentNode,o=e.nextElementSibling,r=i.ownerDocument;return o&&l.hasClass(o,d)?void(l.hasClass(o,u)?t():n()):s.raiseError("Dropdown menu element not found")}var l=e("./lib/jqLite"),s=e("./lib/util"),a="data-mui-toggle",c='[data-mui-toggle="dropdown"]',u="mui--is-open",d="mui-dropdown__menu";t.exports={initListeners:function(){for(var e=document,t=e.querySelectorAll(c),n=t.length-1;n>=0;n--)i(t[n]);s.onNodeInserted(function(e){"dropdown"===e.getAttribute(a)&&i(e)})}}},{"./lib/jqLite":4,"./lib/util":5}],7:[function(e,t,n){t.exports=e(4)},{}],8:[function(e,t,n){"use strict";function i(e){var t;if("on"===e){for(var n,i,l,s=arguments.length-1;s>0;s--)n=arguments[s],"object"===p.type(n)&&(i=n),n instanceof Element&&1===n.nodeType&&(l=n);i=i||{},void 0===i.keyboard&&(i.keyboard=!0),void 0===i["static"]&&(i["static"]=!1),t=o(i,l)}else"off"===e?t=r():f.raiseError("Expecting 'on' or 'off'");return t}function o(e,t){var n=document.body,i=document.getElementById(m);if(f.enableScrollLock(),i){for(;i.firstChild;)i.removeChild(i.firstChild);t&&i.appendChild(t)}else i=document.createElement("div"),i.setAttribute("id",m),t&&i.appendChild(t),n.appendChild(i);return h.test(navigator.userAgent)&&p.css(i,"cursor","pointer"),e.keyboard?l():s(),e["static"]?u(i):c(i),i.muiOptions=e,i}function r(){var e,t=document.getElementById(m);if(t){for(;t.firstChild;)t.removeChild(t.firstChild);t.parentNode.removeChild(t),e=t.muiOptions.onclose,u(t)}return f.disableScrollLock(),s(),e&&e(),t}function l(){p.on(document,"keyup",a)}function s(){p.off(document,"keyup",a)}function a(e){27===e.keyCode&&r()}function c(e){p.on(e,"click",d)}function u(e){p.off(e,"click",d)}function d(e){e.target.id===m&&r()}var f=e("./lib/util"),p=e("./lib/jqLite"),m="mui-overlay",h=/(iPad|iPhone|iPod)/g;t.exports=i},{"./lib/jqLite":4,"./lib/util":5}],9:[function(e,t,n){"use strict";function i(e){e._muiRipple!==!0&&(e._muiRipple=!0,"INPUT"!==e.tagName&&(r.on(e,"touchstart",o),r.on(e,"mousedown",o)))}function o(e){if(0===e.button){var t=this;if(t.disabled!==!0&&t.touchFlag!==!0){t.touchFlag=!0,setTimeout(function(){t.touchFlag=!1},100);var n=document.createElement("div");n.className=c;var i,o,l=r.offset(t),s=e.pageX-l.left,u=e.pageY-l.top;i=r.hasClass(t,a)?l.height/2:l.height,o=i/2,r.css(n,{height:i+"px",width:i+"px",top:u-o+"px",left:s-o+"px"}),t.appendChild(n),window.setTimeout(function(){var e=n.parentNode;e&&e.removeChild(n)},2e3)}}}var r=e("./lib/jqLite"),l=e("./lib/util"),s="mui-btn",a="mui-btn--fab",c="mui-ripple-effect";t.exports={initListeners:function(){for(var e=document,t=e.getElementsByClassName(s),n=t.length-1;n>=0;n--)i(t[n]);l.onNodeInserted(function(e){r.hasClass(e,s)&&i(e)})}}},{"./lib/jqLite":4,"./lib/util":5}],10:[function(e,t,n){"use strict";function i(e){e._muiSelect!==!0&&(e._muiSelect=!0,"ontouchstart"in p.documentElement||new o(e))}function o(e){this.selectEl=e,this.wrapperEl=e.parentNode,this.useDefault=!1,l.on(e,"mousedown",s.callback(this,"mousedownHandler")),l.on(e,"focus",s.callback(this,"focusHandler")),l.on(e,"click",s.callback(this,"clickHandler")),this.wrapperEl.tabIndex=-1;var t=s.callback(this,"wrapperFocusHandler");l.on(this.wrapperEl,"focus",t)}function r(e,t){s.enableScrollLock(),this.origIndex=null,this.currentIndex=null,this.selectEl=t,this.menuEl=this._createMenuEl(e,t),this.clickCallbackFn=s.callback(this,"clickHandler"),this.keydownCallbackFn=s.callback(this,"keydownHandler"),this.destroyCallbackFn=s.callback(this,"destroy"),e.appendChild(this.menuEl),l.scrollTop(this.menuEl,this.menuEl._muiScrollTop),setTimeout(function(){"body"!==p.activeElement.nodeName.toLowerCase()&&p.activeElement.blur()},0),l.on(this.menuEl,"click",this.clickCallbackFn),l.on(p,"keydown",this.keydownCallbackFn),l.on(m,"resize",this.destroyCallbackFn);var n=this.destroyCallbackFn;setTimeout(function(){l.on(p,"click",n)},0)}var l=e("./lib/jqLite"),s=e("./lib/util"),a=e("./lib/forms"),c="mui-select",u=".mui-select > select",d="mui-select__menu",f="mui--is-selected",p=document,m=window;o.prototype.mousedownHandler=function(e){0===e.button&&this.useDefault!==!0&&e.preventDefault()},o.prototype.focusHandler=function(e){if(this.useDefault!==!0){var t=this.selectEl,n=this.wrapperEl,i=t.tabIndex,o=s.callback(this,"keydownHandler");l.on(p,"keydown",o),t.tabIndex=-1,l.one(n,"blur",function(){t.tabIndex=i,l.off(p,"keydown",o)}),n.focus()}},o.prototype.keydownHandler=function(e){var t=e.keyCode;(32===t||38===t||40===t)&&(e.preventDefault(),this.selectEl.disabled!==!0&&this.renderMenu())},o.prototype.wrapperFocusHandler=function(){return this.selectEl.disabled?this.wrapperEl.blur():void 0},o.prototype.clickHandler=function(e){0===e.button&&this.renderMenu()},o.prototype.renderMenu=function(){return this.useDefault===!0?this.useDefault=!1:void new r(this.wrapperEl,this.selectEl)},r.prototype._createMenuEl=function(e,t){var n,i,o,r=p.createElement("div"),s=t.children,c=s.length,u=0;for(r.className=d,o=0;c>o;o++)n=s[o],i=p.createElement("div"),i.textContent=n.textContent,i._muiPos=o,n.selected&&(i.setAttribute("class",f),u=o),r.appendChild(i);this.origIndex=u,this.currentIndex=u;var m=a.getMenuPositionalCSS(e,c,u);return l.css(r,m),r._muiScrollTop=m.scrollTop,r},r.prototype.keydownHandler=function(e){var t=e.keyCode;return 9===t?this.destroy():((27===t||40===t||38===t||13===t)&&e.preventDefault(),void(27===t?this.destroy():40===t?this.increment():38===t?this.decrement():13===t&&(this.selectCurrent(),this.destroy())))},r.prototype.clickHandler=function(e){e.stopPropagation();var t=e.target._muiPos;void 0!==t&&(this.currentIndex=t,this.selectCurrent(),this.destroy())},r.prototype.increment=function(){if(this.currentIndex!==this.menuEl.children.length-1){var e=this.menuEl.children;l.removeClass(e[this.currentIndex],f),this.currentIndex+=1,l.addClass(e[this.currentIndex],f)}},r.prototype.decrement=function(){if(0!==this.currentIndex){var e=this.menuEl.children;l.removeClass(e[this.currentIndex],f),this.currentIndex-=1,l.addClass(e[this.currentIndex],f)}},r.prototype.selectCurrent=function(){if(this.currentIndex!==this.origIndex){var e=this.selectEl.children;e[this.origIndex].selected=!1,e[this.currentIndex].selected=!0,s.dispatchEvent(this.selectEl,"change")}},r.prototype.destroy=function(){var e=this.menuEl.parentNode;e&&e.removeChild(this.menuEl),this.selectEl.focus(),s.disableScrollLock(),l.off(this.menuEl,"click",this.clickCallbackFn),l.off(p,"keydown",this.keydownCallbackFn),l.off(p,"click",this.destroyCallbackFn),l.off(m,"resize",this.destroyCallbackFn)},t.exports={initListeners:function(){for(var e=p.querySelectorAll(u),t=e.length-1;t>=0;t--)i(e[t]);s.onNodeInserted(function(e){"SELECT"===e.tagName&&l.hasClass(e.parentNode,c)&&i(e)})}}},{"./lib/forms":3,"./lib/jqLite":4,"./lib/util":5}],11:[function(e,t,n){"use strict";function i(e){e._muiTabs!==!0&&(e._muiTabs=!0,s.on(e,"click",o))}function o(e){if(0===e.button){var t=this;null===t.getAttribute("disabled")&&r(t)}}function r(e){var t,n,i,o,r,c,u,b,y,g=e.parentNode,E=e.getAttribute(d),C=document.getElementById(E);s.hasClass(g,f)||(C||a.raiseError('Tab pane "'+E+'" not found'),n=l(C),i=n.id,y="["+d+'="'+i+'"]',o=document.querySelectorAll(y)[0],t=o.parentNode,r={paneId:E,relatedPaneId:i},c={paneId:i,relatedPaneId:E},u=a.dispatchEvent(o,h,!0,!0,c),b=a.dispatchEvent(e,p,!0,!0,r),setTimeout(function(){u.defaultPrevented||b.defaultPrevented||(t&&s.removeClass(t,f),n&&s.removeClass(n,f),s.addClass(g,f),s.addClass(C,f),a.dispatchEvent(o,v,!0,!1,c),a.dispatchEvent(e,m,!0,!1,r))},0))}function l(e){for(var t,n=e.parentNode.children,i=n.length,o=null;i--&&!o;)t=n[i],t!==e&&s.hasClass(t,f)&&(o=t);return o}var s=e("./lib/jqLite"),a=e("./lib/util"),c="data-mui-toggle",u="["+c+'="tab"]',d="data-mui-controls",f="mui--is-active",p="mui.tabs.showstart",m="mui.tabs.showend",h="mui.tabs.hidestart",v="mui.tabs.hideend";t.exports={initListeners:function(){for(var e=document.querySelectorAll(u),t=e.length-1;t>=0;t--)i(e[t]);a.onNodeInserted(function(e){"tab"===e.getAttribute(c)&&i(e)})},api:{activate:function(e){var t="["+d+"="+e+"]",n=document.querySelectorAll(t);n.length||a.raiseError('Tab control for pane "'+e+'" not found'),r(n[0])}}}},{"./lib/jqLite":4,"./lib/util":5}],12:[function(e,t,n){"use strict";function i(e){e._muiTextfield!==!0&&(e._muiTextfield=!0,e.value.length?r.addClass(e,c):r.addClass(e,a),r.on(e,"input",o),r.on(e,"change",o),r.on(e,"focus",function(){r.addClass(this,u)}))}function o(){var e=this;e.value.length?(r.removeClass(e,a),r.addClass(e,c)):(r.removeClass(e,c),r.addClass(e,a)),r.addClass(e,u)}var r=e("./lib/jqLite"),l=e("./lib/util"),s=".mui-textfield > input, .mui-textfield > textarea",a="mui--is-empty",c="mui--is-not-empty",u="mui--is-dirty",d="mui-textfield--float-label";t.exports={initialize:i,initListeners:function(){for(var e=document,t=e.querySelectorAll(s),n=t.length-1;n>=0;n--)i(t[n]);l.onNodeInserted(function(e){("INPUT"===e.tagName||"TEXTAREA"===e.tagName)&&i(e)}),setTimeout(function(){var e=".mui-textfield.mui-textfield--float-label > label {"+["-webkit-transition","-moz-transition","-o-transition","transition",""].join(":all .15s ease-out;")+"}";l.loadStyle(e)},150),l.supportsPointerEvents()===!1&&r.on(document,"click",function(e){var t=e.target;if("LABEL"===t.tagName&&r.hasClass(t.parentNode,d)){var n=t.previousElementSibling;n&&n.focus()}})}}},{"./lib/jqLite":4,"./lib/util":5}]},{},[1]);

/***/ }
/******/ ]);