/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	core = (function(){
	  var Mediator  = __webpack_require__(1),
	      WebWorker = __webpack_require__(4),
	      Utils     = __webpack_require__(5),
	      Dom       = __webpack_require__(7),
	      Draggy    = __webpack_require__(18),
	      
	      Preloader   = __webpack_require__(8),
	      Router      = __webpack_require__(9),
	      Snackbar    = __webpack_require__(11),
	      Templates   = __webpack_require__(12),
	      Reports     = __webpack_require__(13),
	      WebForms    = __webpack_require__(14),
	      PrintForms  = __webpack_require__(15),
	      Bps         = __webpack_require__(16);

	  var Core = function( config ){
	    this.events   = new Mediator();
	    this.worker   = new WebWorker();
	    this.utils    = new Utils();
	    this.dom      = new Dom();
	    this.modules  = {
	      'preloader'   : new Preloader(),
	      'router'      : new Router(),
	      'snackbar'    : new Snackbar(),
	      'templates'   : new Templates(),
	      'reports'     : new Reports(),
	      'web-forms'   : new WebForms(),
	      'print-forms' : new PrintForms(),
	      'bps'         : new Bps(),
	      'drag'        : new Draggy()
	    };
	    this.debug    = true;

	    this.bindEvents();
	  };

	  Core.prototype.bindEvents = function() {
	    __webpack_require__(17);
	  };
	  Core.prototype.loadCustomElements = function(elements){
	    console.log( 'Core :: loadCustomElements', elements );
	  };

	  Core.prototype.start = function(module) {
	    // this.events.publish( "core:start:" + module );
	    // this.events.publish("core:preloader:start")
	  };

	  Core.prototype.destroy = function(module) {
	    this.events.publish( "core:destroy:" + module );
	  };
	  
	  Core.prototype.build = function(module) {
	  };

	  Core.prototype.startAll = function() {
	    console.log('core:startAll');
	    this.events.publish("core:dom:build:application")
	    // setTimeout( core.events.publish("core:preloader:start"), 100 );
	  };
	  Core.prototype.destroyAll = function() {
	    this.events.publish("core:destroy:all");
	  };

	  return new Core();
	})();


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var Channel = __webpack_require__(2);
	var Subscriber = __webpack_require__(3);

	var Mediator = function() {
	  if (!(this instanceof Mediator)) {
	    return new Mediator();
	  }

	  this._channels = new Channel('');
	}
	Mediator.prototype.getChannel = function(namespace, readOnly) {
	  var channel = this._channels,
	      namespaceHierarchy = namespace.split(':'),
	      x = 0,
	      y = namespaceHierarchy.length;

	  if (namespace === '') {
	    return channel;
	  }

	  if (namespaceHierarchy.length > 0) {
	    for(x, y; x < y; x++) {

	      if (!channel.hasChannel(namespaceHierarchy[x])) {
	        if (readOnly) {
	          break;
	        } else {
	          channel.addChannel(namespaceHierarchy[x]);
	        }
	      }

	      channel = channel.returnChannel(namespaceHierarchy[x]);
	    }
	  }

	  return channel;
	}
	Mediator.prototype.subscribe = function(channelName, fn, options, context) {
	  var channel = this.getChannel(channelName || "", false);

	  options = options || {};
	  context = context || {};

	  return channel.addSubscriber(fn, options, context);
	}
	Mediator.prototype.once = function(channelName, fn, options, context) {
	  options = options || {};
	  options.calls = 1;

	  return this.subscribe(channelName, fn, options, context);
	}
	Mediator.prototype.getSubscriber = function(identifier, channelName) {
	  var channel = this.getChannel(channelName || "", true);
	  
	  
	  if (channel.namespace !== channelName) {
	    return null;
	  }

	  return channel.getSubscriber(identifier);
	}
	Mediator.prototype.remove = function(channelName, identifier) {
	  var channel = this.getChannel(channelName || "", true);
	  if (channel.namespace !== channelName) {
	    return false;
	  }

	  channel.removeSubscriber(identifier);
	}
	Mediator.prototype.publish = function(channelName) {
	  var channel = this.getChannel(channelName || "", true);
	  if (channel.namespace !== channelName) {
	    return null;
	  }

	  var args = Array.prototype.slice.call(arguments, 1);

	  args.push(channel);

	  channel.publish(args);
	}
	Mediator.prototype.on = Mediator.prototype.subscribe;
	Mediator.prototype.bind = Mediator.prototype.subscribe;
	Mediator.prototype.emit = Mediator.prototype.publish;
	Mediator.prototype.trigger = Mediator.prototype.publish;
	Mediator.prototype.off = Mediator.prototype.remove;

	Mediator.Channel = Channel;
	Mediator.Subscriber = Subscriber;

	module.exports = Mediator

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var Subscriber = __webpack_require__(3);

	var Channel = function(namespace, parent) {
	  if (!(this instanceof Channel)) {
	    return new Channel(namespace);
	  }

	  this.namespace = namespace || "";
	  this._subscribers = [];
	  this._channels = {};
	  this._parent = parent;
	  this.stopped = false;
	}
	Channel.prototype.addSubscriber = function(fn, options, context) {
	  var subscriber = new Subscriber(fn, options, context);

	  if (options && options.priority !== undefined) {
	    
	    
	    
	    options.priority = options.priority >> 0;

	    if (options.priority < 0) { options.priority = 0; }
	    if (options.priority >= this._subscribers.length) { options.priority = this._subscribers.length-1; }

	    this._subscribers.splice(options.priority, 0, subscriber);
	  }else{
	    this._subscribers.push(subscriber);
	  }

	  subscriber.channel = this;

	  return subscriber;
	}
	Channel.prototype.stopPropagation = function() {
	  this.stopped = true;
	}
	Channel.prototype.getSubscriber = function(identifier) {
	  var x = 0,
	      y = this._subscribers.length;

	  for(x, y; x < y; x++) {
	    if (this._subscribers[x].id === identifier || this._subscribers[x].fn === identifier) {
	      return this._subscribers[x];
	    }
	  }
	}
	Channel.prototype.setPriority = function(identifier, priority) {
	  var oldIndex = 0,
	      x = 0,
	      sub, firstHalf, lastHalf, y;

	  for(x = 0, y = this._subscribers.length; x < y; x++) {
	    if (this._subscribers[x].id === identifier || this._subscribers[x].fn === identifier) {
	      break;
	    }
	    oldIndex ++;
	  }

	  sub = this._subscribers[oldIndex];
	  firstHalf = this._subscribers.slice(0, oldIndex);
	  lastHalf = this._subscribers.slice(oldIndex+1);

	  this._subscribers = firstHalf.concat(lastHalf);
	  this._subscribers.splice(priority, 0, sub);
	}
	Channel.prototype.addChannel = function(channel) {
	  this._channels[channel] = new Channel((this.namespace ? this.namespace + ':' : '') + channel, this);
	}
	Channel.prototype.hasChannel = function(channel) {
	  return this._channels.hasOwnProperty(channel);
	}
	Channel.prototype.returnChannel = function(channel) {
	  return this._channels[channel];
	}
	Channel.prototype.removeSubscriber = function(identifier) {
	  var x = this._subscribers.length - 1;

	  
	  if (!identifier) {
	    this._subscribers = [];
	    return;
	  }

	  
	  for(x; x >= 0; x--) {
	    if (this._subscribers[x].fn === identifier || this._subscribers[x].id === identifier) {
	      this._subscribers[x].channel = null;
	      this._subscribers.splice(x,1);
	    }
	  }
	}
	Channel.prototype.publish = function(data) {
	  var x = 0,
	      y = this._subscribers.length,
	      shouldCall = false,
	      subscriber, l,
	      subsBefore,subsAfter;

	  for(x, y; x < y; x++) {
	    
	    shouldCall = false;
	    subscriber = this._subscribers[x];

	    if (!this.stopped) {
	      subsBefore = this._subscribers.length;
	      if (subscriber.options !== undefined && typeof subscriber.options.predicate === "function") {
	        if (subscriber.options.predicate.apply(subscriber.context, data)) {
	          
	          shouldCall = true;
	        }
	      }else{
	        shouldCall = true;
	      }
	    }

	    
	    if (shouldCall) {
	      if (subscriber.options && subscriber.options.calls !== undefined) {
	        
	        subscriber.options.calls--;
	        
	        if (subscriber.options.calls < 1) {
	          this.removeSubscriber(subscriber.id);
	        }
	      }
	      
	      
	      subscriber.fn.apply(subscriber.context, data);

	      subsAfter = this._subscribers.length;
	      y = subsAfter;
	      if (subsAfter === subsBefore - 1) {
	        x--;
	      }
	    }
	  }

	  if (this._parent) {
	    this._parent.publish(data);
	  }

	  this.stopped = false;
	}

	module.exports = Channel;

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";


	var Subscriber = function(fn, options, context) {
	  if (!(this instanceof Subscriber)) {
	    return new Subscriber(fn, options, context);
	  }

	  this.id = this.guidGenerator();
	  this.fn = fn;
	  this.options = options;
	  this.context = context;
	  this.channel = null;
	}
	Subscriber.prototype.guid = function(options) {
	  return ( ( ( 1 + Math.random() ) * 0x10000)   | 0 ).toString(16).substring(1);
	}
	Subscriber.prototype.guidGenerator = function(options) {
	  var S4 = this.guid;
	  return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
	}
	Subscriber.prototype.update = function(options) {
	  if (options) {
	    this.fn = options.fn || this.fn;
	    this.context = options.context || this.context;
	    this.options = options.options || this.options;
	    if (this.channel && this.options && this.options.priority !== undefined) {
	        this.channel.setPriority(this.id, this.options.priority);
	    }
	  }
	} 

	module.exports = Subscriber

/***/ },
/* 4 */
/***/ function(module, exports) {

	var WebWorker = function(){
	  this.worker = new Worker("assets/js/core/worker/worker.js");
	  this.worker.onmessage = function( e ) {
	    // console.log('FROM WORKER: ', e.data);
	    var data = e.data;
	    for (var key in data) {
	      if (data.hasOwnProperty(key)) {
	        // data[key];
	        switch (key) {
	          case 'template:loaded':
	            var templateName = Object.keys( data[key] )[0],
	                data         = data[key][templateName];
	            
	            core.events.publish("core:template:loaded", {
	              name : templateName,
	              raw  : data
	            });
	            
	            break;
	          case 'reports:loaded':
	            // core.events.publish("core:reports:loaded", {
	            //   raw: JSON.parse( data[key] )
	            // });
	            console.log( 'reports:loaded --> ', data[key] );
	            core.events.publish("core:reports:loaded", data[key] );
	            break;
	          case 'report:loaded':
	            console.log( 'report:loaded --> ');
	            core.events.publish("core:report:loaded", {
	              raw: data[key]
	            });
	            break;
	          case 'criterias:loaded':
	            core.events.publish("core:criterias:loaded", data[key] );
	            break;
	          case 'criteriaKeys:loaded':
	            core.events.publish("core:criteriaKeys:loaded", data[key] );
	            break;
	          case 'print-forms:loaded':
	            core.events.publish("core:print-forms:loaded", data[key] );
	            break;
	          case 'web-forms:loaded':
	            core.events.publish("core:web-forms:loaded", data[key] );
	            break;
	          case 'bps:loaded':
	            core.events.publish("core:bps:loaded", data[key] );
	            break;
	          default:
	            console.log('default');
	            break;
	        }

	      }
	    }
	  };
	  return this.worker;
	}; 
	module.exports = WebWorker;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var Base64 = __webpack_require__(6);

	var Utils = function(){
	  this.element = [];
	};
	Utils.prototype.Base64 = new Base64();

	Utils.prototype.merge = function (from, to) {
	  var result = {};

	  for ( var key in from ) {
	    if ( from.hasOwnProperty(key) ) {
	      if ( !result.hasOwnProperty(key) ) {
	        result[key] = from[key]
	      };
	    }
	  }
	  for (var key in to) {
	    if (to.hasOwnProperty(key)) {
	      if ( !result.hasOwnProperty(key) ) {
	        result[key] = to[key]
	      };
	    }
	  }
	  return result;
	}

	Utils.prototype.request = function( type, url, data, callback ) {
	  var request = new XMLHttpRequest();
	  request.open( type.toUpperCase(), url, true);

	  request.onload = function() {
	    if ( this.status >= 200 && this.status < 400 ) {
	      callback( this.response );
	    } else {
	      callback( new Error( this.response ) );
	    }
	  };

	  request.onerror = function() {
	    callback( new Error( this.response ) );
	  };

	  request.send();
	};
	Utils.prototype.log = function(msg, color) {
	  var color = color || "black";
	  var background = "White";

	  switch (color) {
	      case "success":
	        color      = "Green";
	        background = "LimeGreen";
	        break;
	      case "info":
	        color      = "DodgerBlue";
	        background = "Turquoise";
	        break;
	      case "error":
	        color      = "Red";
	        background = "Black";
	        break;
	      case "start":
	        color      = "OliveDrab";
	        background = "PaleGreen";
	        break;
	      case "warning":
	        color      = "Tomato";
	        background = "Black";
	        break;
	      case "end":
	        color      = "Orchid";
	        background = "MediumVioletRed";
	        break;
	      default:
	        color = color;
	        break;
	    };

	  if ( typeof msg == "object" ) {
	      console.log(msg);
	  } else if ( typeof color == "object" ) {
	      console.log("%c" + msg, "color: PowderBlue;font-weight:bold; background-color: RoyalBlue;");
	      console.log(color);
	  } else {
	      console.log("%c" + msg, "color:" + color + ";font-weight:bold; background-color: " + background + ";");
	  }
	};
	Utils.prototype.get = function( url, data, callback ) {
	  this.request( 'get', url, data, callback );
	};
	Utils.prototype.post = function( url, data, callback ) {
	  this.request( 'post', url, data, callback );
	};
	Utils.prototype.put = function( url, data, callback ) {
	  this.request( 'put', url, data, callback );
	};
	Utils.prototype.delete = function( url, data, callback ) {
	  this.request( 'delete', url, data, callback );
	};

	Utils.prototype.extend = function() {
	  for (var i = 1; i < arguments.length; i++) {
	    for (var key in arguments[i]) {
	      if (arguments[i].hasOwnProperty(key)) {
	        arguments[0][key] = arguments[i][key];
	      }
	    }
	  }
	  return arguments[0];
	}

	Utils.prototype.start = function() {
	  console.log( 'Utils: start' );
	};
	Utils.prototype.stop = function() {
	  console.log( 'Utils: stop' );
	};
	Utils.prototype.destroy = function() {
	  console.log( 'Utils: destroy' );
	  this.element = [];
	};

	 module.exports = Utils;

/***/ },
/* 6 */
/***/ function(module, exports) {

	var Base64 = function(string){
	  this.b64tab = {};

	  this.b64tabPopulate();
	  return this;
	};
	Base64.prototype.b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	Base64.prototype.b64tabPopulate = function() {
	  var bin = this.b64chars;
	  for (var i = 0, l = bin.length; i < l; i++){
	    this.b64tab[bin.charAt(i)] = i
	  };
	  return this;
	};

	Base64.prototype.fromCharCode = String.fromCharCode;

	Base64.prototype.cb_utob = function(c) {
	  if (c.length < 2) {
	      var cc = c.charCodeAt(0);
	      return cc < 0x80 ? c
	          : cc < 0x800 ? (this.fromCharCode(0xc0 | (cc >>> 6))
	                        + this.fromCharCode(0x80 | (cc & 0x3f)))
	          : ( this.fromCharCode(0xe0 | ((cc >>> 12) & 0x0f) )
	            + this.fromCharCode(0x80 | ((cc >>>  6) & 0x3f) )
	            + this.fromCharCode(0x80 | ( cc         & 0x3f)));
	  } else {
	    var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);
	    
	    return (this.fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
	          + this.fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
	          + this.fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
	          + this.fromCharCode(0x80 | ( cc         & 0x3f)));
	  }
	};
	Base64.prototype.re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;

	Base64.prototype.utob = function(u) {
	  return u.replace(this.re_utob, this.cb_utob.bind(this));
	};
	Base64.prototype.cb_encode = function(ccc) {
	    var b64chars = this.b64chars;
	    var padlen = [0, 2, 1][ccc.length % 3],
	    ord = ccc.charCodeAt(0) << 16
	        | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
	        | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
	    chars = [
	        b64chars.charAt( ord >>> 18),
	        b64chars.charAt((ord >>> 12) & 63),
	        padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
	        padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
	    ];
	    return chars.join('');
	};
	Base64.prototype.btoa = function(b) {
	  return b.replace(/[\s\S]{1,3}/g, this.cb_encode.bind(this) )
	};
	Base64.prototype._encode = function (u) {
	  return this.btoa( this.utob(u) );
	};
	Base64.prototype.encodeURI = function(u) {
	  return this.encode(u, true)
	};
	// decoder stuff
	Base64.prototype.re_btou = new RegExp([
	    '[\xC0-\xDF][\x80-\xBF]',
	    '[\xE0-\xEF][\x80-\xBF]{2}',
	    '[\xF0-\xF7][\x80-\xBF]{3}'
	].join('|'), 'g');

	Base64.prototype.cb_btou = function(cccc) {
	    switch(cccc.length) {
	    case 4:
	        var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
	            |    ((0x3f & cccc.charCodeAt(1)) << 12)
	            |    ((0x3f & cccc.charCodeAt(2)) <<  6)
	            |     (0x3f & cccc.charCodeAt(3)),
	        offset = cp - 0x10000;
	        return (this.fromCharCode((offset  >>> 10) + 0xD800)
	                + this.fromCharCode((offset & 0x3FF) + 0xDC00));
	    case 3:
	        return this.fromCharCode(
	            ((0x0f & cccc.charCodeAt(0)) << 12)
	                | ((0x3f & cccc.charCodeAt(1)) << 6)
	                |  (0x3f & cccc.charCodeAt(2))
	        );
	    default:
	        return  this.fromCharCode(
	            ((0x1f & cccc.charCodeAt(0)) << 6)
	                |  (0x3f & cccc.charCodeAt(1))
	        );
	    }
	};
	Base64.prototype.btou = function(b) {
	  return b.replace(this.re_btou, this.cb_btou.bind(this) );
	};
	Base64.prototype.cb_decode = function(cccc) {
	  var len = cccc.length,
	  padlen = len % 4,
	  n = (len > 0   ? this.b64tab[cccc.charAt(0)] << 18 : 0)
	      | (len > 1 ? this.b64tab[cccc.charAt(1)] << 12 : 0)
	      | (len > 2 ? this.b64tab[cccc.charAt(2)] <<  6 : 0)
	      | (len > 3 ? this.b64tab[cccc.charAt(3)]       : 0),
	  chars = [
	      this.fromCharCode( n >>> 16),
	      this.fromCharCode((n >>>  8) & 0xff),
	      this.fromCharCode( n         & 0xff)
	  ];
	  chars.length -= [0, 0, 2, 1][padlen];
	  return chars.join('');
	};
	Base64.prototype.atob = function(a) {
	  return a.replace( /[\s\S]{1,4}/g, this.cb_decode.bind(this) );
	};
	Base64.prototype._decode = function( string ) {
	  return this.btou( this.atob( string ) );
	};
	Base64.prototype.replacer = function(char) {
	  console.log( 'replacer -> char:', char );
	  return char == '-' ? '+' : '/'
	}
	Base64.prototype.decode = function(string){
	  var str = String( string ).replace( /[-_]/g, this.replacer ).replace(/[^A-Za-z0-9\+\/]/g, '');
	  return this._decode( str );
	};
	Base64.prototype.encode = function( string, urisafe) {
	  return !urisafe ? this._encode(String( string )) : this._encode(String( string )).replace( /[+\/]/g, this.replacer ).replace(/=/g, '');
	};

	module.exports = Base64

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';

	/*

	    <div class="mdl-layout mdl-js-layout mdl-layout--fixed-header">
	      <header class="mdl-layout__header core-fixed">
	        <div class="mdl-layout__header-row">

	          <span class="mdl-layout-title">Title</span>
	          <div class="mdl-layout-spacer"></div>

	          <nav class="mdl-navigation mdl-layout--large-screen-only">
	            
	            <a class="mdl-navigation__link" href="#">Link</a>
	            <a class="mdl-navigation__link" href="#">Link</a>
	            <a class="mdl-navigation__link" href="#">Link</a>
	            
	            <button id="menu-lower-right" class="mdl-button mdl-js-button mdl-button--icon">
	              <i class="material-icons">more_vert</i>
	            </button>

	            <ul class="mdl-menu mdl-menu--bottom-right mdl-js-menu mdl-js-ripple-effect" for="menu-lower-right">
	              <li class="mdl-menu__item">Some Action</li>
	              <li class="mdl-menu__item">Another Action</li>
	              <li disabled class="mdl-menu__item">Disabled Action</li>
	              <li class="mdl-menu__item">Yet Another Action</li>
	            </ul>
	          </nav>
	        </div>
	        <!-- <div class="mdl-layout__header-row "></div> -->
	      </header>

	      <div class="mdl-layout__drawer">
	        <span class="mdl-layout-title">Title</span>
	        <nav class="mdl-navigation">
	          <a class="mdl-navigation__link" href="#reports"  >   Отчёты </a>
	          <a class="mdl-navigation__link" href="#bps">         Бизнес-процессы </a>
	          <a class="mdl-navigation__link" href="#web-forms">   Экранные формы </a>
	          <a class="mdl-navigation__link" href="#print-forms"> Печатные формы </a>
	        </nav>
	      </div>

	      <main class="mdl-layout__content core-layout-offset" >
	        <div class="page-content">
	        
	        <div class="mdl-grid">
	          
	          <!-- боковая панель c выбором типа документов -->
	          <div class="mdl-cell mdl-cell--2-col">
	            <ul class="panel menu-list mdl-list mdl-cell--hide-phone mdl-shadow--0dp">
	              <li class="menu-item mdl-list__item mdl-list__item--two-line" action="my">
	                <span class="mdl-list__item-primary-content">
	                  <i class="material-icons mdl-list__item-avatar">folder</i>
	                  <span class="document-name">Мои документы</span>
	                  <span class="mdl-list__item-sub-title">100 документов</span>
	                </span>
	              </li>
	              
	              <li class="menu-item mdl-list__item mdl-list__item--two-line" action="shared">
	                <span class="mdl-list__item-primary-content">
	                  <i class="material-icons mdl-list__item-avatar">folder_shared</i>
	                  <span class="document-name">Общие документы</span>
	                  <span class="mdl-list__item-sub-title">100 документов</span>
	                </span>
	              </li>
	              
	              <li class="menu-item mdl-list__item mdl-list__item--one-line" action="templates">
	                <span class="mdl-list__item-primary-content">
	                  <i class="material-icons mdl-list__item-avatar">person</i>
	                  <span class="document-name">Шаблоны</span>
	                  <span class="mdl-list__item-sub-title"></span>
	                </span>
	              </li>
	            </ul>
	          </div>
	          
	          <div class="mdl-cell mdl-cell--8-col" style="height: 5000px;"></div>

	          <!-- боковая панель c критериями -->
	          <div class="mdl-cell mdl-cell--2-col">
	            <ul class="demo-list-control mdl-list">
	              <li class="mdl-list__item">
	                <span class="mdl-list__item-primary-content">
	                  <!-- <i class="material-icons  mdl-list__item-avatar">person</i> -->
	                  Bryan Cranston
	                </span>
	                <span class="mdl-list__item-secondary-action">
	                  <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="list-checkbox-1">
	                    <input type="checkbox" id="list-checkbox-1" class="mdl-checkbox__input" checked />
	                  </label>
	                </span>
	              </li>
	              <li class="mdl-list__item">
	                <span class="mdl-list__item-primary-content">
	                  <!-- <i class="material-icons  mdl-list__item-avatar">person</i> -->
	                  Bob Odenkirk
	                </span>
	                  <span class="mdl-list__item-secondary-action">
	                    <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="list-switch-1">
	                      <input type="checkbox" id="list-switch-1" class="mdl-switch__input" checked />
	                    </label>
	                </span>
	              </li>
	            </ul>
	          </div>
	        </div>

	        </div>
	      </main>
	    </div> 
	*/

	var Dom = function () {
	  this.root         = document;
	  this.application  = {};
	  this.editor       = {};
	  this.snackbar     = {};
	  this.splashscreen = {};

	  this.bindEvents();
	};

	Dom.prototype.bindEvents = function () {
	  var dom = this;

	  document.addEventListener('DOMContentLoaded', function () {
	    
	    core.events.subscribe('core:start:all', function () {
	      console.log('core  > dom > bindEvents > core:start:all');
	      manager.start();
	    }, { priority: 0 });

	    core.events.subscribe('core:dom:updateApplication', function (application) {
	      dom.root.body.appendChild(application);
	    }, { priority: 0 });

	    core.events.subscribe('core:dom:application:clear', function () {
	      dom.leftPanel.innerHTML = '';
	      dom.content.innerHTML   = '';
	      dom.infoPanel.innerHTML = '';
	    });

	    core.events.publish( "core:dom:clear" );

	    core.events.subscribe('core:dom:build:application', function () {
	      console.log('Dom <- core:dom:build:application');
	      dom.build();
	    });

	    core.events.subscribe('core:dom:application:show', function () {
	      console.log( ' Dom <- core:dom:application:show' );
	      // core.dom.application.application.showCards();
	    });

	    core.events.subscribe('core:dom:application:hide', function () {
	      console.log( ' Dom <- core:dom:application:hide' );
	      // core.dom.application.application.hideCards();
	    });

	    core.events.subscribe('core:dom:attach:progressbar', function () {
	      console.log( '* Dom <- core:dom:attach:progressbar' );
	      dom.splashscreen.style.display = 'block';
	    });

	    core.events.subscribe('core:dom:remove:progressbar', function () {
	      console.log( '* Dom <- core:dom:remove:progressbar' );
	      // dom.splashscreen.classList.add('fadeOut');
	      // dom.application.classList.add('fadeIn');
	      
	      setTimeout( function () {
	        dom.splashscreen.style.display = 'none';
	        dom.application.style.display  = 'block';
	        core.events.publish("core:router:update");
	      }, 500);

	    });

	    core.events.subscribe('core:dom:editor:show', function () {
	      console.log( ' Dom <- core:dom:editor:show' );
	      // core.dom.editor.style.zIndex = 1;
	      // core.dom.editor.classList.add('fadeIn');
	      // core.dom.editor.classList.remove('fadeOut');
	      // core.dom.editor.classList.remove('hide');
	    });
	    core.events.subscribe('core:dom:editor:hide', function () {
	      console.log( ' Dom <- core:dom:editor:hide' );
	      // core.dom.editor.style.zIndex = 0;
	      // core.dom.editor.classList.remove('fadeIn');
	      // core.dom.editor.classList.add('fadeOut');
	      // core.dom.editor.classList.add('hide');
	    });

	    core.events.subscribe('core:dom:set:title', function (title) {
	      console.log( ' Dom <- core:dom:set:title' );
	      // core.dom.application.application.setAttribute('caption', title);
	    });

	    core.events.subscribe('core:dom:splashscreen:progress:set', function (percent) {
	      console.log( ' Dom <- core:dom:splashscreen:progress:set', percent );
	      try {
	        dom.progressbar.MaterialProgress.setProgress(percent);
	      } catch(e) {
	        console.log(e);
	      }
	    });


	  }, false);
	};

	Dom.prototype.build = function () {
	  console.log('Dom :: build application');
	  // this.editor = document.querySelector('#editor');

	  // Прелоадер
	  this.createProgressBar();
	  
	  // Инициализация прилодульки
	  this.createApplication();

	  // Главное меню
	  this.createHeader();

	  // Боковое меню
	  this.createDrawer();

	  // Сама приложулька
	  this.createApplicationContent();

	  setTimeout( core.events.publish('core:dom:build:ready') ,1000);
	};



	/* Application */
	Dom.prototype.createApplication = function(argument){
	  this.application  = document.createElement('div');
	  this.application.className = "mdl-layout mdl-js-layout mdl-layout--fixed-header animated";
	  this.application.style.display = 'none'
	};

	Dom.prototype.createApplicationContent = function(argument){
	  // <main class="mdl-layout__content core-layout-offset" >
	  //   <div class="page-content">
	  //     <div class="mdl-grid">
	        
	  //       <!-- боковая панель c выбором типа документов -->
	  //       <div class="mdl-cell mdl-cell--2-col">
	  //         <ul class="panel menu-list mdl-list mdl-cell--hide-phone mdl-shadow--0dp">
	  //           <li class="menu-item mdl-list__item mdl-list__item--two-line" action="my">
	  //             <span class="mdl-list__item-primary-content">
	  //               <i class="material-icons mdl-list__item-avatar">folder</i>
	  //               <span class="document-name">Мои документы</span>
	  //               <span class="mdl-list__item-sub-title">100 документов</span>
	  //             </span>
	  //           </li>
	            
	  //           <li class="menu-item mdl-list__item mdl-list__item--two-line" action="shared">
	  //             <span class="mdl-list__item-primary-content">
	  //               <i class="material-icons mdl-list__item-avatar">folder_shared</i>
	  //               <span class="document-name">Общие документы</span>
	  //               <span class="mdl-list__item-sub-title">100 документов</span>
	  //             </span>
	  //           </li>
	            
	  //           <li class="menu-item mdl-list__item mdl-list__item--one-line" action="templates">
	  //             <span class="mdl-list__item-primary-content">
	  //               <i class="material-icons mdl-list__item-avatar">person</i>
	  //               <span class="document-name">Шаблоны</span>
	  //               <span class="mdl-list__item-sub-title"></span>
	  //             </span>
	  //           </li>
	  //         </ul>
	  //       </div>
	        
	  //       <div class="mdl-cell mdl-cell--8-col" style="height: 5000px;"></div>

	  //       <!-- боковая панель c критериями -->
	  //       <div class="mdl-cell mdl-cell--2-col">
	  //         <ul class="demo-list-control mdl-list">
	  //           <li class="mdl-list__item">
	  //             <span class="mdl-list__item-primary-content">
	  //               <!-- <i class="material-icons  mdl-list__item-avatar">person</i> -->
	  //               Bryan Cranston
	  //             </span>
	  //             <span class="mdl-list__item-secondary-action">
	  //               <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="list-checkbox-1">
	  //                 <input type="checkbox" id="list-checkbox-1" class="mdl-checkbox__input" checked />
	  //               </label>
	  //             </span>
	  //           </li>
	  //           <li class="mdl-list__item">
	  //             <span class="mdl-list__item-primary-content">
	  //               <!-- <i class="material-icons  mdl-list__item-avatar">person</i> -->
	  //               Bob Odenkirk
	  //             </span>
	  //               <span class="mdl-list__item-secondary-action">
	  //                 <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="list-switch-1">
	  //                   <input type="checkbox" id="list-switch-1" class="mdl-switch__input" checked />
	  //                 </label>
	  //             </span>
	  //           </li>
	  //         </ul>
	  //       </div>
	  //     </div>
	  //   </div>
	  // </main>

	  this.main = document.createElement('main');
	  this.main.className = "mdl-layout__content core-layout-offset";
	  this.application.appendChild( this.main );

	  var content = document.createElement('div');
	  content.className = "page-content";
	  this.main.appendChild( content );

	  this.grid = document.createElement('div');
	  this.grid.className = "mdl-grid";
	  content.appendChild( this.grid );

	  this.leftPanel = document.createElement('div');
	  this.leftPanel.className = "mdl-cell mdl-cell--2-col page-content-panel-animation content-leftPanel";
	  this.grid.appendChild( this.leftPanel );

	  this.content = document.createElement('div');
	  this.content.className = "mdl-cell mdl-cell--8-col page-content-panel-animation content-content";
	  this.grid.appendChild( this.content );

	  this.infoPanel = document.createElement('div');
	  this.infoPanel.className = "mdl-cell mdl-cell--2-col page-content-panel-animation content-infoPanel";
	  this.grid.appendChild( this.infoPanel );

	  document.body.appendChild( this.application );
	};

	/* ProgressBar */
	Dom.prototype.createProgressBar = function(argument){
	  this.splashscreen = document.createElement('div');
	  this.splashscreen.classList.add("mdl-grid");
	  this.splashscreen.classList.add("animated");
	  this.splashscreen.classList.add("core-splashscreen-fixed");

	  this.logo = document.createElement('div');
	  this.logo.classList.add("mdl-typography--text-center");
	  this.logo.classList.add("mdl-cell");
	  this.logo.classList.add("mdl-cell--12-col");
	  this.logo.classList.add("mdl-cell--bottom");
	  this.logo.innerHTML = '<i class="material-icons">work</i>';
	  
	  this.progressbar = document.createElement('div');
	  this.progressbar.classList.add("mdl-cell");
	  this.progressbar.classList.add("mdl-cell--12-col-phone");
	  this.progressbar.classList.add("mdl-cell--6-col-desktop");
	  this.progressbar.classList.add("mdl-cell--3-offset-desktop");
	  this.progressbar.classList.add("mdl-progress");
	  this.progressbar.classList.add("mdl-js-progress");
	  
	  this.splashscreen.appendChild( this.logo );
	  this.splashscreen.appendChild( this.progressbar );
	  this.splashscreen.style.display = 'none';
	  document.body.appendChild( this.splashscreen );
	};


	/* MainMenu */
	Dom.prototype.createHeader = function(argument){
	  // <header class="mdl-layout__header core-fixed">
	  //   <div class="mdl-layout__header-row">

	  //     <span class="mdl-layout-title">Title</span>
	  //     <div class="mdl-layout-spacer"></div>

	  //     <nav class="mdl-navigation mdl-layout--large-screen-only">

	  //       <a class="mdl-navigation__link" href="#">Link</a>
	  //       <a class="mdl-navigation__link" href="#">Link</a>
	  //       <a class="mdl-navigation__link" href="#">Link</a>

	  //    // <button id="menu-lower-right" class="mdl-button mdl-js-button mdl-button--icon">
	  //    //   <i class="material-icons">more_vert</i>
	  //    // </button>
	  //    // <ul class="mdl-menu mdl-menu--bottom-right mdl-js-menu mdl-js-ripple-effect" for="menu-lower-right">
	  //    //   <li class="mdl-menu__item">Some Action</li>
	  //    //   <li class="mdl-menu__item">Another Action</li>
	  //    //   <li disabled class="mdl-menu__item">Disabled Action</li>
	  //    //   <li class="mdl-menu__item">Yet Another Action</li>
	  //    // </ul>
	  //     </nav>
	  //   </div>
	  //   <!-- <div class="mdl-layout__header-row "></div> -->
	  // </header>

	  this.header = document.createElement('header');
	  this.header.className = "mdl-layout__header core-fixed";
	  this.application.appendChild( this.header );

	  var header = document.createElement('div');
	  header.className = "mdl-layout__header-row";
	  this.header.appendChild( header );

	  this.title = document.createElement('span');
	  this.title.className = "mdl-layout-title";
	  header.appendChild( this.title );
	  this.setTitle( 'App title' );

	  var spacer = document.createElement('div');
	  spacer.className = "mdl-layout-spacer";
	  header.appendChild( spacer );

	  this.navigation = document.createElement('nav');
	  this.navigation.className = "mdl-navigation mdl-layout--large-screen-only";
	  header.appendChild( this.navigation );

	  this.addToMainMenuNavigation( 'test', 'link_test' );
	  this.addToMainMenuNavigation( 'test_callback', 'test_callback', function(e){ 
	    e.preventDefault();
	    // console.log('test_callback',e, this);
	    this.toggleInfoPanel();
	  });
	};

	// <main class="mdl-layout__content">
	//   <div class="page-content"><!-- Your content goes here --></div>
	// </main>

	Dom.prototype.setTitle = function ( title ) {
	  if ( !title ) {
	    throw new Error('setTitle -> can`t set title')
	  }
	  this.title.textContent = title;
	};

	Dom.prototype.addToMainMenuNavigation = function ( href, name, callback ) {
	  if ( !name ) {
	    throw new Error('addToDrawerNavigation -> can`t create link without name')
	  }

	  if ( !href ) {
	    throw new Error('addToDrawerNavigation -> can`t create link without href')
	  }

	  
	  var item = document.createElement('a');
	  item.className = "mdl-navigation__link";
	  item.textContent = name;
	  item.href = [ '#', href ].join('');
	  item.id   = [ 'navigation', href ].join('_');
	  
	  this.navigation.appendChild( item );
	  
	  if ( typeof callback === 'function' ) {
	    item.addEventListener( 'click', callback.bind(this) );
	  }
	};


	/* DRAWER */
	Dom.prototype.createDrawer = function(argument){
	  // <div class="mdl-layout__drawer">
	  //   <span class="mdl-layout-title">Title</span>
	  //   <nav class="mdl-navigation">
	  //     <a class="mdl-navigation__link" href="#reports"  >   Отчёты </a>
	  //     <a class="mdl-navigation__link" href="#bps">         Бизнес-процессы </a>
	  //     <a class="mdl-navigation__link" href="#web-forms">   Экранные формы </a>
	  //     <a class="mdl-navigation__link" href="#print-forms"> Печатные формы </a>
	  //   </nav>
	  // </div>
	  // 
	  var drawer = document.createElement('div');
	  drawer.className = "mdl-layout__drawer";
	  this.application.appendChild( drawer );

	  this.drawerTitle = document.createElement('span');
	  this.drawerTitle.className = "mdl-layout-title";
	  drawer.appendChild( this.drawerTitle );
	  this.setDrawerTitle('App title');

	  this.drawerNavigation = document.createElement('nav');
	  this.drawerNavigation.className = "mdl-navigation";
	  drawer.appendChild( this.drawerNavigation );
	  this.addToDrawerNavigation( 'reports'     , 'Отчёты' );
	  this.addToDrawerNavigation( 'bps'         , 'Бизнес-процессы' );
	  this.addToDrawerNavigation( 'web-forms'   , 'Экранные формы' );
	  this.addToDrawerNavigation( 'print-forms' , 'Печатные формы' );
	};

	Dom.prototype.setDrawerTitle = function ( title ) {
	  if ( !title ) {
	    throw new Error('setDrawerTitle -> can`t set title')
	  }
	  this.drawerTitle.textContent = title;
	};

	Dom.prototype.addToDrawerNavigation = function ( href, name ) {
	  if ( !name ) {
	    throw new Error('addToDrawerNavigation -> can`t create link without name')
	  }

	  if ( !href ) {
	    throw new Error('addToDrawerNavigation -> can`t create link without href')
	  }
	  
	  var item = document.createElement('a');
	  item.className = "mdl-navigation__link";
	  item.textContent = name;
	  item.href = [ '#', href ].join('');
	  item.id   = [ 'drawer', href ].join('_');
	  
	  this.drawerNavigation.appendChild( item );

	  item.addEventListener( 'click', function(e) {
	     core.dom.application.MaterialLayout.toggleDrawer();
	  } )
	  // core.dom.application.MaterialLayout.toggleDrawer()
	};

	/* INFO PANEL */
	Dom.prototype.toggleInfoPanel = function(){
	  console.log('DOM: toggleInfoPanel');
	  this.infoPanel.style.backgroundColor = '#' + Math.floor( Math.random()*16777215 ).toString(16);
	  this.content.style.backgroundColor   = '#' + Math.floor( Math.random()*16777215 ).toString(16);

	  this.content.classList.toggle('mdl-cell--10-col');
	  this.infoPanel.classList.toggle('zero-width');
	  // this.infoPanel.style.width = Math.floor( Math.random()*100 ) + 'px';
	};



	Dom.prototype.start = function () {
	  console.log('Dom: start');
	};

	Dom.prototype.stop = function () {
	  console.log('Dom: stop');
	};

	Dom.prototype.destroy = function () {
	  console.log('Dom: destroy');
	};

	module.exports = Dom;


/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';

	var Preloader = function(){
	  this.tasks  = {
	    start  : [ 'router', 'snackbar'/*'reports' ,'templates' */ ],
	    load   : [ 'reports', 'criterias', 'criteriaKeys', 'bps', 'web-forms', 'print-forms' ],
	  };
	  this.total   = 0;
	  this.loaded  = 0;
	  this.percent = 0;
	  this.element = {};
	  this.bindEvents();
	};
	Preloader.prototype.bindEvents = function() {
	  var preloader = this;

	  document.addEventListener('DOMContentLoaded', function(){
	    core.events.subscribe( "core:preloader:start", function () {
	      console.log( "Preloader <-core:preloader:start" );
	      preloader.start();
	    });

	    core.events.subscribe( "core:preloader:task:ready", function () {
	      preloader.loaded++;
	      console.log("* Preloader <- core:preloader:ready | " + `${parseInt( preloader.loaded, 10 )} ${parseInt( preloader.total, 10 )}` +  ` | ${parseInt( preloader.loaded, 10 ) === parseInt( preloader.total, 10 )}` +"\n\n");
	      
	      preloader.percent = Math.round( (preloader.loaded/preloader.total*100) / 5) * 5;
	      core.events.publish( "core:dom:splashscreen:progress:set", preloader.percent);

	      if ( parseInt( preloader.loaded, 10 ) === parseInt( preloader.total, 10 ) ) {
	        core.events.publish("core:preloader:finish");
	      }
	    });
	  });
	};

	Preloader.prototype.start = function() {
	  console.log( 'Preloader: start' );

	  for (var type in this.tasks) {
	    this.total += this.tasks[type].length;
	  }

	  for (var type in this.tasks) {
	    var tasks = this.tasks[type];
	    for (var i = tasks.length - 1; i >= 0; i--) {
	      var task = ['core', tasks[i], type].join(':');
	      console.log( 'Preloader ->', task );
	      core.events.publish( task );
	    }
	  }
	};
	Preloader.prototype.stop = function() {
	  console.log( 'Preloader: stop' );
	};
	Preloader.prototype.finish = function() {
	  console.log( 'Preloader: finish' );
	  // core.events.publish('core:progressbar:start');
	};
	Preloader.prototype.destroy = function() {
	  console.log( 'Preloader: destroy' );
	};

	module.exports = Preloader;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Route = __webpack_require__(10);

	function Router() {
	  this.pathRoot = '';
	  this.routes = [];
	  this.type = 'hash';
	  this.path = null;
	  this.hash = null;
	  this.context = this;
	  this.handler = window;

	  var namedParam = '([\\w-]+)';
	  this.namedParam = {
	    match: new RegExp('{(' + namedParam + ')}', 'g'),
	    replace: namedParam
	  };
	  this.bindEvents();
	};

	Router.prototype.Route = Route;
	Router.prototype.add =  function(route, callback) {
	  this.routes.push(new this.Route(route, callback, this));
	  return this;
	};
	Router.prototype.empty =  function() {
	  this.routes = [];
	  return this;
	};
	Router.prototype.setType =  function(type) {
	  this.type = type;
	  return this;
	};
	Router.prototype.setPathRoot =  function(url) {
	  this.pathRoot = url;
	  return this;
	};
	Router.prototype.setPath =  function(path) {
	  this.path = path;
	  return this;
	};
	Router.prototype.setHash =  function(hash) {
	  this.hash = hash;
	  return this;
	};
	Router.prototype.setContext =  function(context) {
	  this.context = context;
	  return this;
	};
	Router.prototype.setHandler =  function(handler) {
	  this.handler = handler;
	  return this;
	};
	Router.prototype.getUrl =  function(routeType) {

	  var url;
	  routeType = routeType || this.type;

	  if (routeType == 'path') {
	    var rootRegex = new RegExp('^' + this.pathRoot + '/?');
	    url = this.path || window.location.pathname.substring(1);
	    url = url.replace(rootRegex, '');
	  } else if (routeType == 'hash') {
	    url = this.hash || window.location.hash.substring(1);
	  }

	  return decodeURI(url);
	};
	Router.prototype.match =  function(path, callback) {
	  var route = new this.Route(path, callback, this);
	  if (route.test(this.getUrl())) {
	    return route.run();
	  }
	};
	Router.prototype.run =  function() {
	  var url   = this.getUrl(),
	      route = {};

	  for (var i in this.routes) {
	    route = this.routes[i];

	    if (route.test(url)) {
	      route.run();
	      return route;
	    }
	  }

	  if ( this.check() === false ) {
	    location.hash = '#reports';
	  }
	};

	Router.prototype.check =  function() {
	  var url   = this.getUrl(),
	      match = false;

	  for (var i in this.routes) {
	    var route = this.routes[i];
	    if (route.test(url)) {
	      match = true;
	    }
	  }
	  // console.log('router -> checkDefault', match);
	  return match === true ? route : false;
	};

	Router.prototype.update = function(options) {
	  options = options || {};

	  if ( options.type ){
	    this.setType(options.type)
	  }
	  if ( options.path ){
	    this.setPath(options.path)
	  }
	  if ( options.pathRoot ){
	    this.setPathRoot(options.pathRoot)
	  }
	  if ( options.hash ){
	    this.setHash(options.hash)
	  }
	  if ( options.context ){
	    this.setContext(options.context)
	  }
	  if ( options.handler ){
	    this.setHandler(options.handler)
	  }
	  if ( options.routes ){
	    var route;
	    for (route in options.routes) {
	      this.add(route, options.routes[route]);
	    }
	  }
	};

	Router.prototype.hashChange = function(){
	   window.addEventListener('hashchange', this.run.bind(this) );
	};

	Router.prototype.start = function() {
	  this.update({
	    pathRoot : '',
	    routes   : {

	      // отчёты - начальная страница
	      'reports' : function(params) {
	        console.log('[reports]: ', params);
	        core.events.publish( "core:reports:render" );
	      },
	      // отчёты - шаблоны
	      'reports/templates' : function(params) {
	        console.log('[reports/templates/]: ', params);
	      },
	      // отчёты - общие документы провайдера
	      'reports/shared' : function(params) {
	        console.log('[reports/shared/]: ', params);
	      },
	      // отчёты - мои документы
	      'reports/my' : function(params) {
	        console.log('[reports/my/]: ', params);
	      },
	      'reports/{id}' : function(params) {
	        console.log('[reports/{id}]: ', params);
	        core.events.publish( "core:report:load", params.id );
	        // core.events.publish( "core:dom:application:hide" );
	        // core.events.publish( "core:dom:editor:show" );
	      },
	      
	      'bps' : function(params) {
	        console.log('[bps]: ', params);
	        core.events.publish( "bps:reports:render" );
	      },
	      'bps/{id}' : function(params) {
	        console.log('[bps/{id}]: ', params);
	      },
	      
	      'print-forms' : function(params) {
	        console.log('[print-forms]: ', params);
	      },
	      'print-forms/{id}' : function(params) {
	        console.log('[print-forms/{id}]: ', params);
	      },
	      
	      'web-forms' : function(params) {
	        core.events.publish( "core:web-forms:render" );
	      },
	      'web-forms/new' : function(params) {
	        console.log('[web-forms/new]: ', params);
	      },
	      'web-forms/{id}' : function(params) {
	        console.log('[web-forms/{id}]: ', params);
	      },
	    }
	  });
	  this.run();
	};
	Router.prototype.stop = function() {
	  // console.log( 'Router: stop' );
	};
	Router.prototype.destroy = function() {
	  // console.log( 'Router: destroy' );
	};
	Router.prototype.bindEvents = function() {
	  var router = this;
	  document.addEventListener('DOMContentLoaded', function(){
	    
	    core.events.subscribe( 'core:router:reports:show', function (doc) {
	      console.log( 'Router <- core:router:reports:show', doc );
	      core.events.publish( "core:dom:set:title", doc.name );
	      // location.hash = `#reports/${doc.id}`;
	      location.hash = '#reports/'+doc.id;
	    });

	    core.events.subscribe("core:router:default", function(){
	      console.log('Router <- core:router:default');
	      location.hash = '#reports';
	    });

	    core.events.subscribe("core:router:go", function( url ){
	      console.log('Router <- core:router:go', url);
	      location.hash = [ core.dom.application.application.getAttribute('type'), url ].join('/');
	    });

	    core.events.subscribe("core:router:check", function(route){
	      console.log('Router <- core:router:check', route);
	      location.hash = '#' + route;
	    });

	    core.events.subscribe("core:router:start", function(){
	      console.log('Router <- core:router:start');
	      core.events.publish( "core:preloader:task:ready" );
	      router.hashChange();
	    });

	    core.events.subscribe("core:router:update", function(){
	      console.log('Router <- core:router:update');
	      router.start();
	    });
	  });
	};

	module.exports = Router

/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";

	function Route(path, callback, router) {
	  this.path     = path;
	  this.callback = callback;
	  this.router   = router;
	  this.values   = [];
	};
	Route.prototype.regex =  function() {

	  var path = this.path;

	  if (typeof path === 'string') {
	    return new RegExp('^' + path.replace(/\//g, '\\/').replace(this.router.namedParam.match, this.router.namedParam.replace) + '$');
	  }
	  return path;
	};
	Route.prototype.params =  function() {

	  var obj = {},
	    name, values = this.values,
	    params = values,
	    i, t = 0,
	    path = this.path;

	  if (typeof path === 'string') {
	    t = 1;
	    params = path.match(this.router.namedParam.match);
	  }

	  for (i in params) {
	    name = t ? params[i].replace(this.router.namedParam.match, '$1') : i;
	    obj[name] = values[i];
	  }

	  return obj;
	};
	Route.prototype.test =  function(url) {
	  // console.log('Route:test -> url: ', url, this.regex(), url.match(this.regex()) );
	  
	  var matches;
	  if ( matches = url.match(this.regex()) ) {
	    this.values = matches.slice(1);
	    return true;
	  }
	  return false;
	};
	Route.prototype.run =  function() {
	  if (typeof this.callback === 'string') {
	    return this.router.handler[this.callback](this.params());
	  }
	  return this.callback.apply(this.router.context, [this.params()]);
	};
	module.exports = Route

/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";

	var Snackbar = function() {

	  this.element       = {};
	  this.textElement   = {};
	  this.actionElement = {};

	  this.active        = false;
	  this.actionHandler = undefined;
	  this.message       = undefined;
	  this.actionText    = undefined;
	  this.queuedNotifications = [];
	  this.setActionHidden(true);
	  this.bindEvents();
	};
	Snackbar.prototype.Constant = {
	  ANIMATION_LENGTH: 500
	};
	Snackbar.prototype.cssClasses = {
	  SNACKBAR: 'mdl-snackbar',
	  MESSAGE:  'mdl-snackbar__text',
	  ACTION:   'mdl-snackbar__action',
	  ACTIVE:   'mdl-snackbar--active'
	};
	Snackbar.prototype.displaySnackbar = function() {
	  this.element.setAttribute('aria-hidden', 'true');

	  if (this.actionHandler) {
	    this.actionElement.textContent = this.actionText;
	    this.actionElement.addEventListener('click', this.actionHandler);
	    this.setActionHidden(false);
	  }

	  this.textElement.textContent = this.message;
	  this.element.classList.add(this.cssClasses.ACTIVE);
	  this.element.setAttribute('aria-hidden', 'false');
	  setTimeout(this.cleanup.bind(this), this.timeout);
	};
	Snackbar.prototype.showSnackbar = function(data) {
	  if (data === undefined) {
	    console.error('Please provide a data object with at least a message to display.');
	    return false;
	  }

	  if (data.message === undefined) {
	    console.error('Please provide a message to be displayed.');
	    return false;
	  }

	  if (data.actionHandler && !data.actionText) {
	    console.error('Please provide action text with the handler.');
	    return false;
	  }

	  if (this.active) {
	    this.queuedNotifications.push(data);
	  } else {
	    this.active = true;
	    this.message = data.message;
	    if (data.timeout) {
	      this.timeout = data.timeout;
	    } else {
	      this.timeout = 2750;
	    }
	    if (data.actionHandler) {
	      this.actionHandler = data.actionHandler;
	    }
	    if (data.actionText) {
	      this.actionText = data.actionText;
	    }
	    this.displaySnackbar();
	  }
	};
	Snackbar.prototype.checkQueue = function() {
	  if ( this.queuedNotifications.length > 0) {
	    this.showSnackbar(this.queuedNotifications.shift());
	  }
	};
	Snackbar.prototype.cleanup = function() {
	  this.element.classList.remove(this.cssClasses.ACTIVE);
	  setTimeout(function() {
	    this.element.setAttribute('aria-hidden', 'true');
	    this.textElement.textContent = '';
	    if (!this.actionElement.getAttribute('aria-hidden')) {
	      this.setActionHidden(true);
	      this.actionElement.textContent = '';
	      this.actionElement.removeEventListener('click', this.actionHandler);
	    }
	    this.actionHandler = undefined;
	    this.message = undefined;
	    this.actionText = undefined;
	    this.active = false;
	    this.checkQueue();
	  }.bind(this), (this.Constant.ANIMATION_LENGTH));
	};
	Snackbar.prototype.setActionHidden = function(value) {
	  if ( Object.keys(this.actionElement).length ) {
	    value ? this.actionElement.setAttribute('aria-hidden', 'true') : this.actionElement.removeAttribute('aria-hidden');
	  }
	};

	Snackbar.prototype.start = function() {
	  console.log( 'Snackbar: start' );
	  
	  // <div id="mdl-snackbar" class="mdl-snackbar">
	  //   <div class="mdl-snackbar__text"></div>
	  //   <button class="mdl-snackbar__action" type="button"></button>
	  // </div>

	  var coreSnackbar = document.createElement("div");
	  coreSnackbar.id = 'mdl-snackbar';
	  coreSnackbar.classList.add('mdl-snackbar');
	  
	  var coreSnackbarText = document.createElement("div");
	  coreSnackbarText.classList.add('mdl-snackbar__text');
	  coreSnackbar.appendChild( coreSnackbarText );

	  var coreSnackbarButton = document.createElement("button");
	  coreSnackbarButton.classList.add('mdl-snackbar__action');
	  coreSnackbar.appendChild( coreSnackbarButton );

	  core.dom.snackbar = coreSnackbar;
	  core.dom.root.body.appendChild( coreSnackbar );
	  // core.dom.application.appendChild( coreSnackbar );
	  
	  this.element       = coreSnackbar;
	  this.textElement   = this.element.querySelector('.' + this.cssClasses.MESSAGE);
	  this.actionElement = this.element.querySelector('.' + this.cssClasses.ACTION);
	};
	Snackbar.prototype.stop = function() {
	  console.log( 'Snackbar: stop' );
	};
	Snackbar.prototype.destroy = function() {
	  console.log( 'Snackbar: destroy' );
	  this.element.remove();
	  delete this.element;
	};

	Snackbar.prototype.bindEvents = function() {
	  var snackbar = this;
	  document.addEventListener('DOMContentLoaded', function(){

	    core.events.subscribe("core:snackbar:start", function(){
	      console.log('Snackbar <- core:snackbar:start');
	      core.events.publish( "core:preloader:task:ready" );
	      snackbar.start();
	    });

	  });
	};



	module.exports = Snackbar;

/***/ },
/* 12 */
/***/ function(module, exports) {

	var Template = function(config){
	  this.name = config.name || '';
	  this.path = config.path || '';
	  this.raw  = config.raw  || '';
	  return this;
	};
	Template.prototype.load = function() {
	  core.events.publish( "core:template:load", this.name );
	  return this;
	};

	var Templates = function(){
	  this.templates = {};
	  this.ready     = false;
	  this.loaded    = 0;
	  this.toLoad    = [ 'reports-show', 'reports-index', 'core-progressbar', 'core-layout' ];

	  this.bindEvents();
	};
	Templates.prototype.Template = Template;

	Templates.prototype.add = function(name) {
	  this.templates[ name ] = new this.Template({ name: name }).load();
	};

	Templates.prototype.init = function() {

	  for (var i = this.toLoad.length - 1; i >= 0; i--) {
	    this.add( this.toLoad[i] );
	  };

	  core.events.publish( "core:templates:load", this.templates );
	};

	Templates.prototype.bindEvents = function() {
	  var templates = this;

	  document.addEventListener('DOMContentLoaded', function(){
	    core.events.subscribe("core:templates:load:success", function ( tmp ){
	      console.log( 'Load:',tmp );
	    });
	    
	    core.events.subscribe("core:templates:load:fails",   function ( e ){
	      throw new Error(e);
	    });

	    core.events.subscribe("core:template:loaded", function (data) {
	      console.log('***', data.name, Object.keys(templates.templates).length, templates.toLoad.length);
	      
	      templates.templates[data.name].raw = data.raw;
	       
	      var dataNameParse = data.name.split('-');

	      var moduleRoot = dataNameParse[0],
	          moduleName = dataNameParse[1];

	      console.log('templates -> bindEvents > core:template:loaded : ', moduleRoot + ":" + moduleName + ":template:ready");
	      
	      core.events.publish( moduleRoot + ":" + moduleName + ":template:ready", templates.templates[data.name] );
	      templates.loaded++;

	      if ( templates.loaded === templates.toLoad.length ) {
	        core.events.publish("core:preloader:ready");
	      }
	       // templates.tempates[ data.name ].raw = data.data;
	    });

	    core.events.publish("");

	    core.events.subscribe("core:progressbar:template", function(){
	      core.events.publish("core:template:progressbar", templates.templates['core-progressbar']);
	    });

	    core.events.subscribe("core:reports:template", function(){
	      core.events.publish("core:template:reports", templates.templates['reports-index']);
	    });

	    core.events.subscribe("core:reports:editor:template", function(){
	      core.events.publish("core:template:reports:editor", templates.templates['reports-show']);
	    });

	    core.events.subscribe("core:template:start", function(){
	      console.log('core:template:start');
	      templates.start();
	    });

	    core.events.subscribe("core:start:all", function(){
	      console.log('core:start:templates');
	      templates.start();
	    });

	    core.events.subscribe("core:templates:start", function(){
	      console.log('Templates <- core:templates:start');
	      core.events.publish( "core:preloader:task:ready" );
	    });
	  });
	};


	Templates.prototype.start = function() {
	  this.init();
	};

	Templates.prototype.stop = function() {
	  // console.log( 'Templates: stop' );
	};

	Templates.prototype.destroy = function() {
	  // console.log( 'Templates: destroy' );
	};

	module.exports = Templates

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";

	var ReportSettings = function(config){
	  this.currentDate = new Date();
	  this.currentYear  = this.currentDate.getFullYear();
	  this.periodStart  = this.currentDate;
	  this.periodEnd    = this.currentDate;
	  this.main         = this.currentDate.getFullYear();
	  this.compare      = this.currentDate.getFullYear()-1;
	  
	  this.isYearReport = config.isYearReport || false;
	  this.isTemplate   = config.isTemplate || false;
	  this.isNew        = config.isNew || true;
	};

	var Report = function(config){
	  this.element     = {};
	  this._id         = config._id         || '';
	  this.name        = config.name        || '';
	  this.description = config.description || '';
	  this.author      = config.author;
	  this.providerId  = config.provider_id;
	  this.query       = {};
	  this.globalQuery = {};
	  this.settings    = new ReportSettings(config.settings);
	};
	Report.prototype.init = function(){

	  this.detachEvents();
	  this.attachEvents();
	  this.destroyEditor();
	  
	  console.log( 'Report -> init' );

	  core.events.publish("core:reports:editor:template");
	  core.events.publish("core:report:load", this._id );
	};
	Report.prototype.update = function(html){
	  console.log( 'Report -> update' );
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};
	Report.prototype.load = function(){
	  console.log( 'Report -> bindEvents' );
	};

	Report.prototype.detachEvents = function(){
	  core.events.remove("core:template:reports:editor");
	  core.events.remove("core:report:loaded");
	};

	// Report.prototype.destroyEditor = function() {
	//   if ($('div#paper').data('froala.editor')) {
	//     $('div#paper').froalaEditor('destroy');
	//   }
	// };
	// Report.prototype.loadEditor = function(body) {
	//   var html = core.utils.Base64.decode(body);

	//   var initialize = new Promise(function(resolve, reject) {
	//     window.jQuery('div#paper').froalaEditor({
	//       toolbarButtons   : ['file-o', 'floppy-o', 'adjust', 'phone',  'textRotate', 'calculator', '|', 'bold', 'italic', 'underline', 'fontSize', '|', 'color', /*'paragraphStyle'*/ , '|', 'paragraphFormat', '|', 'alignLeft', 'alignCenter', 'alignRight', '|', /*'formatOL'*/, 'formatUL', '|', 'outdent', 'indent', '|', 'insertImage', 'insertTable', '|', 'html', '|', 'undo', 'redo', '|', 'cog', 'rotateDocument' , 'customCalculationCell'/*, '|', 'zoom-out', 'zoom-in'*/ ],
	//       language         : 'ru',
	//       charCounterCount : false,
	//       toolbarSticky    : false
	//     });
	//     resolve(true);
	//   });

	//   initialize.then(function(editor) {
	//     $('div#paper').froalaEditor('html.set', (html ? html : '<p>') + '<p>');
	//   }).then(function(editor) {
	//     // var parent = document.querySelector('.fr-wrapper').parentNode;
	//     // parent.removeChild( document.querySelector('.fr-wrapper').nextSibling ) ;
	//     // return editor;
	//   }).catch(function(result) {

	//     console.log("ERROR!", result);
	//   });
	// };
	// Report.prototype.loadEditors = function(body) {
	//   var html = core.utils.Base64.decode(body);
	//   console.log( 'decoded:', html );
	// }


	Report.prototype.attachEvents = function(){
	  var report = this;
	  
	  core.events.subscribe("core:template:reports:editor", function(template){
	    report.update( template.raw );
	  });
	};

	Report.prototype.cardClickHandler = function(e){
	  console.log( 'Report: cardClickHandler', e, this );
	  location.hash = '#reports/' + this._id;
	};

	Report.prototype.editor = function( config ){

	};


	Report.prototype.render = function( config ){

	  this.element = document.createElement('div');
	  this.element.className = 'report-card-full mdl-cell mdl-cell--3-col mdl-cell--12-col-phone mdl-card';

	  var card = document.createElement('div');
	  card.className = 'report-card mdl-card--border mdl-shadow--2dp';
	  this.element.appendChild( card );

	  var cardTitle = document.createElement('div');
	  cardTitle.className = 'mdl-card__title mdl-card--expand';
	  card.appendChild( cardTitle );
	  cardTitle.addEventListener( 'click', this.cardClickHandler.bind(this) );

	  var titleText = document.createElement('div');
	  titleText.className = 'mdl-card__title-text';
	  titleText.textContent = this.name;
	  cardTitle.appendChild( titleText );

	  var subTitleText = document.createElement('div');
	  subTitleText.className = 'mdl-card__subtitle-text';
	  // subTitleText.textContent = this.description;
	  cardTitle.appendChild( subTitleText );




	  var supportingText = document.createElement('div');
	  supportingText.className = 'mdl-card__supporting-text';
	  supportingText.textContent = this.description;
	  card.appendChild( supportingText );

	  var actions = document.createElement('div');
	  actions.className = 'mdl-card__actions mdl-card--border';
	  // actions.textContent = this.description;
	  card.appendChild( actions );

	  var button = document.createElement('a');
	  button.className = 'mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect';
	  button.textContent = 'добавить';
	  actions.appendChild( button );

	  var spacer = document.createElement('div');
	  spacer.className = 'mdl-layout-spacer';
	  actions.appendChild( spacer );

	  var icon = document.createElement('i');
	  icon.className = 'material-icons';
	  icon.textContent = 'stars'
	  actions.appendChild( icon );

	  var supportingTextDate = document.createElement('div');
	  supportingTextDate.className = 'mdl-card__supporting-text mdl-card__supporting-text-date';
	  supportingTextDate.textContent = this.settings.currentDate.toLocaleString();
	  actions.appendChild( supportingTextDate );



	  var cardMenu = document.createElement('div');
	  cardMenu.className = 'mdl-card__menu';
	  card.appendChild( cardMenu );

	  var button = document.createElement('button');
	  button.className = 'mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect';
	  cardMenu.appendChild( button );

	  var icon = document.createElement('i');
	  icon.className = 'material-icons';
	  icon.textContent = 'star'
	  button.appendChild( icon );

	  return this.element;
	};


	var Reports = function(){
	  this.element   = {};
	  this.documents = [];
	  this.current   = {};

	  this.leftPanel = {};
	  this.content   = {};
	  this.infoPanel = {};

	  this.bindEvents();
	};


	Reports.prototype.addItemToLeftPanel = function( config ){
	  // <li class="menu-item mdl-list__item mdl-list__item--two-line" action="my">
	  //   <span class="mdl-list__item-primary-content">
	  //     <i class="material-icons mdl-list__item-avatar">folder</i>
	  //     <span class="document-name">Мои документы</span>
	  //     <span class="mdl-list__item-sub-title">100 документов</span>
	  //   </span>
	  // </li>
	  var item = document.createElement('li');
	  item.className = 'menu-item mdl-list__item';
	  item.setAttribute('action', config.action );

	  var content = document.createElement('span');
	  content.className = 'mdl-list__item-primary-content';

	  if ( config.icon ) {
	    var icon = document.createElement('i');
	    icon.className   = 'material-icons mdl-list__item-avatar';
	    icon.textContent = config.icon;
	    content.appendChild( icon );
	  }

	  if ( config.name ) {
	    var name = document.createElement('span');
	    name.className   = 'document-name';
	    name.textContent = config.name;
	    content.appendChild( name );
	  }

	  if ( config.count ) {
	    var count = document.createElement('span');
	    count.className   = 'mdl-list__item-sub-title';
	    count.textContent = config.count;
	    content.appendChild( count );
	  }

	  if ( config.name && config.count ) {
	    item.classList.add('mdl-list__item--two-line');
	  }

	  item.appendChild( content );
	  this.leftPanel.appendChild( item );
	}
	Reports.prototype.renderLeftPanel = function(){
	  this.leftPanel = document.createElement('ul');
	  this.leftPanel.className = 'panel menu-list mdl-list mdl-cell--hide-phone mdl-shadow--0dp';
	  
	  this.addItemToLeftPanel({
	    action : 'event',
	    name   : 'event',
	    icon   : 'event',
	    count  : '100'
	  });
	  this.addItemToLeftPanel({
	    action : 'code',
	    name   : 'code',
	    icon   : 'code'
	  });
	  this.addItemToLeftPanel({
	    action : 'done',
	    name   : 'done',
	    icon   : 'done',
	    count  : '100'
	  });
	  this.addItemToLeftPanel({
	    action : 'start',
	    name   : 'start',
	    icon   : 'start'
	  });

	  core.dom.leftPanel.appendChild( this.leftPanel );


	  // <ul class="panel menu-list mdl-list mdl-cell--hide-phone mdl-shadow--0dp">
	    
	  //   <li class="menu-item mdl-list__item mdl-list__item--two-line" action="shared">
	  //     <span class="mdl-list__item-primary-content">
	  //       <i class="material-icons mdl-list__item-avatar">folder_shared</i>
	  //       <span class="document-name">Общие документы</span>
	  //       <span class="mdl-list__item-sub-title">100 документов</span>
	  //     </span>
	  //   </li>
	    
	  //   <li class="menu-item mdl-list__item mdl-list__item--one-line" action="templates">
	  //     <span class="mdl-list__item-primary-content">
	  //       <i class="material-icons mdl-list__item-avatar">person</i>
	  //       <span class="document-name">Шаблоны</span>
	  //       <span class="mdl-list__item-sub-title"></span>
	  //     </span>
	  //   </li>
	  // </ul>
	}

	Reports.prototype.addItemToInfoPanel = function( config ){
	  var item = document.createElement('li');
	  item.classList.add('mdl-list__item');
	  
	  if ( config.name ) {
	    var name = document.createElement('span');
	    name.className = "mdl-list__item-primary-content";
	    name.textContent = config.name;
	    item.appendChild(name);

	    if ( config.icon ) {
	      // <i class="material-icons  mdl-list__item-avatar">person</i>
	      var icon = document.createElement('i');
	      icon.className = "material-icons  mdl-list__item-avatar";
	      icon.textContent = config.icon;
	      name.insertAdjacentHTML('afterBegin', icon.outerHTML );
	    }
	    
	  }

	  if ( config.action ) {
	    var action = document.createElement('span');
	    action.className = "mdl-list__item-secondary-action";
	    
	    var id = Math.round( Math.random()*150550 );

	    var label = document.createElement('label');
	    label.className = "mdl-" + config.action + " mdl-js-" + config.action + " mdl-js-ripple-effect";
	    label.setAttribute( 'for', id)

	    var input = document.createElement('input');
	    switch ( config.action ) {
	      case 'switch':
	        input.className = "mdl-switch__input";
	        break;
	      case 'checkbox':
	        input.className = "mdl-checkbox__input";
	        break;
	      default:
	        input.className = "mdl-textfield__input";
	        break;
	    }
	    
	    input.id = id;
	    input.type = config.action;
	    label.appendChild(input);

	    action.appendChild(label);

	    item.appendChild(action);
	  }
	  this.infoPanel.appendChild( item );
	  // <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="list-checkbox-1">
	  // <label class="mdl-radio    mdl-js-radio    mdl-js-ripple-effect" for="list-option-1">
	  // <label class="mdl-switch   mdl-js-switch   mdl-js-ripple-effect" for="list-switch-1">

	  //   <li class="mdl-list__item">
	  //     
	  //     <span class="mdl-list__item-primary-content">
	  //       <i class="material-icons  mdl-list__item-avatar">person</i>
	  //       Bob Odenkirk
	  //     </span>
	  //     
	  //     <span class="mdl-list__item-secondary-action">
	  //       <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="list-switch-1">
	  //         <input type="checkbox" id="list-switch-1" class="mdl-switch__input" checked />
	  //       </label>
	  //     </span>
	  //   </li>
	};
	Reports.prototype.renderInfoPanel = function(){
	  // <ul class="mdl-list">
	  //   <li class="mdl-list__item">
	  //     <span class="mdl-list__item-primary-content">
	  //       <!-- <i class="material-icons  mdl-list__item-avatar">person</i> -->
	  //       Bryan Cranston
	  //     </span>
	  //     <span class="mdl-list__item-secondary-action">
	  //       <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="list-checkbox-1">
	  //         <input type="checkbox" id="list-checkbox-1" class="mdl-checkbox__input" checked />
	  //       </label>
	  //     </span>
	  //   </li>
	  // </ul>
	  this.infoPanel = document.createElement('ul');
	  this.infoPanel.className = 'mdl-list'
	  this.addItemToInfoPanel({
	    action: 'checkbox',
	    name: 'checkbox',
	    icon: 'gif',
	  });
	  this.addItemToInfoPanel({
	    action: 'checkbox',
	    name: 'checkbox'
	  });
	  this.addItemToInfoPanel({
	    action: 'switch',
	    name: 'checkboxx',
	    icon: 'star',
	  });

	  core.dom.infoPanel.appendChild( this.infoPanel );
	}


	Reports.prototype.renderContent = function(){
	  var reports = this;

	  this.content = document.createElement('div');
	  this.content.className = 'mdl-spinner mdl-js-spinner mdl-spinner--single-color is-active';

	  core.dom.content.appendChild( this.content );
	  componentHandler.upgradeElement( this.content );

	  var load = new Promise( function( resolve, reject ){
	     if ( reports.documents.length ) {
	       var df = document.createDocumentFragment();
	       
	       for(var j = 0, length = reports.documents.length; j < length; j++){
	         console.log( reports.documents[j] );
	         var report = reports.documents[j];
	         df.appendChild( report.render() );
	       }

	       resolve( df );
	     } else {
	       reject( false );
	     }
	  });

	  load.then( function( documentFragment ){
	    reports.content.className   = 'mdl-grid documentCards animated';
	    reports.content.textContent = '';
	    reports.content.appendChild( documentFragment );
	  }).catch( function ( error ) {
	    reports.content.className = '';
	    reports.content.innerHTML = 'no elements';
	    throw new Error( 'Reports -> renderContent', error );
	  });
	}

	Reports.prototype.render = function() {
	  core.events.publish( "core:dom:application:clear" );

	  this.renderLeftPanel();
	  this.renderContent();
	  this.renderInfoPanel();

	  componentHandler.upgradeAllRegistered();
	  // core.dom.content
	  // core.dom.infoPanel
	}

	Reports.prototype.Report = Report;
	Reports.prototype.init = function(){
	  core.events.publish( "[ + ] core:reports:init" );

	  this.element = document.createElement('div');
	  this.render();
	};
	Reports.prototype.bindEvents = function(){
	  var reports = this;

	  document.addEventListener('DOMContentLoaded', function(){

	    
	    core.events.subscribe("core:reports:render", function(){
	      reports.render();
	    });

	    core.events.subscribe("core:report:loaded", function(data){
	      
	      var report = JSON.parse( data.raw );
	      report.settings = {
	        isYearReport : report.yearReport,
	        isTemplate   : report.template,
	        isNew        : report.new
	      };

	      console.log( 'core:report:loaded', report );
	      reports.current = new reports.Report( report );

	      core.events.publish("core:events:editor:set:html", core.utils.Base64.decode( report.body ) );

	      // report.loadEditor( data.raw.body );
	    });

	    core.events.subscribe("core:reports:loaded", function(data){
	      for (var i = data.length - 1; i >= 0; i--) {
	        var _d = data[i];
	        var report = {
	          _id         : _d._id,
	          name        : _d.name,
	          description : _d.description,
	          update_at   : _d.updated_at,
	          
	          author : {
	            id   : _d.author_id,
	            name : _d.author_id
	          },

	          providerId  : _d.provider_id,

	          query       : _d.query,
	          globalQuery : _d.globalQuery,

	          settings : {
	            periodStart  : _d.periodStart,
	            periodEnd    : _d.periodEnd,
	            main         : _d.main,
	            compare      : _d.compare,
	            isYearReport : _d.yearReport,
	            isTemplate   : _d.template,
	            providerSelected : _d.providerSelected
	          }
	        };
	        reports.add( report );
	      }
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe("core:reports:start", function( template ){
	      console.log('Reports <- core:reports:start');
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe("core:template:reports", function( template ){
	      
	      reports.updateRootElement( template.raw );
	    });

	    // клик по меню с документами
	    core.events.subscribe("core:reports:menu:select", function( menuItem ){
	      // console.log( 'Reports <- core:reports:menu:select', menuItem );
	      core.events.publish( "core:router:go", menuItem.getAttribute('action') );
	    });

	  });
	};

	Reports.prototype.add = function(  config ) {
	  this.documents.push( new this.Report(config) );
	};
	Reports.prototype.clear = function(config) {
	  this.documents = {};
	};
	Reports.prototype.find = function(id) {
	  for (var type in this.documents) {
	    for (var i = this.documents[type].length - 1; i >= 0; i--) {
	      if( this.documents[type][i]._id === id ){
	        return this.documents[type][i];
	      }
	    }
	  }
	};

	Reports.prototype.start = function() {
	  console.log( 'Reports: start' );
	  this.init();
	};
	Reports.prototype.stop = function() {
	  console.log( 'Reports: stop' );
	};
	Reports.prototype.destroy = function() {
	  console.log( 'Reports: destroy' );
	  this.element = [];
	};

	module.exports = Reports;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var WebFormSettings = function(config){
	  this.current_date = new Date();
	  this.currentYear  = this.current_date.getFullYear();
	  this.periodStart  = this.current_date;
	  this.periodEnd    = this.current_date;
	  this.main         = this.current_date.getFullYear();
	  this.compare      = this.current_date.getFullYear()-1;
	  this.isYearWebForm = config.isYearWebForm || false;
	  this.isTemplate   = config.isTemplate || false;
	  this.isNew        = config.isNew || true;
	};

	var WebForm = function(config){
	  this.element     = {};
	  this._id         = config._id         || '';
	  this.name        = config.name        || '';
	  this.description = config.description || '';
	  this.author      = config.author;
	  this.providerId  = config.provider_id;
	  this.query       = {};
	  this.globalQuery = {};
	  this.settings    = new WebFormSettings(config.settings);
	};
	WebForm.prototype.init = function(){

	  this.detachEvents();
	  this.attachEvents();
	  this.destroyEditor();
	  
	  
	  console.log( 'WebForm -> init' );

	  this.element = document.createElement('div');
	  core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	  core.events.publish("core:web-forms:editor:template");
	  core.events.publish("core:web-form:load", this._id );
	};
	WebForm.prototype.update = function(html){
	  console.log( 'WebForm -> update' );
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};
	WebForm.prototype.load = function(){
	  console.log( 'WebForm -> bindEvents' );
	};
	WebForm.prototype.detachEvents = function(){
	  core.events.remove("core:template:web-forms:editor");
	  core.events.remove("core:web-form:loaded");
	};


	WebForm.prototype.attachEvents = function(){
	  var webForm = this;
	  
	  core.events.subscribe("core:template:web-forms:editor", function(template){
	    webForm.update( template.raw );
	  });
	  
	  core.events.subscribe("core:web-form:loaded", function(data){
	    webForm.loadEditor( data.raw.body );
	  });
	  
	};


	var Elements = __webpack_require__(26);
	var WebForms = function(){
	  this.forms     = {};
	  this.leftPanel = {};
	  this.content   = {};
	  this.infoPanel = {};
	  this.bindEvents();
	};

	WebForms.prototype.WebForm = WebForm;
	WebForms.prototype.Elements = Elements;

	WebForms.prototype.init = function(){
	  core.events.publish( "[ + ] core:web-forms:init" );
	  // core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	};
	WebForms.prototype.bindEvents = function(){
	  var webForms = this;
	  document.addEventListener('DOMContentLoaded', function(){ 
	    core.events.subscribe("core:web-forms:render", function(data){
	      webForms.render();
	    });
	  });
	};
	WebForms.prototype.updateRootElement = function(html){
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};

	var links = document.querySelectorAll('a');
	for(var i = 0, length1 = links.length; i < length1; i++){
	  links[i].addEventListener( 'click', function (e) {
	    e.preventDefault();
	    console.log( this );
	  });
	}


	WebForms.prototype.renderLeftPanel = function() {
	  this.leftPanel = document.createElement('div');

	  var input = this.Elements.create( {
	    elementType : 'input',
	    name : 'test-input',
	    type : 'text',
	    placeholder : 'texttium',
	    label: 'label'
	  } );

	  console.log( 'input', input );
	  this.leftPanel.appendChild( input.element );

	  // this.leftPanel.textContent = 'this.leftPanel';
	  // this.leftPanel.innerHTML = `<div class="demo-list-action mdl-list">
	  //   <div class="drag mdl-list__item">
	  //     <span class="mdl-list__item-primary-content">
	  //       <i class="material-icons mdl-list__item-avatar">person</i>
	  //       <span>Bryan Cranston</span>
	  //     </span>
	  //     <a class="mdl-list__item-secondary-action" href="#"><i class="material-icons">star</i></a>
	  //   </div>
	  //   <div class="drag mdl-list__item">
	  //     <span class="mdl-list__item-primary-content">
	  //       <i class="material-icons mdl-list__item-avatar">person</i>
	  //       <span>Aaron Paul</span>
	  //     </span>
	  //     <a class="mdl-list__item-secondary-action" href="#"><i class="material-icons">star</i></a>
	  //   </div>
	  //   <div class="drag mdl-list__item">
	  //     <span class="mdl-list__item-primary-content">
	  //       <i class="material-icons mdl-list__item-avatar">person</i>
	  //       <span>Bob Odenkirk</span>
	  //     </span>
	  //     <span class="mdl-list__item-secondary-content">
	  //       <a class="mdl-list__item-secondary-action" href="#"><i class="material-icons">star</i></a>
	  //   </span>
	  //   </div>
	  // </div>`;
	  // this.leftPanel.style.height = '800px';
	  core.dom.leftPanel.appendChild( this.leftPanel );
	}
	WebForms.prototype.renderContent = function() {
	  this.content   = document.createElement('div');
	  this.content.textContent  = 'this.content';
	  this.content.style.height = '800px';

	  // var dnds = document.querySelectorAll('.drag');
	  
	  // for(var i = 0, length1 = dnds.length; i < length1; i++){
	  //   core.modules.drag.add( dnds[i], { snapX: 10,  snapY: 10, activeClass: "active-border" } );
	  // }

	  core.dom.content.appendChild( this.content );
	}
	WebForms.prototype.renderInfoPanel = function() {
	  this.infoPanel = document.createElement('div');
	  this.infoPanel.textContent = 'this.infoPanel';
	  core.dom.infoPanel.appendChild( this.infoPanel );
	}

	WebForms.prototype.render = function(){
	  core.events.publish( "core:dom:application:clear" );

	  this.renderLeftPanel();
	  this.renderContent();
	  this.renderInfoPanel();

	  componentHandler.upgradeAllRegistered();
	};

	WebForms.prototype.add = function( type, config ) {

	  if ( !this.documents.hasOwnProperty(type) ) {
	    this.documents[type] = [];
	  }

	  this.documents[type].push( new this.WebForm(config) );
	};
	WebForms.prototype.clear = function(config) {
	  this.documents = {};
	};
	WebForms.prototype.find = function(id) {
	  for (var type in this.documents) {
	    for (var i = this.documents[type].length - 1; i >= 0; i--) {
	      if( this.documents[type][i]._id === id ){
	        return this.documents[type][i];
	      }
	    }
	  }
	};

	WebForms.prototype.show = function(id) {
	  console.log( 'WebForms: show -> ', id);
	  var webForm = this.find(id);
	  if ( web-form ) {
	    webForm.init();
	  } else {
	    throw new Error('template not found!');
	  }
	};

	WebForms.prototype.start = function() {
	  console.log( 'WebForms: start' );
	  this.init();
	};
	WebForms.prototype.stop = function() {
	  console.log( 'WebForms: stop' );
	};
	WebForms.prototype.destroy = function() {
	  console.log( 'WebForms: destroy' );
	  this.element = [];
	};

	module.exports = WebForms;

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";

	var PrintFormSettings = function(config){
	  this.current_date = new Date();
	  this.currentYear  = this.current_date.getFullYear();
	  this.periodStart  = this.current_date;
	  this.periodEnd    = this.current_date;
	  this.main         = this.current_date.getFullYear();
	  this.compare      = this.current_date.getFullYear()-1;
	  this.isYearPrintForm = config.isYearPrintForm || false;
	  this.isTemplate   = config.isTemplate || false;
	  this.isNew        = config.isNew || true;
	};

	var PrintForm = function(config){
	  this.element     = {};
	  this._id         = config._id         || '';
	  this.name        = config.name        || '';
	  this.description = config.description || '';
	  this.author      = config.author;
	  this.providerId  = config.provider_id;
	  this.query       = {};
	  this.globalQuery = {};
	  this.settings    = new PrintFormSettings(config.settings);
	};
	PrintForm.prototype.init = function(){

	  this.detachEvents();
	  this.attachEvents();
	  this.destroyEditor();
	  
	  
	  console.log( 'PrintForm -> init' );

	  this.element = document.createElement('div');
	  core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	  core.events.publish("core:print-forms:editor:template");
	  core.events.publish("core:print-form:load", this._id );
	};
	PrintForm.prototype.update = function(html){
	  console.log( 'PrintForm -> update' );
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};
	PrintForm.prototype.load = function(){
	  console.log( 'PrintForm -> bindEvents' );
	};
	PrintForm.prototype.detachEvents = function(){
	  core.events.remove("core:template:print-forms:editor");
	  core.events.remove("core:print-form:loaded");
	};
	PrintForm.prototype.destroyEditor = function() {
	  if ($('div#paper').data('froala.editor')) {
	    $('div#paper').froalaEditor('destroy');
	  }
	};

	PrintForm.prototype.loadEditor = function(body) {
	  var html = core.utils.Base64.decode(body);

	  var initialize = new Promise(function(resolve, reject) {
	    window.jQuery('div#paper').froalaEditor({
	      toolbarButtons   : ['file-o', 'floppy-o', 'adjust', 'phone',  'textRotate', 'calculator', '|', 'bold', 'italic', 'underline', 'fontSize', '|', 'color', /*'paragraphStyle'*/ , '|', 'paragraphFormat', '|', 'alignLeft', 'alignCenter', 'alignRight', '|', /*'formatOL'*/, 'formatUL', '|', 'outdent', 'indent', '|', 'insertImage', 'insertTable', '|', 'html', '|', 'undo', 'redo', '|', /*'cog', 'rotateDocument' */, 'customCalculationCell'/*, '|', 'zoom-out', 'zoom-in'*/ ],
	      language         : 'ru',
	      charCounterCount : false,
	      toolbarSticky    : false
	    });
	    resolve(true);
	  });

	  initialize.then(function(editor) {
	    $('div#paper').froalaEditor('html.set', (html ? html : '<p>') + '<p>');
	  }).then(function(editor) {
	    // var parent = document.querySelector('.fr-wrapper').parentNode;
	    // parent.removeChild( document.querySelector('.fr-wrapper').nextSibling ) ;
	    // return editor;
	  }).catch(function(result) {

	    console.log("ERROR!", result);
	  });

	};
	PrintForm.prototype.loadEditors = function(body) {
	  var html = core.utils.Base64.decode(body);
	  console.log( 'decoded:', html );
	}


	PrintForm.prototype.attachEvents = function(){
	  var printForm = this;
	  
	  core.events.subscribe("core:template:print-forms:editor", function(template){
	    printForm.update( template.raw );
	  });
	  
	  core.events.subscribe("core:print-form:loaded", function(data){
	    printForm.loadEditor( data.raw.body );
	  });
	  
	};
	PrintForm.prototype.render = function(){
	  console.log( 'PrintForm -> render', this );

	  var helper = {
	    '_id': {
	      text: function (params) {
	        return this._id || '-_id-';
	      }
	    },
	    'name': {
	      text: function (params) {
	        return this.name || '-name-';
	      }
	    },
	    'description': {
	      text: function (params) {
	        return this.description || '-description-';
	      }
	    },
	    'providerId': {
	      text: function (params) {
	        return this.providerId || '-providerId-';
	      }
	    },
	    'query': {
	      text: function (params) {
	        return this.query || '-query-';
	      }
	    },
	    'globalQuery': {
	      text: function (params) {
	        return this.globalQuery || '-globalQuery-';
	      }
	    }
	  };

	  Transparency.render( this.element.querySelector('#print-form'), this, helper );
	};


	var PrintForms = function(){
	  this.element   = {};
	  this.documents = {};
	  this.bindEvents();
	};
	PrintForms.prototype.PrintForm = PrintForm;
	PrintForms.prototype.init = function(){
	  core.events.publish( "[ + ] core:print-forms:init" );

	  this.element = document.createElement('div');
	  // core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	  
	  core.events.publish("core:print-forms:template");
	};
	PrintForms.prototype.bindEvents = function(){
	};
	PrintForms.prototype.updateRootElement = function(html){
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};

	PrintForms.prototype.render = function(){
	  if ( !Object.keys(this.documents).length ){
	    return false;
	  }

	  for (var type in this.documents) {
	    // console.log( 'render -> type, documents', type,this.element.querySelector('.'+type),   this.documents[type] );
	    var helper = {
	      type: {
	        text: function (params) {
	          return this.type;
	        }
	      }
	    };
	    helper[type] = {
	        '_id': {
	          text: function (params) {
	            return this._id || '-id-';
	          }
	        },
	        name: {
	          text: function (params) {
	            return this.name || '-name-';
	          }
	        },
	        link: {
	          href: function (params) {
	            return '#print-forms/' + this._id;
	          }
	        }
	    };

	    var config = {
	      type: type
	    };
	    config[type] = this.documents[type];

	    Transparency.render( this.element.querySelector('.print-form-'+type), config, helper );
	  }
	};

	PrintForms.prototype.add = function( type, config ) {

	  if ( !this.documents.hasOwnProperty(type) ) {
	    this.documents[type] = [];
	  }

	  this.documents[type].push( new this.PrintForm(config) );
	};
	PrintForms.prototype.clear = function(config) {
	  this.documents = {};
	};
	PrintForms.prototype.find = function(id) {
	  for (var type in this.documents) {
	    for (var i = this.documents[type].length - 1; i >= 0; i--) {
	      if( this.documents[type][i]._id === id ){
	        return this.documents[type][i];
	      }
	    }
	  }
	};

	PrintForms.prototype.show = function(id) {
	  console.log( 'PrintForms: show -> ', id);
	  var printForm = this.find(id);
	  if ( print-form ) {
	    printForm.init();
	  } else {
	    throw new Error('template not found!');
	  }
	};

	PrintForms.prototype.start = function() {
	  console.log( 'PrintForms: start' );
	  this.init();
	};
	PrintForms.prototype.stop = function() {
	  console.log( 'PrintForms: stop' );
	};
	PrintForms.prototype.destroy = function() {
	  console.log( 'PrintForms: destroy' );
	  this.element = [];
	};

	module.exports = PrintForms;

/***/ },
/* 16 */
/***/ function(module, exports) {

	"use strict";

	var BusinessFormSettings = function(config){
	  this.current_date = new Date();
	  this.currentYear  = this.current_date.getFullYear();
	  this.periodStart  = this.current_date;
	  this.periodEnd    = this.current_date;
	  this.main         = this.current_date.getFullYear();
	  this.compare      = this.current_date.getFullYear()-1;
	  this.BsYearbusinessForm = config.BsYearbusinessForm || false;
	  this.isTemplate   = config.isTemplate || false;
	  this.isNew        = config.isNew || true;
	};

	var BusinessForm = function(config){
	  this.element     = {};
	  this._id         = config._id         || '';
	  this.name        = config.name        || '';
	  this.description = config.description || '';
	  this.author      = config.author;
	  this.providerId  = config.provider_id;
	  this.query       = {};
	  this.globalQuery = {};
	  this.settings    = new BusinessFormSettings(config.settings);
	};
	BusinessForm.prototype.init = function(){

	  this.detachEvents();
	  this.attachEvents();
	  this.destroyEditor();
	  
	  
	  console.log( 'BusinessForm -> init' );

	  this.element = document.createElement('div');
	  core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	  core.events.publish("core:bps:editor:template");
	  core.events.publish("core:bp:load", this._id );
	};
	BusinessForm.prototype.update = function(html){
	  console.log( 'BusinessForm -> update' );
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};
	BusinessForm.prototype.load = function(){
	  console.log( 'BusinessForm -> bindEvents' );
	};
	BusinessForm.prototype.detachEvents = function(){
	  core.events.remove("core:template:bps:editor");
	  core.events.remove("core:bp:loaded");
	};
	BusinessForm.prototype.destroyEditor = function() {
	  if ($('div#paper').data('froala.editor')) {
	    $('div#paper').froalaEditor('destroy');
	  }
	};

	BusinessForm.prototype.loadEditor = function(body) {
	  var html = core.utils.Base64.decode(body);

	  var initialize = new Promise(function(resolve, reject) {
	    window.jQuery('div#paper').froalaEditor({
	      toolbarButtons   : ['file-o', 'floppy-o', 'adjust', 'phone',  'textRotate', 'calculator', '|', 'bold', 'italic', 'underline', 'fontSize', '|', 'color', /*'paragraphStyle'*/ , '|', 'paragraphFormat', '|', 'alignLeft', 'alignCenter', 'alignRight', '|', /*'formatOL'*/, 'formatUL', '|', 'outdent', 'indent', '|', 'insertImage', 'insertTable', '|', 'html', '|', 'undo', 'redo', '|', /*'cog', 'rotateDocument' */, 'customCalculationCell'/*, '|', 'zoom-out', 'zoom-in'*/ ],
	      language         : 'ru',
	      charCounterCount : false,
	      toolbarSticky    : false
	    });
	    resolve(true);
	  });

	  initialize.then(function(editor) {
	    $('div#paper').froalaEditor('html.set', (html ? html : '<p>') + '<p>');
	  }).then(function(editor) {
	    // var parent = document.querySelector('.fr-wrapper').parentNode;
	    // parent.removeChild( document.querySelector('.fr-wrapper').nextSibling ) ;
	    // return editor;
	  }).catch(function(result) {

	    console.log("ERROR!", result);
	  });

	};
	BusinessForm.prototype.loadEditors = function(body) {
	  var html = core.utils.Base64.decode(body);
	  console.log( 'decoded:', html );
	}


	BusinessForm.prototype.attachEvents = function(){
	  var bp = this;
	  
	  core.events.subscribe("core:template:bps:editor", function(template){
	    bp.update( template.raw );
	  });
	  
	  core.events.subscribe("core:bp:loaded", function(data){
	    bp.loadEditor( data.raw.body );
	  });
	  
	};
	BusinessForm.prototype.render = function(){
	  console.log( 'BusinessForm -> render', this );

	  var helper = {
	    '_id': {
	      text: function (params) {
	        return this._id || '-_id-';
	      }
	    },
	    'name': {
	      text: function (params) {
	        return this.name || '-name-';
	      }
	    },
	    'description': {
	      text: function (params) {
	        return this.description || '-description-';
	      }
	    },
	    'providerId': {
	      text: function (params) {
	        return this.providerId || '-providerId-';
	      }
	    },
	    'query': {
	      text: function (params) {
	        return this.query || '-query-';
	      }
	    },
	    'globalQuery': {
	      text: function (params) {
	        return this.globalQuery || '-globalQuery-';
	      }
	    }
	  };

	  Transparency.render( this.element.querySelector('#bp'), this, helper );
	};


	var BusinessForms = function(){
	  this.element   = {};
	  this.documents = {};
	  this.bindEvents();
	};

	BusinessForms.prototype.addItemToLeftPanel = function( config ){
	  // <li class="menu-item mdl-list__item mdl-list__item--two-line" action="my">
	  //   <span class="mdl-list__item-primary-content">
	  //     <i class="material-icons mdl-list__item-avatar">folder</i>
	  //     <span class="document-name">Мои документы</span>
	  //     <span class="mdl-list__item-sub-title">100 документов</span>
	  //   </span>
	  // </li>
	  // 
	  var item = document.createElement('li');
	  item.className = 'menu-item mdl-list__item';
	  item.setAttribute('action', config.action );

	  var content = document.createElement('span');
	  content.className = 'mdl-list__item-primary-content';

	  if ( config.icon ) {
	    var icon = document.createElement('i');
	    icon.className   = 'material-icons mdl-list__item-avatar';
	    icon.textContent = config.icon;
	    content.appendChild( icon );
	  }

	  if ( config.name ) {
	    var name = document.createElement('span');
	    name.className   = 'document-name';
	    name.textContent = config.name;
	    content.appendChild( name );
	  }

	  if ( config.count ) {
	    var count = document.createElement('span');
	    count.className   = 'mdl-list__item-sub-title';
	    count.textContent = config.count;
	    content.appendChild( count );
	  }

	  if ( config.name && config.count ) {
	    item.classList.add('mdl-list__item--two-line');
	  }

	  item.appendChild( content );
	  this.leftPanel.appendChild( item );
	}

	BusinessForms.prototype.renderLeftPanel = function(){
	  this.leftPanel = document.createElement('ul');
	  this.leftPanel.className = 'panel menu-list mdl-list mdl-cell--hide-phone mdl-shadow--0dp';
	  
	  this.addItemToLeftPanel({
	    action : 'event',
	    name   : 'event_bps',
	    icon   : 'event',
	    count  : '100'
	  });
	  this.addItemToLeftPanel({
	    action : 'code',
	    name   : 'code_bps',
	    icon   : 'code'
	  });
	  this.addItemToLeftPanel({
	    action : 'done',
	    name   : 'done_bps',
	    icon   : 'done',
	    count  : '100'
	  });
	  this.addItemToLeftPanel({
	    action : 'start',
	    name   : 'start_bps',
	    icon   : 'start'
	  });

	  core.dom.leftPanel.appendChild( this.leftPanel );


	  // <ul class="panel menu-list mdl-list mdl-cell--hide-phone mdl-shadow--0dp">
	    
	  //   <li class="menu-item mdl-list__item mdl-list__item--two-line" action="shared">
	  //     <span class="mdl-list__item-primary-content">
	  //       <i class="material-icons mdl-list__item-avatar">folder_shared</i>
	  //       <span class="document-name">Общие документы</span>
	  //       <span class="mdl-list__item-sub-title">100 документов</span>
	  //     </span>
	  //   </li>
	    
	  //   <li class="menu-item mdl-list__item mdl-list__item--one-line" action="templates">
	  //     <span class="mdl-list__item-primary-content">
	  //       <i class="material-icons mdl-list__item-avatar">person</i>
	  //       <span class="document-name">Шаблоны</span>
	  //       <span class="mdl-list__item-sub-title"></span>
	  //     </span>
	  //   </li>
	  // </ul>
	}

	BusinessForms.prototype.render = function() {
	  core.events.publish( "core:dom:application:clear" );
	  this.renderLeftPanel();
	  // this.buildContent();
	  // this.buildInfoPanel();
	  // core.dom.content
	  // core.dom.infoPanel
	}


	BusinessForms.prototype.BusinessForm = BusinessForm;
	BusinessForms.prototype.init = function(){
	  core.events.publish( "[ + ] core:bps:init" );

	  this.element = document.createElement('div');
	  // core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	  
	  core.events.publish("core:bps:template");
	};
	BusinessForms.prototype.bindEvents = function(){
	  var bps = this;

	  document.addEventListener('DOMContentLoaded', function(){
	    
	    core.events.subscribe("bps:reports:render", function(){
	      bps.render();
	    });

	    core.events.subscribe("core:bps:loaded", function(rawData){
	      // console.log( 'RAW BusinessForms', rawData );
	      for (var type in rawData ) {
	        var data = rawData[type];

	        // console.log( '***++', type, rawData.raw[type] );
	        
	        for (var i = data.length - 1; i >= 0; i--) {
	          var _d = data[i];
	          var bp = {
	            _id         : _d._id,
	            name        : _d.name,
	            description : _d.description,
	            update_at   : _d.updated_at,
	            
	            author : {
	              id   : _d.author_id,
	              name : _d.author_id
	            },

	            providerId  : _d.provider_id,

	            query       : _d.query,
	            globalQuery : _d.globalQuery,

	            settings : {
	              periodStart  : _d.periodStart,
	              periodEnd    : _d.periodEnd,
	              main         : _d.main,
	              compare      : _d.compare,
	              BsYearbusinessForm : _d.BearbusinessForm,
	              isTemplate   : _d.template,
	              providerSelected : _d.providerSelected
	            }
	          };
	          bps.add( type, bp );
	          
	          // core.events.publish("core:card:add", {
	          //   type:type,
	          //   bp:bp
	          // });
	        }
	      }
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe("core:bps:start", function( template ){
	      console.log('BusinessForms <- core:bps:start');
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe("core:template:bps", function( template ){
	      bps.updateRootElement( template.raw );
	    });

	    // клик по меню с документами
	    core.events.subscribe("core:bps:menu:select", function( menuItem ){
	      console.log( 'BusinessForms <- core:bps:menu:select', menuItem );
	      core.events.publish( "core:router:default" );
	    });

	  });
	};
	BusinessForms.prototype.updateRootElement = function(html){
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};

	BusinessForms.prototype._render = function(){
	  if ( !Object.keys(this.documents).length ){
	    return false;
	  }

	  for (var type in this.documents) {
	    // console.log( 'render -> type, documents', type,this.element.querySelector('.'+type),   this.documents[type] );
	    var helper = {
	      type: {
	        text: function (params) {
	          return this.type;
	        }
	      }
	    };
	    helper[type] = {
	        '_id': {
	          text: function (params) {
	            return this._id || '-id-';
	          }
	        },
	        name: {
	          text: function (params) {
	            return this.name || '-name-';
	          }
	        },
	        link: {
	          href: function (params) {
	            return '#bps/' + this._id;
	          }
	        }
	    };

	    var config = {
	      type: type
	    };
	    config[type] = this.documents[type];

	    Transparency.render( this.element.querySelector('.bp-'+type), config, helper );
	  }
	};

	BusinessForms.prototype.add = function( type, config ) {

	  if ( !this.documents.hasOwnProperty(type) ) {
	    this.documents[type] = [];
	  }

	  this.documents[type].push( new this.BusinessForm(config) );
	};
	BusinessForms.prototype.clear = function(config) {
	  this.documents = {};
	};
	BusinessForms.prototype.find = function(id) {
	  for (var type in this.documents) {
	    for (var i = this.documents[type].length - 1; i >= 0; i--) {
	      if( this.documents[type][i]._id === id ){
	        return this.documents[type][i];
	      }
	    }
	  }
	};

	BusinessForms.prototype.show = function(id) {
	  console.log( 'BusinessForms: show -> ', id);
	  var bp = this.find(id);
	  if ( bp ) {
	    bp.init();
	  } else {
	    throw new Error('template not found!');
	  }
	};

	BusinessForms.prototype.start = function() {
	  console.log( 'BusinessForms: start' );
	  this.init();
	};
	BusinessForms.prototype.stop = function() {
	  console.log( 'BusinessForms: stop' );
	};
	BusinessForms.prototype.destroy = function() {
	  console.log( 'BusinessForms: destroy' );
	  this.element = [];
	};

	module.exports = BusinessForms;

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = function(){
	  document.addEventListener('DOMContentLoaded', function(){ 

	    core.events.subscribe("core:dom:build:ready", function(){
	      console.log('Core <- core:dom:build:ready');

	      core.events.publish("core:dom:attach:progressbar");
	      core.events.publish("core:preloader:start");
	    });

	    core.events.subscribe("core:preloader:finish", function(){
	      console.log('Core <- core:preloader:finish');
	      core.events.publish("core:dom:remove:progressbar");
	    });

	    core.events.subscribe( "core:template:load", function (template) {
	      core.worker.postMessage( [ 'template:load', template ] )
	    });

	    // загрузка всех отчетов
	    // core.events.subscribe( "core:reports:loaded", function (data) {
	    //   console.log( "core:reports:loaded", data );
	    //   core.worker.postMessage( [ 'reports:load', {} ] )
	    // });

	    // загрузка отчета по id
	    core.events.subscribe( "core:report:load", function (id) {
	      core.worker.postMessage( [ 'reports:id', id ] )
	    });

	    core.events.subscribe( "core:events:editor:set:html", function ( html ) {
	      core.dom.content.innerHTML = '';

	      if ( $(core.dom.content).data('froala.editor')) {
	        $(core.dom.content).froalaEditor('destroy');
	      }
	      
	      $( core.dom.content ).froalaEditor();
	      $( core.dom.content ).froalaEditor('html.set', html );
	    });


	    core.events.subscribe( "core:layout:template:ready", function (template) {
	      // console.log('layout: ', template);
	      core.events.publish('core:dom:build', template );
	    });


	    core.events.subscribe( "core:reports:load", function () {
	      console.log('Core <- core:reports:load' );
	      core.worker.postMessage( [ 'reports:load', '' ] );
	    });


	    core.events.subscribe( "core:web-forms:load", function (template) {
	      console.log('Core <- core:web-forms:load' );
	      core.worker.postMessage( [ 'web-forms:load', '' ] );
	    });
	    core.events.subscribe( "core:web-forms:loaded", function (template) {
	      console.log('Core <- core:web-forms:loaded' );
	      core.events.publish( "core:preloader:task:ready" );
	    });
	    core.events.subscribe( "core:print-forms:load", function (template) {
	      console.log('Core <- core:print-forms:load' );
	      core.worker.postMessage( [ 'print-forms:load', '' ] );
	    });
	    core.events.subscribe( "core:print-forms:loaded", function (template) {
	      console.log('Core <- core:print-forms:loaded' );
	      core.events.publish( "core:preloader:task:ready" );
	    });
	    core.events.subscribe( "core:bps:load", function (template) {
	      console.log('Core <- core:bps:load' );
	      core.worker.postMessage( [ 'bps:load', '' ] );
	    });
	    core.events.subscribe( "core:bps:loaded", function (template) {
	      console.log('Core <- core:bps:loaded' );
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe( "core:criterias:load", function (template) {
	      console.log('Core <- core:criterias:load' );
	      core.worker.postMessage( [ 'criterias:load', '' ] );
	    });
	    core.events.subscribe( "core:criterias:loaded", function (template) {
	      console.log('Core <- core:criterias:loaded' );
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe( "core:criteriaKeys:loaded", function (template) {
	      console.log('Core <- core:criteriaKeys:loaded' );
	      core.events.publish( "core:preloader:task:ready" );
	    });
	    core.events.subscribe( "core:criteriaKeys:load", function (template) {
	      console.log('Core <- core:criteriaKeys:load' );
	      core.worker.postMessage( [ 'criteriaKeys:load', '' ] );
	    });

	    core.events.subscribe('core:custom:load', function(){
	      var elements = [ 'layout', 'progressbar' ];

	      console.log( 'Core <- core:custom:load ' );
	      core.loadCustomElements( elements );
	      core.events.publish( "core:preloader:task:ready" );
	    });



	    // core.worker.postMessage( [ 'reports:all', {} ] );
	  }, false);
	}(window);

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var RestrictionDecorator = __webpack_require__(19);
	var AxisDecorator        = __webpack_require__(20);
	var SnapDecorator        = __webpack_require__(21);
	var PositionDecorator    = __webpack_require__(22);
	var Positions            = __webpack_require__(23);

	var isDrag = false;

	var Drag = function(el, config) {
	  var scope = this;

	  this.el = el;
	  this.options = {
	    activeClass : config && config.hasOwnProperty('activeClass') ? config.activeClass : ''                  ,
	    snapX       : config && config.hasOwnProperty('snapX')       ? config.snapX       : 1                   ,
	    snapY       : config && config.hasOwnProperty('snapY')       ? config.snapY       : 1                   ,
	    axisX       : config && config.hasOwnProperty('axisX')       ? config.axisX       : true                ,
	    axisY       : config && config.hasOwnProperty('axisY')       ? config.axisY       : true                ,
	    restrict    : config && config.hasOwnProperty('restrict')    ? config.restrict    : 'document'          ,
	    onStart     : config && config.hasOwnProperty('onStart')     ? config.onStart     : function(e, obj) {} ,
	    onDrag      : config && config.hasOwnProperty('onDrag')      ? config.onDrag      : function(e, obj) {} ,
	    onStop      : config && config.hasOwnProperty('onStop')      ? config.onStop      : function(e, obj) {}
	  };

	  this.el.style.top      = this.el.getBoundingClientRect().top  + 'px';
	  this.el.style.left     = this.el.getBoundingClientRect().left + 'px';
	  this.el.style.position = "absolute";

	  this.Positions = new Positions(this.options);

	  // Set AxisDecorator
	  if (this.options.axisX == false || this.options.axisY == false) {
	    this.Positions = new AxisDecorator(this.Positions);
	  }

	  // Set SnapDecorator
	  if (this.options.snapX != 1 || this.options.snapY != 1) {
	    this.Positions = new SnapDecorator(this.Positions);
	  }

	  // set RestrictionDecorator
	  this.Positions = new RestrictionDecorator(
	    this.Positions,
	    this.el,
	    this.options.restrict
	  );

	  this.el.onmousedown = function(e) {
	    scope.mousedownHandler(e);
	  };

	  this.el.ontouchstart = function(e) {
	    e.preventDefault();
	    scope.mousedownHandler(e.changedTouches[0]);
	  };
	};
	Drag.prototype.mousedownHandler = function(e) {

	  var event = document.all ? window.event : e,
	    scope   = this,
	    mouseX  = document.all ? window.event.clientX : e.pageX,
	    mouseY  = document.all ? window.event.clientY : e.pageY;

	  if (event.preventDefault) {
	    event.preventDefault();
	  }
	  else {
	    document.onselectstart = function() {
	      return false;
	    };
	  }

	  if ( this.options.activeClass ) {
	    this.el.classList.add( this.options.activeClass );
	  }

	  if (typeof this.options.onStart === 'function') {
	    this.options.onStart(event, this.el);
	  }

	  isDrag = true;
	  this.el.style.zIndex = 99999;

	  this.Positions.setPoints({
	    firstMouseX : mouseX,
	    firstMouseY : mouseY,
	    elementX    : (mouseX - this.el.offsetLeft),
	    elementY    : (mouseY - this.el.offsetTop)
	  });

	  document.onmousemove = function(e) {
	    var event = document.all ? window.event : e;
	    scope.mousemoveHandler(event);
	  };

	  document.ontouchmove = function(e) {
	    var event = e.changedTouches[0];
	    scope.mousemoveHandler(event);
	  };

	  document.onmouseup = function(e) {
	    var event = document.all ? window.event : e;
	    scope.mouseupHandler(event);
	  };

	  document.ontouchend = function(e) {
	    var event = e.changedTouches[0];
	    scope.mouseupHandler(event);
	  };
	};
	Drag.prototype.mousemoveHandler = function(e) {
	  var mouseX = document.all ? window.event.clientX : e.pageX,
	    mouseY = document.all ? window.event.clientY : e.pageY;

	  this.Positions.setPoints({
	    lastMouseX: mouseX,
	    lastMouseY: mouseY
	  });

	  if (isDrag === false){
	    return;
	  }

	  if (this.Positions.getX() !== null) {
	    this.el.style.left = this.Positions.getX() + 'px';
	  }

	  if (this.Positions.getY() !== null) {
	    this.el.style.top = this.Positions.getY() + 'px';
	  }

	  e['distanceX'] = this.Positions.getDistanceX();
	  e['distanceY'] = this.Positions.getDistanceY();

	  if (typeof this.options.onDrag === 'function') {
	    this.options.onDrag(e, this.el);
	  }
	};
	Drag.prototype.mouseupHandler = function(e) {
	  if (isDrag === false)
	    return;

	  if ( this.options.activeClass ) {
	    this.el.classList.remove( this.options.activeClass );
	  }

	  e['distanceX'] = this.Positions.getDistanceX();
	  e['distanceY'] = this.Positions.getDistanceY();

	  if (typeof this.options.onStop === 'function') {
	    this.options.onStop(e, this.el);
	  }

	  this.el.style.zIndex = '';
	  isDrag = false;
	};



	var Draggy = function(){
	  this.elements = [];
	  this.active  = {};
	};

	Draggy.prototype.Constant = {
	  'ACTIVE' : 'drag-active'
	}


	Draggy.prototype.setActive = function( element, e ){
	  console.log( 'setActive', e, element);
	  
	  for(var k = 0, length = this.elements.length; k < length; k++){
	    console.log();
	    this.elements[k].el.classList.remove( this.Constant.ACTIVE );
	  }
	  
	  element.classList.add( this.Constant.ACTIVE );
	};

	Draggy.prototype.add = function( element, config ){
	  this.elements.push( new Drag( element, config ) );
	  element.addEventListener('click', this.setActive.bind(this, element) );

	};

	module.exports = Draggy;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PositionDecorator = __webpack_require__(22);


	var RestrictionDecorator = function (Positions, el, restrictEl) {
	  PositionDecorator.call(this, Positions);

	  restrictEl = restrictEl || 'document';
	  this.el = el;

	  if (restrictEl == 'document') {
	    this.restrictWidth = window.innerWidth || document.body.clientWidth;
	    this.restrictHeight = window.innerHeight || document.body.clientHeight;
	  }
	  else {

	    if (typeof restrictEl != 'object'){
	      throw new Error('Restrict must be object: document.getElementById("obj_id")');
	    }

	    restrictEl.style.position = 'relative';

	    this.restrictWidth = restrictEl.offsetWidth;
	    this.restrictHeight = restrictEl.offsetHeight;
	  }
	}
	RestrictionDecorator.prototype = new PositionDecorator();
	RestrictionDecorator.prototype.getX = function() {
	  if (this.Positions.getX() < 0) {
	    return 0;
	  }
	  else if (this.Positions.getX() >
	    (this.restrictWidth - this.el.offsetWidth)) {
	    return (this.restrictWidth - this.el.offsetWidth);
	  }

	  return this.Positions.getX();
	};
	RestrictionDecorator.prototype.getY = function() {
	  if (this.Positions.getY() < 0) {
	    return 0;
	  }
	  else if (this.Positions.getY() >
	    (this.restrictHeight - this.el.offsetHeight)) {
	    return (this.restrictHeight - this.el.offsetHeight);
	  }

	  return this.Positions.getY();
	};
	module.exports = RestrictionDecorator;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PositionDecorator = __webpack_require__(22);

	var AxisDecorator = function (Positions) {
	  PositionDecorator.call(this, Positions);
	};
	AxisDecorator.prototype = new PositionDecorator();
	AxisDecorator.prototype.getX = function() {
	  var axisX = this.Positions.getOptions().axisX;

	  if (axisX == true) {
	    return this.Positions.getX();
	  }

	  return null;
	};
	AxisDecorator.prototype.getY = function() {
	  var axisY = this.Positions.getOptions().axisY;

	  if (axisY == true) {
	    return this.Positions.getY();
	  }

	  return null;
	};
	module.exports = AxisDecorator;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PositionDecorator = __webpack_require__(22);

	var SnapDecorator = function (Positions) {
	  PositionDecorator.call(this, Positions);
	};
	SnapDecorator.prototype = new PositionDecorator();
	SnapDecorator.prototype.getX = function() {
	  var snapX = this.Positions.getOptions().snapX;

	  return (Math.round(
	    this.Positions.getX() / snapX
	  ) * snapX);
	};
	SnapDecorator.prototype.getY = function() {
	  var snapY = this.Positions.getOptions().snapY;

	  return (Math.round(
	    this.Positions.getY() / snapY
	  ) * snapY);
	};

	module.exports = SnapDecorator;

/***/ },
/* 22 */
/***/ function(module, exports) {

	'use strict';

	function PositionDecorator(Positions) {
	  this.Positions = Positions;
	}
	PositionDecorator.prototype.getOptions = function() {
	  return this.Positions.getOptions();
	};
	PositionDecorator.prototype.setPoints = function(points) {
	  this.Positions.setPoints(points);
	};
	PositionDecorator.prototype.getPoints = function() {
	  return this.Positions.getPoints();
	};
	PositionDecorator.prototype.getDistanceX = function() {
	  return this.Positions.getDistanceX();
	};
	PositionDecorator.prototype.getDistanceY = function() {
	  return this.Positions.getDistanceY();
	};
	PositionDecorator.prototype.getX = function() {
	  return this.Positions.getX();
	};
	PositionDecorator.prototype.getY = function() {
	  return this.Positions.getY();
	};
	module.exports = PositionDecorator;

/***/ },
/* 23 */
/***/ function(module, exports) {

	'use strict';

	var Positions = function(options) {
	  this.options = options;
	  this.points = {
	    elementX: 0,
	    elementY: 0,
	    firstMouseX : 0,
	    firstMouseY : 0,
	    lastMouseX  : 0,
	    lastMouseY  : 0
	  };
	}

	Positions.prototype.getOptions = function() {
	  return this.options;
	};
	Positions.prototype.setPoints =  function(points) {
	  
	  if (points.elementX){
	    this.points.elementX = points.elementX;
	  }

	  if (points.elementY){
	    this.points.elementY = points.elementY;
	  }

	  if (points.firstMouseX){
	    this.points.firstMouseX = points.firstMouseX;
	  }

	  if (points.firstMouseY){
	    this.points.firstMouseY = points.firstMouseY;
	  }

	  if (points.lastMouseX){
	    this.points.lastMouseX = points.lastMouseX;
	  }

	  if (points.lastMouseY){
	    this.points.lastMouseY = points.lastMouseY;
	  }
	};
	Positions.prototype.getPoints = function() {
	  return this.points;
	};
	Positions.prototype.getDistanceX = function() {
	  return Math.abs(this.points.lastMouseX - this.points.firstMouseX);
	};
	Positions.prototype.getDistanceY = function() {
	  return Math.abs(this.points.lastMouseY - this.points.firstMouseY);
	};
	Positions.prototype.getX = function() {
	  return (this.points.lastMouseX - this.points.elementX);
	};
	Positions.prototype.getY = function() {
	  return (this.points.lastMouseY - this.points.elementY);
	};

	module.exports = Positions;

/***/ },
/* 24 */,
/* 25 */,
/* 26 */
/***/ function(module, exports) {

	'use strict';

	var Label = function( options ) {
	  this.element = document.createElement('label');
	}

	var Input = function( options ) {
	  this.element = document.createElement('input');

	  if ( options.name ) {
	    this.name = this.setName( options.name );
	  };
	  
	  if ( options.type ) {
	    this.type = this.setType( options.type );
	  };
	  
	  if ( options.placeholder ) {
	    this.placeholder = this.setPlaceholder( options.placeholder );
	  };
	  
	  if ( options.label ) {
	    this.label = this.setLabel( options.label );
	  };

	  this.render();
	}
	Input.prototype.setName = function( string ){
	  this.name = string;
	  this.element.name = string;
	};
	Input.prototype.setType = function( string ){
	  this.type = string;
	  this.element.type = string;
	};
	Input.prototype.setPlaceholder = function( string ){
	  this.placeholder = string;
	  this.element.placeholder = string;
	};
	Input.prototype.setLabel = function( string ){
	  this.label = string;
	};
	Input.prototype.render = function(){
	  return this.element;
	};



	var Elements = function(){
	  this.elements = [];
	};

	Elements.prototype.create = function( options ) {
	  var parentClass = null;

	  switch ( options.elementType ) {
	    case 'label':
	      parentClass = Label;
	      break;
	    case 'input':
	      parentClass = Input;
	      break;
	    default:
	      break;
	  }
	  
	  if( parentClass === null ) {
	    return false;
	  }

	  
	  var element = new parentClass( options );
	  this.elements.push( element );
	  return new parentClass( options );
	}

	module.exports = new Elements();

	// var input = core.modules.drag.Elements.create( {
	//   elementType : 'input',
	//   name : 'test-input',
	//   type : 'text',
	//   placeholder : 'text',
	//   label: 'label'
	// } );

/***/ }
/******/ ]);