/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	core = (function(){
	  var Mediator  = __webpack_require__(5),
	      WebWorker = __webpack_require__(8),
	      Utils     = __webpack_require__(9),
	      Dom       = __webpack_require__(11),
	      
	      Preloader   = __webpack_require__(12),
	      Router      = __webpack_require__(13),
	      Snackbar    = __webpack_require__(15),
	      Templates   = __webpack_require__(16),
	      Progressbar = __webpack_require__(17),
	      Reports     = __webpack_require__(20);

	  var Core = function( config ){
	    this.events   = new Mediator();
	    this.worker   = new WebWorker();
	    this.utils    = new Utils();
	    this.dom      = new Dom();
	    this.modules  = {
	      preloader   : new Preloader(),
	      router      : new Router(),
	      snackbar    : new Snackbar(),
	      templates   : new Templates(),
	      progressbar : new Progressbar(),
	      reports     : new Reports()
	    };
	    this.debug    = true;

	    this.bindEvents();
	  };

	  Core.prototype.bindEvents = function() {
	    __webpack_require__(19);
	  };
	  Core.prototype.loadCustomElements = function(elements){
	    console.log( 'Core :: loadCustomElements', elements );
	  };

	  Core.prototype.start = function(module) {
	    // this.events.publish( "core:start:" + module );
	    // this.events.publish("core:preloader:start")
	  };

	  Core.prototype.destroy = function(module) {
	    this.events.publish( "core:destroy:" + module );
	  };
	  
	  Core.prototype.build = function(module) {
	  };

	  Core.prototype.startAll = function() {
	    console.log('core:startAll');
	    this.events.publish("core:dom:build:application")
	    // setTimeout( core.events.publish("core:preloader:start"), 100 );
	  };
	  Core.prototype.destroyAll = function() {
	    this.events.publish("core:destroy:all");
	  };

	  return new Core();
	})();


/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var Channel = __webpack_require__(6);
	var Subscriber = __webpack_require__(7);

	var Mediator = function() {
	  if (!(this instanceof Mediator)) {
	    return new Mediator();
	  }

	  this._channels = new Channel('');
	}
	Mediator.prototype.getChannel = function(namespace, readOnly) {
	  var channel = this._channels,
	      namespaceHierarchy = namespace.split(':'),
	      x = 0,
	      y = namespaceHierarchy.length;

	  if (namespace === '') {
	    return channel;
	  }

	  if (namespaceHierarchy.length > 0) {
	    for(x, y; x < y; x++) {

	      if (!channel.hasChannel(namespaceHierarchy[x])) {
	        if (readOnly) {
	          break;
	        } else {
	          channel.addChannel(namespaceHierarchy[x]);
	        }
	      }

	      channel = channel.returnChannel(namespaceHierarchy[x]);
	    }
	  }

	  return channel;
	}
	Mediator.prototype.subscribe = function(channelName, fn, options, context) {
	  var channel = this.getChannel(channelName || "", false);

	  options = options || {};
	  context = context || {};

	  return channel.addSubscriber(fn, options, context);
	}
	Mediator.prototype.once = function(channelName, fn, options, context) {
	  options = options || {};
	  options.calls = 1;

	  return this.subscribe(channelName, fn, options, context);
	}
	Mediator.prototype.getSubscriber = function(identifier, channelName) {
	  var channel = this.getChannel(channelName || "", true);
	  
	  
	  if (channel.namespace !== channelName) {
	    return null;
	  }

	  return channel.getSubscriber(identifier);
	}
	Mediator.prototype.remove = function(channelName, identifier) {
	  var channel = this.getChannel(channelName || "", true);
	  if (channel.namespace !== channelName) {
	    return false;
	  }

	  channel.removeSubscriber(identifier);
	}
	Mediator.prototype.publish = function(channelName) {
	  var channel = this.getChannel(channelName || "", true);
	  if (channel.namespace !== channelName) {
	    return null;
	  }

	  var args = Array.prototype.slice.call(arguments, 1);

	  args.push(channel);

	  channel.publish(args);
	}
	Mediator.prototype.on = Mediator.prototype.subscribe;
	Mediator.prototype.bind = Mediator.prototype.subscribe;
	Mediator.prototype.emit = Mediator.prototype.publish;
	Mediator.prototype.trigger = Mediator.prototype.publish;
	Mediator.prototype.off = Mediator.prototype.remove;

	Mediator.Channel = Channel;
	Mediator.Subscriber = Subscriber;

	module.exports = Mediator

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var Subscriber = __webpack_require__(7);

	var Channel = function(namespace, parent) {
	  if (!(this instanceof Channel)) {
	    return new Channel(namespace);
	  }

	  this.namespace = namespace || "";
	  this._subscribers = [];
	  this._channels = {};
	  this._parent = parent;
	  this.stopped = false;
	}
	Channel.prototype.addSubscriber = function(fn, options, context) {
	  var subscriber = new Subscriber(fn, options, context);

	  if (options && options.priority !== undefined) {
	    
	    
	    
	    options.priority = options.priority >> 0;

	    if (options.priority < 0) { options.priority = 0; }
	    if (options.priority >= this._subscribers.length) { options.priority = this._subscribers.length-1; }

	    this._subscribers.splice(options.priority, 0, subscriber);
	  }else{
	    this._subscribers.push(subscriber);
	  }

	  subscriber.channel = this;

	  return subscriber;
	}
	Channel.prototype.stopPropagation = function() {
	  this.stopped = true;
	}
	Channel.prototype.getSubscriber = function(identifier) {
	  var x = 0,
	      y = this._subscribers.length;

	  for(x, y; x < y; x++) {
	    if (this._subscribers[x].id === identifier || this._subscribers[x].fn === identifier) {
	      return this._subscribers[x];
	    }
	  }
	}
	Channel.prototype.setPriority = function(identifier, priority) {
	  var oldIndex = 0,
	      x = 0,
	      sub, firstHalf, lastHalf, y;

	  for(x = 0, y = this._subscribers.length; x < y; x++) {
	    if (this._subscribers[x].id === identifier || this._subscribers[x].fn === identifier) {
	      break;
	    }
	    oldIndex ++;
	  }

	  sub = this._subscribers[oldIndex];
	  firstHalf = this._subscribers.slice(0, oldIndex);
	  lastHalf = this._subscribers.slice(oldIndex+1);

	  this._subscribers = firstHalf.concat(lastHalf);
	  this._subscribers.splice(priority, 0, sub);
	}
	Channel.prototype.addChannel = function(channel) {
	  this._channels[channel] = new Channel((this.namespace ? this.namespace + ':' : '') + channel, this);
	}
	Channel.prototype.hasChannel = function(channel) {
	  return this._channels.hasOwnProperty(channel);
	}
	Channel.prototype.returnChannel = function(channel) {
	  return this._channels[channel];
	}
	Channel.prototype.removeSubscriber = function(identifier) {
	  var x = this._subscribers.length - 1;

	  
	  if (!identifier) {
	    this._subscribers = [];
	    return;
	  }

	  
	  for(x; x >= 0; x--) {
	    if (this._subscribers[x].fn === identifier || this._subscribers[x].id === identifier) {
	      this._subscribers[x].channel = null;
	      this._subscribers.splice(x,1);
	    }
	  }
	}
	Channel.prototype.publish = function(data) {
	  var x = 0,
	      y = this._subscribers.length,
	      shouldCall = false,
	      subscriber, l,
	      subsBefore,subsAfter;

	  for(x, y; x < y; x++) {
	    
	    shouldCall = false;
	    subscriber = this._subscribers[x];

	    if (!this.stopped) {
	      subsBefore = this._subscribers.length;
	      if (subscriber.options !== undefined && typeof subscriber.options.predicate === "function") {
	        if (subscriber.options.predicate.apply(subscriber.context, data)) {
	          
	          shouldCall = true;
	        }
	      }else{
	        shouldCall = true;
	      }
	    }

	    
	    if (shouldCall) {
	      if (subscriber.options && subscriber.options.calls !== undefined) {
	        
	        subscriber.options.calls--;
	        
	        if (subscriber.options.calls < 1) {
	          this.removeSubscriber(subscriber.id);
	        }
	      }
	      
	      
	      subscriber.fn.apply(subscriber.context, data);

	      subsAfter = this._subscribers.length;
	      y = subsAfter;
	      if (subsAfter === subsBefore - 1) {
	        x--;
	      }
	    }
	  }

	  if (this._parent) {
	    this._parent.publish(data);
	  }

	  this.stopped = false;
	}

	module.exports = Channel;

/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";


	var Subscriber = function(fn, options, context) {
	  if (!(this instanceof Subscriber)) {
	    return new Subscriber(fn, options, context);
	  }

	  this.id = this.guidGenerator();
	  this.fn = fn;
	  this.options = options;
	  this.context = context;
	  this.channel = null;
	}
	Subscriber.prototype.guid = function(options) {
	  return ( ( ( 1 + Math.random() ) * 0x10000)   | 0 ).toString(16).substring(1);
	}
	Subscriber.prototype.guidGenerator = function(options) {
	  var S4 = this.guid;
	  return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
	}
	Subscriber.prototype.update = function(options) {
	  if (options) {
	    this.fn = options.fn || this.fn;
	    this.context = options.context || this.context;
	    this.options = options.options || this.options;
	    if (this.channel && this.options && this.options.priority !== undefined) {
	        this.channel.setPriority(this.id, this.options.priority);
	    }
	  }
	} 

	module.exports = Subscriber

/***/ },
/* 8 */
/***/ function(module, exports) {

	var WebWorker = function(){
	  this.worker = new Worker("assets/js/core/worker/worker.js");
	  this.worker.onmessage = function( e ) {
	    // console.log('FROM WORKER: ', e.data);
	    var data = e.data;
	    for (var key in data) {
	      if (data.hasOwnProperty(key)) {
	        // data[key];
	        switch (key) {
	          case 'template:loaded':
	            var templateName = Object.keys( data[key] )[0],
	                data         = data[key][templateName];
	            
	            core.events.publish("core:template:loaded", {
	              name : templateName,
	              raw  : data
	            });
	            
	            break;
	          case 'reports:loaded':
	            // core.events.publish("core:reports:loaded", {
	            //   raw: JSON.parse( data[key] )
	            // });
	            console.log( 'reports:loaded --> ', data[key] );
	            core.events.publish("core:reports:loaded", data[key] );
	            break;
	          case 'report:loaded':
	            console.log( 'report:loaded --> ', data[key] );
	            core.events.publish("core:report:loaded", {
	              raw: data[key]
	            });
	            break;
	          case 'criterias:loaded':
	            core.events.publish("core:criterias:loaded", data[key] );
	            break;
	          case 'criteriaKeys:loaded':
	            core.events.publish("core:criteriaKeys:loaded", data[key] );
	            break;




	          default:
	            console.log('default');
	            break;
	        }

	      }
	    }
	  };
	  return this.worker;
	}; 
	module.exports = WebWorker;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var Base64 = __webpack_require__(10);

	var Utils = function(){
	  this.element = [];
	};
	Utils.prototype.Base64 = new Base64();

	Utils.prototype.merge = function (from, to) {
	  var result = {};

	  for ( var key in from ) {
	    if ( from.hasOwnProperty(key) ) {
	      if ( !result.hasOwnProperty(key) ) {
	        result[key] = from[key]
	      };
	    }
	  }
	  for (var key in to) {
	    if (to.hasOwnProperty(key)) {
	      if ( !result.hasOwnProperty(key) ) {
	        result[key] = to[key]
	      };
	    }
	  }
	  return result;
	}

	Utils.prototype.request = function( type, url, data, callback ) {
	  var request = new XMLHttpRequest();
	  request.open( type.toUpperCase(), url, true);

	  request.onload = function() {
	    if ( this.status >= 200 && this.status < 400 ) {
	      callback( this.response );
	    } else {
	      callback( new Error( this.response ) );
	    }
	  };

	  request.onerror = function() {
	    callback( new Error( this.response ) );
	  };

	  request.send();
	};
	Utils.prototype.log = function(msg, color) {
	  var color = color || "black";
	  var background = "White";

	  switch (color) {
	      case "success":
	        color      = "Green";
	        background = "LimeGreen";
	        break;
	      case "info":
	        color      = "DodgerBlue";
	        background = "Turquoise";
	        break;
	      case "error":
	        color      = "Red";
	        background = "Black";
	        break;
	      case "start":
	        color      = "OliveDrab";
	        background = "PaleGreen";
	        break;
	      case "warning":
	        color      = "Tomato";
	        background = "Black";
	        break;
	      case "end":
	        color      = "Orchid";
	        background = "MediumVioletRed";
	        break;
	      default:
	        color = color;
	        break;
	    };

	  if ( typeof msg == "object" ) {
	      console.log(msg);
	  } else if ( typeof color == "object" ) {
	      console.log("%c" + msg, "color: PowderBlue;font-weight:bold; background-color: RoyalBlue;");
	      console.log(color);
	  } else {
	      console.log("%c" + msg, "color:" + color + ";font-weight:bold; background-color: " + background + ";");
	  }
	};
	Utils.prototype.get = function( url, data, callback ) {
	  this.request( 'get', url, data, callback );
	};
	Utils.prototype.post = function( url, data, callback ) {
	  this.request( 'post', url, data, callback );
	};
	Utils.prototype.put = function( url, data, callback ) {
	  this.request( 'put', url, data, callback );
	};
	Utils.prototype.delete = function( url, data, callback ) {
	  this.request( 'delete', url, data, callback );
	};

	Utils.prototype.start = function() {
	  console.log( 'Utils: start' );
	};
	Utils.prototype.stop = function() {
	  console.log( 'Utils: stop' );
	};
	Utils.prototype.destroy = function() {
	  console.log( 'Utils: destroy' );
	  this.element = [];
	};

	 module.exports = Utils;

/***/ },
/* 10 */
/***/ function(module, exports) {

	var Base64 = function(string){
	  this.b64tab = {};

	  this.b64tabPopulate();
	  return this;
	};
	Base64.prototype.b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	Base64.prototype.b64tabPopulate = function() {
	  var bin = this.b64chars;
	  for (var i = 0, l = bin.length; i < l; i++){
	    this.b64tab[bin.charAt(i)] = i
	  };
	  return this;
	};

	Base64.prototype.fromCharCode = String.fromCharCode;

	Base64.prototype.cb_utob = function(c) {
	  if (c.length < 2) {
	      var cc = c.charCodeAt(0);
	      return cc < 0x80 ? c
	          : cc < 0x800 ? (this.fromCharCode(0xc0 | (cc >>> 6))
	                        + this.fromCharCode(0x80 | (cc & 0x3f)))
	          : ( this.fromCharCode(0xe0 | ((cc >>> 12) & 0x0f) )
	            + this.fromCharCode(0x80 | ((cc >>>  6) & 0x3f) )
	            + this.fromCharCode(0x80 | ( cc         & 0x3f)));
	  } else {
	    var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);
	    
	    return (this.fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
	          + this.fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
	          + this.fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
	          + this.fromCharCode(0x80 | ( cc         & 0x3f)));
	  }
	};
	Base64.prototype.re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;

	Base64.prototype.utob = function(u) {
	  return u.replace(this.re_utob, this.cb_utob.bind(this));
	};
	Base64.prototype.cb_encode = function(ccc) {
	    var b64chars = this.b64chars;
	    var padlen = [0, 2, 1][ccc.length % 3],
	    ord = ccc.charCodeAt(0) << 16
	        | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
	        | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
	    chars = [
	        b64chars.charAt( ord >>> 18),
	        b64chars.charAt((ord >>> 12) & 63),
	        padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
	        padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
	    ];
	    return chars.join('');
	};
	Base64.prototype.btoa = function(b) {
	  return b.replace(/[\s\S]{1,3}/g, this.cb_encode.bind(this) )
	};
	Base64.prototype._encode = function (u) {
	  return this.btoa( this.utob(u) );
	};
	Base64.prototype.encodeURI = function(u) {
	  return this.encode(u, true)
	};
	// decoder stuff
	Base64.prototype.re_btou = new RegExp([
	    '[\xC0-\xDF][\x80-\xBF]',
	    '[\xE0-\xEF][\x80-\xBF]{2}',
	    '[\xF0-\xF7][\x80-\xBF]{3}'
	].join('|'), 'g');

	Base64.prototype.cb_btou = function(cccc) {
	    switch(cccc.length) {
	    case 4:
	        var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
	            |    ((0x3f & cccc.charCodeAt(1)) << 12)
	            |    ((0x3f & cccc.charCodeAt(2)) <<  6)
	            |     (0x3f & cccc.charCodeAt(3)),
	        offset = cp - 0x10000;
	        return (this.fromCharCode((offset  >>> 10) + 0xD800)
	                + this.fromCharCode((offset & 0x3FF) + 0xDC00));
	    case 3:
	        return this.fromCharCode(
	            ((0x0f & cccc.charCodeAt(0)) << 12)
	                | ((0x3f & cccc.charCodeAt(1)) << 6)
	                |  (0x3f & cccc.charCodeAt(2))
	        );
	    default:
	        return  this.fromCharCode(
	            ((0x1f & cccc.charCodeAt(0)) << 6)
	                |  (0x3f & cccc.charCodeAt(1))
	        );
	    }
	};
	Base64.prototype.btou = function(b) {
	  return b.replace(this.re_btou, this.cb_btou.bind(this) );
	};
	Base64.prototype.cb_decode = function(cccc) {
	  var len = cccc.length,
	  padlen = len % 4,
	  n = (len > 0   ? this.b64tab[cccc.charAt(0)] << 18 : 0)
	      | (len > 1 ? this.b64tab[cccc.charAt(1)] << 12 : 0)
	      | (len > 2 ? this.b64tab[cccc.charAt(2)] <<  6 : 0)
	      | (len > 3 ? this.b64tab[cccc.charAt(3)]       : 0),
	  chars = [
	      this.fromCharCode( n >>> 16),
	      this.fromCharCode((n >>>  8) & 0xff),
	      this.fromCharCode( n         & 0xff)
	  ];
	  chars.length -= [0, 0, 2, 1][padlen];
	  return chars.join('');
	};
	Base64.prototype.atob = function(a) {
	  return a.replace( /[\s\S]{1,4}/g, this.cb_decode.bind(this) );
	};
	Base64.prototype._decode = function( string ) {
	  return this.btou( this.atob( string ) );
	};
	Base64.prototype.replacer = function(char) {
	  console.log( 'replacer -> char:', char );
	  return char == '-' ? '+' : '/'
	}
	Base64.prototype.decode = function(string){
	  var str = String( string ).replace( /[-_]/g, this.replacer ).replace(/[^A-Za-z0-9\+\/]/g, '');
	  return this._decode( str );
	};
	Base64.prototype.encode = function( string, urisafe) {
	  return !urisafe ? this._encode(String( string )) : this._encode(String( string )).replace( /[+\/]/g, this.replacer ).replace(/=/g, '');
	};

	module.exports = Base64

/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict';

	var Dom = function () {
	  this.root        = document;
	  this.application = {};
	  this.editor      = {};
	  this.snackbar    = {};


	  this.bindEvents();
	};

	Dom.prototype.bindEvents = function () {
	  var dom = this;

	  document.addEventListener('DOMContentLoaded', function () {
	    core.events.subscribe('core:start:all', function () {
	      console.log('core  > dom > bindEvents > core:start:all');
	      manager.start();
	    }, { priority: 0 });

	    core.events.subscribe('core:dom:updateApplication', function (application) {
	      dom.root.body.appendChild(application);
	    }, { priority: 0 });

	    core.events.subscribe('core:dom:application:clear', function () {
	      console.log(' clear ->', dom.application);
	    });

	    core.events.subscribe('core:dom:build:application', function () {
	      console.log('Dom <- core:dom:build:application');
	      dom.build();
	    });

	    core.events.subscribe('core:dom:application:show', function () {
	      console.log( ' Dom <- core:dom:application:show' );
	      core.dom.application.application.showCards();
	    });
	    core.events.subscribe('core:dom:application:hide', function () {
	      console.log( ' Dom <- core:dom:application:hide' );
	      core.dom.application.application.hideCards();
	    });

	    core.events.subscribe('core:dom:editor:show', function () {
	      console.log( ' Dom <- core:dom:editor:show' );
	      core.dom.editor.style.zIndex = 1;
	      core.dom.editor.classList.add('fadeIn');
	      core.dom.editor.classList.remove('fadeOut');
	      core.dom.editor.classList.remove('hide');
	    });
	    core.events.subscribe('core:dom:editor:hide', function () {
	      console.log( ' Dom <- core:dom:editor:hide' );
	      core.dom.editor.style.zIndex = 0;
	      core.dom.editor.classList.remove('fadeIn');
	      core.dom.editor.classList.add('fadeOut');
	      core.dom.editor.classList.add('hide');
	    });

	  }, false);
	};

	Dom.prototype.build = function () {
	  console.log('Dom :: build application');

	  this.application = document.createElement('core-layout');
	  this.editor      = document.querySelector('#editor');
	  this.root.body.appendChild(this.application);

	  core.events.publish('core:dom:build:ready');
	};

	Dom.prototype.start = function () {
	  console.log('Dom: start');
	};

	Dom.prototype.stop = function () {
	  console.log('Dom: stop');
	};

	Dom.prototype.destroy = function () {
	  console.log('Dom: destroy');
	};

	module.exports = Dom;


/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';

	var Preloader = function(){
	  this.tasks  = {
	    start  : [ 'progressbar', 'router', 'snackbar'/*'reports' ,'templates' */ ],
	    load   : [ 'reports', 'criterias', 'criteriaKeys' ],
	  };
	  this.total   = 0;
	  this.loaded  = 0;
	  this.percent = 0;
	  this.element = {};
	  this.bindEvents();
	};
	Preloader.prototype.bindEvents = function() {
	  var preloader = this;

	  document.addEventListener('DOMContentLoaded', function(){
	    core.events.subscribe( "core:preloader:start", function () {
	      console.log( "Preloader <-core:preloader:start" );
	      preloader.start();
	    });

	    core.events.subscribe( "core:preloader:task:ready", function () {
	      preloader.loaded++;
	      console.log("* Preloader <- core:preloader:ready | " + `${parseInt( preloader.loaded, 10 )} ${parseInt( preloader.total, 10 )}` +  ` | ${parseInt( preloader.loaded, 10 ) === parseInt( preloader.total, 10 )}` +"\n\n");
	      
	      preloader.percent = Math.round( (preloader.loaded/preloader.total*100) / 10) * 10;
	      // console.log( "core:dom:progressbar:update", preloader.percent );
	      core.events.publish( "core:dom:progressbar:update", preloader.percent );

	      if ( parseInt( preloader.loaded, 10 ) === parseInt( preloader.total, 10 ) ) {
	        core.events.publish("core:preloader:finish");
	      }
	    });
	  });
	};

	Preloader.prototype.start = function() {
	  console.log( 'Preloader: start' );

	  for (var type in this.tasks) {
	    this.total += this.tasks[type].length;
	  }

	  for (var type in this.tasks) {
	    var tasks = this.tasks[type];
	    for (var i = tasks.length - 1; i >= 0; i--) {
	      console.log( `Preloader -> core:${tasks[i]}:${type}` );
	      core.events.publish( `core:${tasks[i]}:${type}` );
	    }
	  }
	};
	Preloader.prototype.stop = function() {
	  console.log( 'Preloader: stop' );
	};
	Preloader.prototype.finish = function() {
	  console.log( 'Preloader: finish' );
	  // core.events.publish('core:progressbar:start');
	};
	Preloader.prototype.destroy = function() {
	  console.log( 'Preloader: destroy' );
	};

	Preloader.prototype.build = function() {
	  var preloader = this;
	  core.events.publish( "core:dom:attach:progressbar" );
	};

	module.exports = Preloader;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Route = __webpack_require__(14);

	function Router() {
	  this.pathRoot = '';
	  this.routes = [];
	  this.type = 'hash';
	  this.path = null;
	  this.hash = null;
	  this.context = this;
	  this.handler = window;

	  var namedParam = '([\\w-]+)';
	  this.namedParam = {
	    match: new RegExp('{(' + namedParam + ')}', 'g'),
	    replace: namedParam
	  };
	  this.bindEvents();
	};

	Router.prototype.Route = Route;
	Router.prototype.add =  function(route, callback) {
	  this.routes.push(new this.Route(route, callback, this));
	  return this;
	};
	Router.prototype.empty =  function() {
	  this.routes = [];
	  return this;
	};
	Router.prototype.setType =  function(type) {
	  this.type = type;
	  return this;
	};
	Router.prototype.setPathRoot =  function(url) {
	  this.pathRoot = url;
	  return this;
	};
	Router.prototype.setPath =  function(path) {
	  this.path = path;
	  return this;
	};
	Router.prototype.setHash =  function(hash) {
	  this.hash = hash;
	  return this;
	};
	Router.prototype.setContext =  function(context) {
	  this.context = context;
	  return this;
	};
	Router.prototype.setHandler =  function(handler) {
	  this.handler = handler;
	  return this;
	};
	Router.prototype.getUrl =  function(routeType) {

	  var url;
	  routeType = routeType || this.type;

	  if (routeType == 'path') {
	    var rootRegex = new RegExp('^' + this.pathRoot + '/?');
	    url = this.path || window.location.pathname.substring(1);
	    url = url.replace(rootRegex, '');
	  } else if (routeType == 'hash') {
	    url = this.hash || window.location.hash.substring(1);
	  }

	  return decodeURI(url);
	};
	Router.prototype.match =  function(path, callback) {
	  var route = new this.Route(path, callback, this);
	  if (route.test(this.getUrl())) {
	    return route.run();
	  }
	};
	Router.prototype.run =  function() {
	  var url   = this.getUrl(),
	      route = {};

	  for (var i in this.routes) {
	    route = this.routes[i];

	    if (route.test(url)) {
	      route.run();
	      return route;
	    }
	  }

	  if ( this.check() === false ) {
	    location.hash = '#reports';
	  }
	};

	Router.prototype.check =  function() {
	  var url   = this.getUrl(),
	      match = false;

	  for (var i in this.routes) {
	    var route = this.routes[i];
	    if (route.test(url)) {
	      match = true;
	    }
	  }
	  // console.log('router -> checkDefault', match);
	  return match === true ? route : false;
	};

	Router.prototype.update = function(options) {
	  options = options || {};

	  if ( options.type ){
	    this.setType(options.type)
	  }
	  if ( options.path ){
	    this.setPath(options.path)
	  }
	  if ( options.pathRoot ){
	    this.setPathRoot(options.pathRoot)
	  }
	  if ( options.hash ){
	    this.setHash(options.hash)
	  }
	  if ( options.context ){
	    this.setContext(options.context)
	  }
	  if ( options.handler ){
	    this.setHandler(options.handler)
	  }
	  if ( options.routes ){
	    var route;
	    for (route in options.routes) {
	      this.add(route, options.routes[route]);
	    }
	  }
	};

	Router.prototype.hashChange = function(){
	   window.addEventListener('hashchange', this.run.bind(this) );
	};

	Router.prototype.start = function() {
	  this.update({
	    pathRoot : '',
	    routes   : {
	      reports : function(params) {
	        console.log('[reports]: ', params);
	        core.events.publish( "core:dom:application:show" );
	        core.events.publish( "core:dom:editor:hide" );
	      },
	      'reports/{id}' : function(params) {
	        console.log('[reports/{id}]: ', params);
	        core.events.publish( "core:dom:application:hide" );
	        core.events.publish( "core:dom:editor:show" );
	      }
	    }
	  });
	  this.run();
	};
	Router.prototype.stop = function() {
	  // console.log( 'Router: stop' );
	};
	Router.prototype.destroy = function() {
	  // console.log( 'Router: destroy' );
	};
	Router.prototype.bindEvents = function() {
	  var router = this;
	  document.addEventListener('DOMContentLoaded', function(){
	    
	    core.events.subscribe( 'core:router:reports:show', function (id) {
	      console.log( 'Router <- core:router:reports:show', id );
	      // location.hash = id;
	    });

	    core.events.subscribe("core:router:default", function(){
	      console.log('Router <- core:router:default');
	      location.hash = '#reports';
	    });

	    core.events.subscribe("core:router:start", function(){
	      console.log('Router <- core:router:start');
	      core.events.publish( "core:preloader:task:ready" );
	      router.hashChange();
	    });

	    core.events.subscribe("core:router:update", function(){
	      console.log('Router <- core:router:update');
	      router.start();
	    });
	  });
	};

	module.exports = Router

/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";

	function Route(path, callback, router) {
	  this.path     = path;
	  this.callback = callback;
	  this.router   = router;
	  this.values   = [];
	};
	Route.prototype.regex =  function() {

	  var path = this.path;

	  if (typeof path === 'string') {
	    return new RegExp('^' + path.replace(/\//g, '\\/').replace(this.router.namedParam.match, this.router.namedParam.replace) + '$');
	  }
	  return path;
	};
	Route.prototype.params =  function() {

	  var obj = {},
	    name, values = this.values,
	    params = values,
	    i, t = 0,
	    path = this.path;

	  if (typeof path === 'string') {
	    t = 1;
	    params = path.match(this.router.namedParam.match);
	  }

	  for (i in params) {
	    name = t ? params[i].replace(this.router.namedParam.match, '$1') : i;
	    obj[name] = values[i];
	  }

	  return obj;
	};
	Route.prototype.test =  function(url) {
	  // console.log('Route:test -> url: ', url, this.regex(), url.match(this.regex()) );
	  
	  var matches;
	  if ( matches = url.match(this.regex()) ) {
	    this.values = matches.slice(1);
	    return true;
	  }
	  return false;
	};
	Route.prototype.run =  function() {
	  if (typeof this.callback === 'string') {
	    return this.router.handler[this.callback](this.params());
	  }
	  return this.callback.apply(this.router.context, [this.params()]);
	};
	module.exports = Route

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";

	var Snackbar = function() {

	  this.element       = {};
	  this.textElement   = {};
	  this.actionElement = {};

	  this.active        = false;
	  this.actionHandler = undefined;
	  this.message       = undefined;
	  this.actionText    = undefined;
	  this.queuedNotifications = [];
	  this.setActionHidden(true);
	  this.bindEvents();
	};
	Snackbar.prototype.Constant = {
	  ANIMATION_LENGTH: 500
	};
	Snackbar.prototype.cssClasses = {
	  SNACKBAR: 'core-snackbar',
	  MESSAGE:  'core-snackbar__text',
	  ACTION:   'core-snackbar__action',
	  ACTIVE:   'core-snackbar--active'
	};
	Snackbar.prototype.displaySnackbar = function() {
	  this.element.setAttribute('aria-hidden', 'true');

	  if (this.actionHandler) {
	    this.actionElement.textContent = this.actionText;
	    this.actionElement.addEventListener('click', this.actionHandler);
	    this.setActionHidden(false);
	  }

	  this.textElement.textContent = this.message;
	  this.element.classList.add(this.cssClasses.ACTIVE);
	  this.element.setAttribute('aria-hidden', 'false');
	  setTimeout(this.cleanup.bind(this), this.timeout);
	};
	Snackbar.prototype.showSnackbar = function(data) {
	  if (data === undefined) {
	    console.error('Please provide a data object with at least a message to display.');
	    return false;
	  }

	  if (data.message === undefined) {
	    console.error('Please provide a message to be displayed.');
	    return false;
	  }

	  if (data.actionHandler && !data.actionText) {
	    console.error('Please provide action text with the handler.');
	    return false;
	  }

	  if (this.active) {
	    this.queuedNotifications.push(data);
	  } else {
	    this.active = true;
	    this.message = data.message;
	    if (data.timeout) {
	      this.timeout = data.timeout;
	    } else {
	      this.timeout = 2750;
	    }
	    if (data.actionHandler) {
	      this.actionHandler = data.actionHandler;
	    }
	    if (data.actionText) {
	      this.actionText = data.actionText;
	    }
	    this.displaySnackbar();
	  }
	};
	Snackbar.prototype.checkQueue = function() {
	  if ( this.queuedNotifications.length > 0) {
	    this.showSnackbar(this.queuedNotifications.shift());
	  }
	};
	Snackbar.prototype.cleanup = function() {
	  this.element.classList.remove(this.cssClasses.ACTIVE);
	  setTimeout(function() {
	    this.element.setAttribute('aria-hidden', 'true');
	    this.textElement.textContent = '';
	    if (!this.actionElement.getAttribute('aria-hidden')) {
	      this.setActionHidden(true);
	      this.actionElement.textContent = '';
	      this.actionElement.removeEventListener('click', this.actionHandler);
	    }
	    this.actionHandler = undefined;
	    this.message = undefined;
	    this.actionText = undefined;
	    this.active = false;
	    this.checkQueue();
	  }.bind(this), (this.Constant.ANIMATION_LENGTH));
	};
	Snackbar.prototype.setActionHidden = function(value) {
	  if ( Object.keys(this.actionElement).length ) {
	    value ? this.actionElement.setAttribute('aria-hidden', 'true') : this.actionElement.removeAttribute('aria-hidden');
	  }
	};

	Snackbar.prototype.start = function() {
	  console.log( 'Snackbar: start' );
	  
	  // <div id="core-snackbar" class="core-snackbar">
	  //   <div class="core-snackbar__text"></div>
	  //   <button class="core-snackbar__action" type="button"></button>
	  // </div>

	  var coreSnackbar = document.createElement("div");
	  coreSnackbar.id = 'core-snackbar';
	  coreSnackbar.classList.add('core-snackbar');
	  
	  var coreSnackbarText = document.createElement("div");
	  coreSnackbarText.classList.add('core-snackbar__text');
	  coreSnackbar.appendChild( coreSnackbarText );

	  var coreSnackbarButton = document.createElement("button");
	  coreSnackbarButton.classList.add('core-snackbar__action');
	  coreSnackbar.appendChild( coreSnackbarButton );

	  core.dom.snackbar = coreSnackbar;
	  // core.dom.application.appendChild( coreSnackbar );
	  core.dom.root.body.appendChild( coreSnackbar );
	  
	  this.element       = coreSnackbar;
	  this.textElement   = this.element.querySelector('.' + this.cssClasses.MESSAGE);
	  this.actionElement = this.element.querySelector('.' + this.cssClasses.ACTION);
	};
	Snackbar.prototype.stop = function() {
	  console.log( 'Snackbar: stop' );
	};
	Snackbar.prototype.destroy = function() {
	  console.log( 'Snackbar: destroy' );
	  this.element.remove();
	  delete this.element;
	};

	Snackbar.prototype.bindEvents = function() {
	  var snackbar = this;
	  document.addEventListener('DOMContentLoaded', function(){

	    core.events.subscribe("core:snackbar:start", function(){
	      console.log('Snackbar <- core:snackbar:start');
	      core.events.publish( "core:preloader:task:ready" );
	      snackbar.start();
	    });

	  });
	};



	module.exports = Snackbar;

/***/ },
/* 16 */
/***/ function(module, exports) {

	var Template = function(config){
	  this.name = config.name || '';
	  this.path = config.path || '';
	  this.raw  = config.raw  || '';
	  return this;
	};
	Template.prototype.load = function() {
	  core.events.publish( "core:template:load", this.name );
	  return this;
	};

	var Templates = function(){
	  this.templates = {};
	  this.ready     = false;
	  this.loaded    = 0;
	  this.toLoad    = [ 'reports-show', 'reports-index', 'core-progressbar', 'core-layout' ];

	  this.bindEvents();
	};
	Templates.prototype.Template = Template;

	Templates.prototype.add = function(name) {
	  this.templates[ name ] = new this.Template({ name: name }).load();
	};

	Templates.prototype.init = function() {

	  for (var i = this.toLoad.length - 1; i >= 0; i--) {
	    this.add( this.toLoad[i] );
	  };

	  core.events.publish( "core:templates:load", this.templates );
	};

	Templates.prototype.bindEvents = function() {
	  var templates = this;

	  document.addEventListener('DOMContentLoaded', function(){
	    core.events.subscribe("core:templates:load:success", function ( tmp ){
	      console.log( 'Load:',tmp );
	    });
	    
	    core.events.subscribe("core:templates:load:fails",   function ( e ){
	      throw new Error(e);
	    });

	    core.events.subscribe("core:template:loaded", function (data) {
	      console.log('***', data.name, Object.keys(templates.templates).length, templates.toLoad.length);
	      
	      templates.templates[data.name].raw = data.raw;
	       
	      var dataNameParse = data.name.split('-');

	      var moduleRoot = dataNameParse[0],
	          moduleName = dataNameParse[1];

	      console.log('templates -> bindEvents > core:template:loaded : ', moduleRoot + ":" + moduleName + ":template:ready");
	      
	      core.events.publish( moduleRoot + ":" + moduleName + ":template:ready", templates.templates[data.name] );
	      templates.loaded++;

	      if ( templates.loaded === templates.toLoad.length ) {
	        core.events.publish("core:preloader:ready");
	      }
	       // templates.tempates[ data.name ].raw = data.data;
	    });

	    core.events.publish("");

	    core.events.subscribe("core:progressbar:template", function(){
	      core.events.publish("core:template:progressbar", templates.templates['core-progressbar']);
	    });

	    core.events.subscribe("core:reports:template", function(){
	      core.events.publish("core:template:reports", templates.templates['reports-index']);
	    });

	    core.events.subscribe("core:reports:editor:template", function(){
	      core.events.publish("core:template:reports:editor", templates.templates['reports-show']);
	    });

	    core.events.subscribe("core:template:start", function(){
	      console.log('core:template:start');
	      templates.start();
	    });

	    core.events.subscribe("core:start:all", function(){
	      console.log('core:start:templates');
	      templates.start();
	    });

	    core.events.subscribe("core:templates:start", function(){
	      console.log('Templates <- core:templates:start');
	      core.events.publish( "core:preloader:task:ready" );
	    });
	  });
	};


	Templates.prototype.start = function() {
	  this.init();
	};

	Templates.prototype.stop = function() {
	  // console.log( 'Templates: stop' );
	};

	Templates.prototype.destroy = function() {
	  // console.log( 'Templates: destroy' );
	};

	module.exports = Templates

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";


	var Progressbar = function() {
	  this.modules = [];
	  this.total   = this.modules.length;
	  this.count   = 0;
	  this.percent = 0;

	  this.ready   = false;
	  this.element = {};

	  this.bindEvents();
	};

	Progressbar.prototype.start = function() {
	  this.build();
	};

	Progressbar.prototype.stop = function() {
	  // this.build();
	  // this.action();
	};

	Progressbar.prototype.destroy = function() {
	  this.element.remove();
	  delete this.element;
	};

	Progressbar.prototype.update = function(template) {
	  // console.log('core:progressbar:update', template);
	  this.element.innerHTML = template.raw;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	};
	Progressbar.prototype.build = function(template) {
	  this.element = document.createElement('div');
	  core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	  core.events.publish("core:progressbar:template");
	};

	Progressbar.prototype.action = function() {
	  var progressbar = this;
	  var modules = [ 'user', 'router', 'snackbar', 'reports' ];

	  for (var i = modules.length - 1; i >= 0; i--) {
	    var module = modules[i];

	    var promise = new Promise(
	      function( resolve, reject ) {
	        var moduleRaw = __webpack_require__(18)("./" + module + '.js');
	        setTimeout(function(){
	          resolve(true);
	        }, Math.random() * 500);
	      }
	    );

	    promise.then(function(){
	      progressbar.updateProgress();
	    }).catch(function(e){
	      throw new Error(e);
	    });

	    progressbar.modules.push( promise );
	  }

	  progressbar.total = progressbar.modules.length;

	  Promise.all( progressbar.modules ).then(
	    function( values ) {
	      progressbar.finish();
	    }
	  ).catch(function(e){
	    throw new Error(e);
	  });
	};

	Progressbar.prototype.finish = function() {
	  var progressbar = this;

	  var destroy = new Promise(function( resolve, reject){
	    progressbar.element.classList.remove('fadeIn');
	    progressbar.element.classList.add('fadeOut');
	    setTimeout( resolve(true), 100 );
	  });

	  destroy.then(function(){
	    core.events.publish("core:progressbar:finish");
	  }).catch(function(e){
	    throw new Error(e);
	  });
	};

	Progressbar.prototype.updateProgress = function() {
	  this.count++;
	  this.percent = parseFloat( this.count / this.total );
	  this.element.querySelector('.core-progressbar-bar').style.width = this.percent * 100 + '%';
	  // console.log( 'updateProgress', this.count, this.total, parseFloat( this.count / this.total )*100 );
	};
	Progressbar.prototype.updateRoot = function(html) {
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	};
	Progressbar.prototype.bindEvents = function() {
	  var progressbar = this;

	  document.addEventListener('DOMContentLoaded', function(){
	    core.events.subscribe("core:start:progressbar", function(){
	      console.log('core:start:progressbar');
	      // progressbar.start();
	    });

	    core.events.subscribe("core:progressbar:start", function(){
	      console.log('Progressbar <- core:progressbar:start');
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe("core:progressbar:build", function(template){
	      console.log('core:progressbar:template');
	      progressbar.start();
	    });

	    core.events.subscribe("core:template:progressbar", function(template){
	      console.log('core:template:progressbar', template);
	      progressbar.update(template);
	      progressbar.action();
	    });
	  });
	};
	module.exports = Progressbar;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./progressbar.js": 17
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 18;


/***/ },
/* 19 */
/***/ function(module, exports) {

	module.exports = function(){
	  document.addEventListener('DOMContentLoaded', function(){ 

	    core.events.subscribe("core:dom:build:ready", function(){
	      console.log('Core <- core:dom:build:ready');
	      core.events.publish("core:dom:attach:progressbar");
	      core.events.publish("core:preloader:start");
	    });

	    core.events.subscribe("core:preloader:finish", function(){
	      console.log('Core <- core:preloader:finish');
	      core.events.publish("core:dom:remove:progressbar");
	      core.events.publish("core:router:update");
	    });

	    core.events.subscribe( "core:template:load", function (template) {
	      core.worker.postMessage( [ 'template:load', template ] )
	    });

	    // загрузка всех отчетов
	    // core.events.subscribe( "core:reports:loaded", function (data) {
	    //   console.log( "core:reports:loaded", data );
	    //   core.worker.postMessage( [ 'reports:load', {} ] )
	    // });

	    // загрузка отчета по id
	    core.events.subscribe( "core:report:loaded", function (id) {
	      core.worker.postMessage( [ 'reports:id', id ] )
	    });

	    core.events.subscribe( "core:layout:template:ready", function (template) {
	      // console.log('layout: ', template);
	      core.events.publish('core:dom:build', template );
	    });


	    core.events.subscribe( "core:reports:load", function () {
	      console.log('Core <- core:reports:load' );
	      core.worker.postMessage( [ 'reports:load', '' ] );
	    });


	    core.events.subscribe( "core:criterias:load", function (template) {
	      console.log('Core <- core:criterias:load' );
	      core.worker.postMessage( [ 'criterias:load', '' ] );
	    });
	    core.events.subscribe( "core:criterias:loaded", function (template) {
	      console.log('Core <- core:criterias:loaded' );
	      core.events.publish( "core:preloader:task:ready" );
	    });



	    core.events.subscribe( "core:criteriaKeys:loaded", function (template) {
	      console.log('Core <- core:criteriaKeys:loaded' );
	      core.events.publish( "core:preloader:task:ready" );
	    });
	    core.events.subscribe( "core:criteriaKeys:load", function (template) {
	      console.log('Core <- core:criteriaKeys:load' );
	      core.worker.postMessage( [ 'criteriaKeys:load', '' ] );
	    });

	    core.events.subscribe('core:custom:load', function(){
	      var elements = [ 'layout', 'progressbar' ];

	      console.log( 'Core <- core:custom:load ' );
	      core.loadCustomElements( elements );
	      core.events.publish( "core:preloader:task:ready" );
	    });



	    // core.worker.postMessage( [ 'reports:all', {} ] );
	  }, false);
	}(window);

/***/ },
/* 20 */
/***/ function(module, exports) {

	"use strict";

	var ReportSettings = function(config){
	  this.current_date = new Date();
	  this.currentYear  = this.current_date.getFullYear();
	  this.periodStart  = this.current_date;
	  this.periodEnd    = this.current_date;
	  this.main         = this.current_date.getFullYear();
	  this.compare      = this.current_date.getFullYear()-1;
	  this.isYearReport = config.isYearReport || false;
	  this.isTemplate   = config.isTemplate || false;
	  this.isNew        = config.isNew || true;
	};

	var Report = function(config){
	  this.element     = {};
	  this._id         = config._id         || '';
	  this.name        = config.name        || '';
	  this.description = config.description || '';
	  this.author      = config.author;
	  this.providerId  = config.provider_id;
	  this.query       = {};
	  this.globalQuery = {};
	  this.settings    = new ReportSettings(config.settings);
	};
	Report.prototype.init = function(){

	  this.detachEvents();
	  this.attachEvents();
	  this.destroyEditor();
	  
	  
	  console.log( 'Report -> init' );

	  this.element = document.createElement('div');
	  core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	  core.events.publish("core:reports:editor:template");
	  core.events.publish("core:report:load", this._id );
	};
	Report.prototype.update = function(html){
	  console.log( 'Report -> update' );
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};
	Report.prototype.load = function(){
	  console.log( 'Report -> bindEvents' );
	};
	Report.prototype.detachEvents = function(){
	  core.events.remove("core:template:reports:editor");
	  core.events.remove("core:report:loaded");
	};
	Report.prototype.destroyEditor = function() {
	  if ($('div#paper').data('froala.editor')) {
	    $('div#paper').froalaEditor('destroy');
	  }
	};

	Report.prototype.loadEditor = function(body) {
	  var html = core.utils.Base64.decode(body);

	  var initialize = new Promise(function(resolve, reject) {
	    window.jQuery('div#paper').froalaEditor({
	      toolbarButtons   : ['file-o', 'floppy-o', 'adjust', 'phone',  'textRotate', 'calculator', '|', 'bold', 'italic', 'underline', 'fontSize', '|', 'color', /*'paragraphStyle'*/ , '|', 'paragraphFormat', '|', 'alignLeft', 'alignCenter', 'alignRight', '|', /*'formatOL'*/, 'formatUL', '|', 'outdent', 'indent', '|', 'insertImage', 'insertTable', '|', 'html', '|', 'undo', 'redo', '|', /*'cog', 'rotateDocument' */, 'customCalculationCell'/*, '|', 'zoom-out', 'zoom-in'*/ ],
	      language         : 'ru',
	      charCounterCount : false,
	      toolbarSticky    : false
	    });
	    resolve(true);
	  });

	  initialize.then(function(editor) {
	    $('div#paper').froalaEditor('html.set', (html ? html : '<p>') + '<p>');
	  }).then(function(editor) {
	    // var parent = document.querySelector('.fr-wrapper').parentNode;
	    // parent.removeChild( document.querySelector('.fr-wrapper').nextSibling ) ;
	    // return editor;
	  }).catch(function(result) {

	    console.log("ERROR!", result);
	  });

	};
	Report.prototype.loadEditors = function(body) {
	  var html = core.utils.Base64.decode(body);
	  console.log( 'decoded:', html );
	}


	Report.prototype.attachEvents = function(){
	  var report = this;
	  
	  core.events.subscribe("core:template:reports:editor", function(template){
	    report.update( template.raw );
	  });
	  
	  core.events.subscribe("core:report:loaded", function(data){
	    report.loadEditor( data.raw.body );
	  });
	  
	};
	Report.prototype.render = function(){
	  console.log( 'Report -> render', this );

	  var helper = {
	    '_id': {
	      text: function (params) {
	        return this._id || '-_id-';
	      }
	    },
	    'name': {
	      text: function (params) {
	        return this.name || '-name-';
	      }
	    },
	    'description': {
	      text: function (params) {
	        return this.description || '-description-';
	      }
	    },
	    'providerId': {
	      text: function (params) {
	        return this.providerId || '-providerId-';
	      }
	    },
	    'query': {
	      text: function (params) {
	        return this.query || '-query-';
	      }
	    },
	    'globalQuery': {
	      text: function (params) {
	        return this.globalQuery || '-globalQuery-';
	      }
	    }
	  };

	  Transparency.render( this.element.querySelector('#report'), this, helper );
	};


	var Reports = function(){
	  this.element   = {};
	  this.documents = {};
	  this.bindEvents();
	};
	Reports.prototype.Report = Report;
	Reports.prototype.init = function(){
	  core.events.publish( "[ + ] core:reports:init" );

	  this.element = document.createElement('div');
	  core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	  
	  core.events.publish("core:reports:template");
	};
	Reports.prototype.bindEvents = function(){
	  var reports = this;

	  document.addEventListener('DOMContentLoaded', function(){
	    core.events.subscribe("core:reports:loaded", function(rawData){
	      // console.log( 'RAW REPORTS', rawData );
	      for (var type in rawData ) {
	        var data = rawData[type];

	        // console.log( '***++', type, rawData.raw[type] );
	        
	        for (var i = data.length - 1; i >= 0; i--) {
	          var _d = data[i];
	          var report = {
	            _id         : _d._id,
	            name        : _d.name,
	            description : _d.description,
	            update_at   : _d.updated_at,
	            
	            author : {
	              id   : _d.author_id,
	              name : _d.author_id
	            },

	            providerId  : _d.provider_id,

	            query       : _d.query,
	            globalQuery : _d.globalQuery,

	            settings : {
	              periodStart  : _d.periodStart,
	              periodEnd    : _d.periodEnd,
	              main         : _d.main,
	              compare      : _d.compare,
	              isYearReport : _d.yearReport,
	              isTemplate   : _d.template,
	              providerSelected : _d.providerSelected
	            }
	          };
	          reports.add( type, report );
	          
	          core.events.publish("core:card:add", {
	            type:type,
	            report:report
	          });
	        }
	      }
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe("core:reports:start", function( template ){
	      console.log('Reports <- core:reports:start');
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe("core:template:reports", function( template ){
	      reports.updateRootElement( template.raw );
	    });

	    // клик по меню с документами
	    core.events.subscribe("core:reports:menu:select", function( menuItem ){
	      console.log( 'Reports <- core:reports:menu:select', menuItem );
	      core.events.publish( "core:router:default" );
	    });

	  });
	};
	Reports.prototype.updateRootElement = function(html){
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};

	Reports.prototype.render = function(){
	  if ( !Object.keys(this.documents).length ){
	    return false;
	  }

	  for (var type in this.documents) {
	    // console.log( 'render -> type, documents', type,this.element.querySelector('.'+type),   this.documents[type] );
	    var helper = {
	      type: {
	        text: function (params) {
	          return this.type;
	        }
	      }
	    };
	    helper[type] = {
	        '_id': {
	          text: function (params) {
	            return this._id || '-id-';
	          }
	        },
	        name: {
	          text: function (params) {
	            return this.name || '-name-';
	          }
	        },
	        link: {
	          href: function (params) {
	            return '#reports/' + this._id;
	          }
	        }
	    };

	    var config = {
	      type: type
	    };
	    config[type] = this.documents[type];

	    Transparency.render( this.element.querySelector('.report-'+type), config, helper );
	  }
	};

	Reports.prototype.add = function( type, config ) {

	  if ( !this.documents.hasOwnProperty(type) ) {
	    this.documents[type] = [];
	  }

	  this.documents[type].push( new this.Report(config) );
	};
	Reports.prototype.clear = function(config) {
	  this.documents = {};
	};
	Reports.prototype.find = function(id) {
	  for (var type in this.documents) {
	    for (var i = this.documents[type].length - 1; i >= 0; i--) {
	      if( this.documents[type][i]._id === id ){
	        return this.documents[type][i];
	      }
	    }
	  }
	};

	Reports.prototype.show = function(id) {
	  console.log( 'Reports: show -> ', id);
	  var report = this.find(id);
	  if ( report ) {
	    report.init();
	  } else {
	    throw new Error('template not found!');
	  }
	};

	Reports.prototype.start = function() {
	  console.log( 'Reports: start' );
	  this.init();
	};
	Reports.prototype.stop = function() {
	  console.log( 'Reports: stop' );
	};
	Reports.prototype.destroy = function() {
	  console.log( 'Reports: destroy' );
	  this.element = [];
	};

	module.exports = Reports;

/***/ }
/******/ ]);