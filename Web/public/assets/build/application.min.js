/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	core = (function(){
	  var Mediator   = __webpack_require__(1),
	      WebWorker  = __webpack_require__(4),
	      Utils      = __webpack_require__(5),
	      Dom        = __webpack_require__(7),
	      Element    = __webpack_require__(34),
	      
	      Draggy     = __webpack_require__(27),
	      Preloader  = __webpack_require__(8),
	      Router     = __webpack_require__(9),
	      Snackbar   = __webpack_require__(11),
	      Templates  = __webpack_require__(12),
	      Reports    = __webpack_require__(13),
	      WebForms   = __webpack_require__(14),
	      PrintForms = __webpack_require__(15),
	      User       = __webpack_require__(54),
	      Bps        = __webpack_require__(16);

	  var Core = function( config ){
	    this.events   = new Mediator();
	    this.worker   = new WebWorker();
	    this.utils    = new Utils();
	    this.dom      = new Dom();
	    this.elements = new Element();

	    this.modules  = {
	      'preloader'   : new Preloader(),
	      'router'      : new Router(),
	      'snackbar'    : new Snackbar(),
	      'templates'   : new Templates(),
	      'reports'     : new Reports(),
	      'web-forms'   : new WebForms(),
	      'print-forms' : new PrintForms(),
	      'bps'         : new Bps(),
	      'drag'        : new Draggy(),
	      'user'        : new User(),
	    };

	    // какой модуль активный в данный момент
	    this.current  = {};
	    this.debug    = true;

	    this.bindEvents();
	  };

	  Core.prototype.bindEvents = function() {
	    __webpack_require__(17);
	  };

	  Core.prototype.setCurrent = function( module ) {
	    this.current = module;
	  };

	  Core.prototype.start = function(module) {
	  };

	  Core.prototype.destroy = function(module) {
	    this.events.publish( "core:destroy:" + module );
	  };
	  
	  Core.prototype.build = function(module) {
	  };

	  Core.prototype.startAll = function() {
	    console.log('core:startAll');
	    this.events.publish("core:dom:build:application")
	    // setTimeout( core.events.publish("core:preloader:start"), 100 );
	  };
	  Core.prototype.destroyAll = function() {
	    this.events.publish("core:destroy:all");
	  };

	  return new Core();
	})();


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var Channel = __webpack_require__(2);
	var Subscriber = __webpack_require__(3);

	var Mediator = function() {
	  if (!(this instanceof Mediator)) {
	    return new Mediator();
	  }

	  this._channels = new Channel('');
	}
	Mediator.prototype.getChannel = function(namespace, readOnly) {
	  var channel = this._channels,
	      namespaceHierarchy = namespace.split(':'),
	      x = 0,
	      y = namespaceHierarchy.length;

	  if (namespace === '') {
	    return channel;
	  }

	  if (namespaceHierarchy.length > 0) {
	    for(x, y; x < y; x++) {

	      if (!channel.hasChannel(namespaceHierarchy[x])) {
	        if (readOnly) {
	          break;
	        } else {
	          channel.addChannel(namespaceHierarchy[x]);
	        }
	      }

	      channel = channel.returnChannel(namespaceHierarchy[x]);
	    }
	  }

	  return channel;
	}
	Mediator.prototype.subscribe = function(channelName, fn, options, context) {
	  var channel = this.getChannel(channelName || "", false);

	  options = options || {};
	  context = context || {};

	  return channel.addSubscriber(fn, options, context);
	}
	Mediator.prototype.once = function(channelName, fn, options, context) {
	  options = options || {};
	  options.calls = 1;

	  return this.subscribe(channelName, fn, options, context);
	}
	Mediator.prototype.getSubscriber = function(identifier, channelName) {
	  var channel = this.getChannel(channelName || "", true);
	  
	  
	  if (channel.namespace !== channelName) {
	    return null;
	  }

	  return channel.getSubscriber(identifier);
	}
	Mediator.prototype.remove = function(channelName, identifier) {
	  var channel = this.getChannel(channelName || "", true);
	  if (channel.namespace !== channelName) {
	    return false;
	  }

	  channel.removeSubscriber(identifier);
	}
	Mediator.prototype.publish = function(channelName) {
	  var channel = this.getChannel(channelName || "", true);
	  if (channel.namespace !== channelName) {
	    return null;
	  }

	  var args = Array.prototype.slice.call(arguments, 1);

	  args.push(channel);

	  channel.publish(args);
	}
	Mediator.prototype.on = Mediator.prototype.subscribe;
	Mediator.prototype.bind = Mediator.prototype.subscribe;
	Mediator.prototype.emit = Mediator.prototype.publish;
	Mediator.prototype.trigger = Mediator.prototype.publish;
	Mediator.prototype.off = Mediator.prototype.remove;

	Mediator.Channel = Channel;
	Mediator.Subscriber = Subscriber;

	module.exports = Mediator

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var Subscriber = __webpack_require__(3);

	var Channel = function(namespace, parent) {
	  if (!(this instanceof Channel)) {
	    return new Channel(namespace);
	  }

	  this.namespace = namespace || "";
	  this._subscribers = [];
	  this._channels = {};
	  this._parent = parent;
	  this.stopped = false;
	}
	Channel.prototype.addSubscriber = function(fn, options, context) {
	  var subscriber = new Subscriber(fn, options, context);

	  if (options && options.priority !== undefined) {
	    
	    
	    
	    options.priority = options.priority >> 0;

	    if (options.priority < 0) { options.priority = 0; }
	    if (options.priority >= this._subscribers.length) { options.priority = this._subscribers.length-1; }

	    this._subscribers.splice(options.priority, 0, subscriber);
	  }else{
	    this._subscribers.push(subscriber);
	  }

	  subscriber.channel = this;

	  return subscriber;
	}
	Channel.prototype.stopPropagation = function() {
	  this.stopped = true;
	}
	Channel.prototype.getSubscriber = function(identifier) {
	  var x = 0,
	      y = this._subscribers.length;

	  for(x, y; x < y; x++) {
	    if (this._subscribers[x].id === identifier || this._subscribers[x].fn === identifier) {
	      return this._subscribers[x];
	    }
	  }
	}
	Channel.prototype.setPriority = function(identifier, priority) {
	  var oldIndex = 0,
	      x = 0,
	      sub, firstHalf, lastHalf, y;

	  for(x = 0, y = this._subscribers.length; x < y; x++) {
	    if (this._subscribers[x].id === identifier || this._subscribers[x].fn === identifier) {
	      break;
	    }
	    oldIndex ++;
	  }

	  sub = this._subscribers[oldIndex];
	  firstHalf = this._subscribers.slice(0, oldIndex);
	  lastHalf = this._subscribers.slice(oldIndex+1);

	  this._subscribers = firstHalf.concat(lastHalf);
	  this._subscribers.splice(priority, 0, sub);
	}
	Channel.prototype.addChannel = function(channel) {
	  this._channels[channel] = new Channel((this.namespace ? this.namespace + ':' : '') + channel, this);
	}
	Channel.prototype.hasChannel = function(channel) {
	  return this._channels.hasOwnProperty(channel);
	}
	Channel.prototype.returnChannel = function(channel) {
	  return this._channels[channel];
	}
	Channel.prototype.removeSubscriber = function(identifier) {
	  var x = this._subscribers.length - 1;

	  
	  if (!identifier) {
	    this._subscribers = [];
	    return;
	  }

	  
	  for(x; x >= 0; x--) {
	    if (this._subscribers[x].fn === identifier || this._subscribers[x].id === identifier) {
	      this._subscribers[x].channel = null;
	      this._subscribers.splice(x,1);
	    }
	  }
	}
	Channel.prototype.publish = function(data) {
	  var x = 0,
	      y = this._subscribers.length,
	      shouldCall = false,
	      subscriber, l,
	      subsBefore,subsAfter;

	  for(x, y; x < y; x++) {
	    
	    shouldCall = false;
	    subscriber = this._subscribers[x];

	    if (!this.stopped) {
	      subsBefore = this._subscribers.length;
	      if (subscriber.options !== undefined && typeof subscriber.options.predicate === "function") {
	        if (subscriber.options.predicate.apply(subscriber.context, data)) {
	          
	          shouldCall = true;
	        }
	      }else{
	        shouldCall = true;
	      }
	    }

	    
	    if (shouldCall) {
	      if (subscriber.options && subscriber.options.calls !== undefined) {
	        
	        subscriber.options.calls--;
	        
	        if (subscriber.options.calls < 1) {
	          this.removeSubscriber(subscriber.id);
	        }
	      }
	      
	      
	      subscriber.fn.apply(subscriber.context, data);

	      subsAfter = this._subscribers.length;
	      y = subsAfter;
	      if (subsAfter === subsBefore - 1) {
	        x--;
	      }
	    }
	  }

	  if (this._parent) {
	    this._parent.publish(data);
	  }

	  this.stopped = false;
	}

	module.exports = Channel;

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";


	var Subscriber = function(fn, options, context) {
	  if (!(this instanceof Subscriber)) {
	    return new Subscriber(fn, options, context);
	  }

	  this.id = this.guidGenerator();
	  this.fn = fn;
	  this.options = options;
	  this.context = context;
	  this.channel = null;
	}
	Subscriber.prototype.guid = function(options) {
	  return ( ( ( 1 + Math.random() ) * 0x10000)   | 0 ).toString(16).substring(1);
	}
	Subscriber.prototype.guidGenerator = function(options) {
	  var S4 = this.guid;
	  return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
	}
	Subscriber.prototype.update = function(options) {
	  if (options) {
	    this.fn = options.fn || this.fn;
	    this.context = options.context || this.context;
	    this.options = options.options || this.options;
	    if (this.channel && this.options && this.options.priority !== undefined) {
	        this.channel.setPriority(this.id, this.options.priority);
	    }
	  }
	} 

	module.exports = Subscriber

/***/ },
/* 4 */
/***/ function(module, exports) {

	var WebWorker = function(){
	  this.worker = new Worker("assets/js/core/worker/worker.js");
	  this.worker.onmessage = function( e ) {
	    // console.log('FROM WORKER: ', e.data);
	    var data = e.data;
	    for (var key in data) {
	      if (data.hasOwnProperty(key)) {
	        // data[key];
	        switch (key) {
	          case 'template:loaded':
	            var templateName = Object.keys( data[key] )[0],
	                data         = data[key][templateName];
	            
	            core.events.publish("core:template:loaded", {
	              name : templateName,
	              raw  : data
	            });
	            
	            break;
	          case 'reports:loaded':
	            // core.events.publish("core:reports:loaded", {
	            //   raw: JSON.parse( data[key] )
	            // });
	            console.log( 'reports:loaded --> ', data[key] );
	            core.events.publish("core:reports:loaded", data[key] );
	            break;
	          case 'report:loaded':
	            console.log( 'report:loaded --> ');
	            core.events.publish("core:report:loaded", {
	              raw: data[key]
	            });
	            break;
	          case 'criterias:loaded':
	            core.events.publish("core:criterias:loaded", data[key] );
	            break;
	          case 'criteriaKeys:loaded':
	            core.events.publish("core:criteriaKeys:loaded", data[key] );
	            break;
	          case 'print-forms:loaded':
	            core.events.publish("core:print-forms:loaded", data[key] );
	            break;
	          case 'web-forms:loaded':
	            core.events.publish("core:web-forms:loaded", data[key] );
	            break;
	          case 'web-form:loaded':
	            console.log( 'web-form:loaded --> '/*, data[key]*/);
	            core.events.emit("core:web-form:ready", data[key] );
	            break;
	          case 'bps:loaded':
	            core.events.publish("core:bps:loaded", data[key] );
	            break;
	          default:
	            console.log('default');
	            break;
	        }

	      }
	    }
	  };
	  return this.worker;
	}; 
	module.exports = WebWorker;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var Base64 = __webpack_require__(6);

	var Utils = function(){
	  this.element = [];
	};
	Utils.prototype.Base64 = new Base64();

	Utils.prototype.merge = function (from, to) {
	  var result = {};

	  for ( var key in from ) {
	    if ( from.hasOwnProperty(key) ) {
	      if ( !result.hasOwnProperty(key) ) {
	        result[key] = from[key]
	      };
	    }
	  }
	  for (var key in to) {
	    if (to.hasOwnProperty(key)) {
	      if ( !result.hasOwnProperty(key) ) {
	        result[key] = to[key]
	      };
	    }
	  }
	  return result;
	}

	Utils.prototype.request = function( type, url, data, callback ) {
	  var request = new XMLHttpRequest();
	  request.open( type.toUpperCase(), url, true);

	  request.onload = function() {
	    if ( this.status >= 200 && this.status < 400 ) {
	      callback( this.response );
	    } else {
	      callback( new Error( this.response ) );
	    }
	  };

	  request.onerror = function() {
	    callback( new Error( this.response ) );
	  };

	  request.send();
	};
	Utils.prototype.log = function(msg, color) {
	  var color = color || "black";
	  var background = "White";

	  switch (color) {
	      case "success":
	        color      = "Green";
	        background = "LimeGreen";
	        break;
	      case "info":
	        color      = "DodgerBlue";
	        background = "Turquoise";
	        break;
	      case "error":
	        color      = "Red";
	        background = "Black";
	        break;
	      case "start":
	        color      = "OliveDrab";
	        background = "PaleGreen";
	        break;
	      case "warning":
	        color      = "Tomato";
	        background = "Black";
	        break;
	      case "end":
	        color      = "Orchid";
	        background = "MediumVioletRed";
	        break;
	      default:
	        color = color;
	        break;
	    };

	  if ( typeof msg == "object" ) {
	      console.log(msg);
	  } else if ( typeof color == "object" ) {
	      console.log("%c" + msg, "color: PowderBlue;font-weight:bold; background-color: RoyalBlue;");
	      console.log(color);
	  } else {
	      console.log("%c" + msg, "color:" + color + ";font-weight:bold; background-color: " + background + ";");
	  }
	};
	Utils.prototype.get = function( url, data, callback ) {
	  this.request( 'get', url, data, callback );
	};
	Utils.prototype.post = function( url, data, callback ) {
	  this.request( 'post', url, data, callback );
	};
	Utils.prototype.put = function( url, data, callback ) {
	  this.request( 'put', url, data, callback );
	};
	Utils.prototype.delete = function( url, data, callback ) {
	  this.request( 'delete', url, data, callback );
	};

	Utils.prototype.extend = function() {
	  for (var i = 1; i < arguments.length; i++) {
	    for (var key in arguments[i]) {
	      if (arguments[i].hasOwnProperty(key)) {
	        arguments[0][key] = arguments[i][key];
	      }
	    }
	  }
	  return arguments[0];
	}
	Utils.prototype.generateId = function() {
	  return Math.floor( Math.random() * Math.pow(2,32) ).toString(10);
	};
	Utils.prototype.toCamelCase = function ( string ){
	  return string.replace(/[^A-Za-z0-9]/g, ' ').replace(/^\w|[A-Z]|\b\w|\s+/g, function (match, index) {
	    if ( +match === 0 || match === '-' || match === '.' ) {
	      return "";
	    }
	    return index === 0 ? match.toLowerCase() : match.toUpperCase();
	  });
	};

	Utils.prototype.start = function() {
	  console.log( 'Utils: start' );
	};
	Utils.prototype.stop = function() {
	  console.log( 'Utils: stop' );
	};
	Utils.prototype.destroy = function() {
	  console.log( 'Utils: destroy' );
	  this.element = [];
	};

	 module.exports = Utils;

/***/ },
/* 6 */
/***/ function(module, exports) {

	var Base64 = function(string){
	  this.b64tab = {};

	  this.b64tabPopulate();
	  return this;
	};
	Base64.prototype.b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	Base64.prototype.b64tabPopulate = function() {
	  var bin = this.b64chars;
	  for (var i = 0, l = bin.length; i < l; i++){
	    this.b64tab[bin.charAt(i)] = i
	  };
	  return this;
	};

	Base64.prototype.fromCharCode = String.fromCharCode;

	Base64.prototype.cb_utob = function(c) {
	  if (c.length < 2) {
	      var cc = c.charCodeAt(0);
	      return cc < 0x80 ? c
	          : cc < 0x800 ? (this.fromCharCode(0xc0 | (cc >>> 6))
	                        + this.fromCharCode(0x80 | (cc & 0x3f)))
	          : ( this.fromCharCode(0xe0 | ((cc >>> 12) & 0x0f) )
	            + this.fromCharCode(0x80 | ((cc >>>  6) & 0x3f) )
	            + this.fromCharCode(0x80 | ( cc         & 0x3f)));
	  } else {
	    var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);
	    
	    return (this.fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
	          + this.fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
	          + this.fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
	          + this.fromCharCode(0x80 | ( cc         & 0x3f)));
	  }
	};
	Base64.prototype.re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;

	Base64.prototype.utob = function(u) {
	  return u.replace(this.re_utob, this.cb_utob.bind(this));
	};
	Base64.prototype.cb_encode = function(ccc) {
	    var b64chars = this.b64chars;
	    var padlen = [0, 2, 1][ccc.length % 3],
	    ord = ccc.charCodeAt(0) << 16
	        | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
	        | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
	    chars = [
	        b64chars.charAt( ord >>> 18),
	        b64chars.charAt((ord >>> 12) & 63),
	        padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
	        padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
	    ];
	    return chars.join('');
	};
	Base64.prototype.btoa = function(b) {
	  return b.replace(/[\s\S]{1,3}/g, this.cb_encode.bind(this) )
	};
	Base64.prototype._encode = function (u) {
	  return this.btoa( this.utob(u) );
	};
	Base64.prototype.encodeURI = function(u) {
	  return this.encode(u, true)
	};
	// decoder stuff
	Base64.prototype.re_btou = new RegExp([
	    '[\xC0-\xDF][\x80-\xBF]',
	    '[\xE0-\xEF][\x80-\xBF]{2}',
	    '[\xF0-\xF7][\x80-\xBF]{3}'
	].join('|'), 'g');

	Base64.prototype.cb_btou = function(cccc) {
	    switch(cccc.length) {
	    case 4:
	        var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
	            |    ((0x3f & cccc.charCodeAt(1)) << 12)
	            |    ((0x3f & cccc.charCodeAt(2)) <<  6)
	            |     (0x3f & cccc.charCodeAt(3)),
	        offset = cp - 0x10000;
	        return (this.fromCharCode((offset  >>> 10) + 0xD800)
	                + this.fromCharCode((offset & 0x3FF) + 0xDC00));
	    case 3:
	        return this.fromCharCode(
	            ((0x0f & cccc.charCodeAt(0)) << 12)
	                | ((0x3f & cccc.charCodeAt(1)) << 6)
	                |  (0x3f & cccc.charCodeAt(2))
	        );
	    default:
	        return  this.fromCharCode(
	            ((0x1f & cccc.charCodeAt(0)) << 6)
	                |  (0x3f & cccc.charCodeAt(1))
	        );
	    }
	};
	Base64.prototype.btou = function(b) {
	  return b.replace(this.re_btou, this.cb_btou.bind(this) );
	};
	Base64.prototype.cb_decode = function(cccc) {
	  var len = cccc.length,
	  padlen = len % 4,
	  n = (len > 0   ? this.b64tab[cccc.charAt(0)] << 18 : 0)
	      | (len > 1 ? this.b64tab[cccc.charAt(1)] << 12 : 0)
	      | (len > 2 ? this.b64tab[cccc.charAt(2)] <<  6 : 0)
	      | (len > 3 ? this.b64tab[cccc.charAt(3)]       : 0),
	  chars = [
	      this.fromCharCode( n >>> 16),
	      this.fromCharCode((n >>>  8) & 0xff),
	      this.fromCharCode( n         & 0xff)
	  ];
	  chars.length -= [0, 0, 2, 1][padlen];
	  return chars.join('');
	};
	Base64.prototype.atob = function(a) {
	  return a.replace( /[\s\S]{1,4}/g, this.cb_decode.bind(this) );
	};
	Base64.prototype._decode = function( string ) {
	  return this.btou( this.atob( string ) );
	};
	Base64.prototype.replacer = function(char) {
	  console.log( 'replacer -> char:', char );
	  return char == '-' ? '+' : '/'
	}
	Base64.prototype.decode = function(string){
	  var str = String( string ).replace( /[-_]/g, this.replacer ).replace(/[^A-Za-z0-9\+\/]/g, '');
	  return this._decode( str );
	};
	Base64.prototype.encode = function( string, urisafe) {
	  return !urisafe ? this._encode(String( string )) : this._encode(String( string )).replace( /[+\/]/g, this.replacer ).replace(/=/g, '');
	};

	module.exports = Base64

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';

	var Dom = function () {
	  this.root         = document;
	  this.application  = {};
	  this.editor       = {};
	  this.snackbar     = {};
	  this.splashscreen = {};

	  this.bindEvents();
	};

	Dom.prototype.bindEvents = function () {
	  var dom = this;

	  document.addEventListener('DOMContentLoaded', function () {
	    
	    core.events.on('core:start:all', function () {
	      console.log('core  > dom > bindEvents > core:start:all');
	      manager.start();
	    }, { priority: 0 });

	    core.events.on('core:dom:application:clear', function () {
	      dom.leftPanel.element.innerHTML = '';
	      dom.content.element.innerHTML   = '';
	      dom.infoPanel.element.innerHTML = '';
	    });
	    
	    core.events.on( "core:dom:content:wrapper:show", function () {
	      dom.wrapper.element.classList.remove('content-wrapper-hide');
	    });
	    core.events.on( "core:dom:content:wrapper:hide", function () {
	      dom.wrapper.element.classList.add('content-wrapper-hide');
	    });

	    core.events.on('core:dom:infoPanel:clear', function () {
	      dom.infoPanel.element.innerHTML = '';
	    });

	    core.events.on('core:dom:infoPanel:hide', function () {
	      dom.hideInfoPanel();
	    });

	    core.events.on('core:dom:infoPanel:show', function () {
	      dom.showInfoPanel();
	    });

	    core.events.on('core:dom:infoPanel:set', function ( _root ) {
	      dom.infoPanel.element.appendChild( _root.element );
	    });

	    core.events.on('core:dom:content:set', function ( _root ) {
	      dom.content.element.appendChild( _root.element );
	    });

	    core.events.on('core:dom:content:clear', function () {
	      dom.content.element.innerHTML = '';
	    });

	    core.events.on('core:dom:leftPanel:clear', function () {
	      dom.leftPanel.element.innerHTML = '';
	    });

	    core.events.on('core:dom:leftPanel:hide', function () {
	      dom.hideleftPanel();
	    });

	    core.events.on('core:dom:leftPanel:show', function () {
	      dom.showleftPanel();
	    });

	    core.events.on('core:dom:leftPanel:set', function ( _root ) {
	      dom.leftPanel.element.appendChild( _root.element );
	    });


	    core.events.on('core:dom:material:update', function () {
	      componentHandler.upgradeAllRegistered();
	    });

	    core.events.on('core:dom:user:ready', function ( user ) {
	      dom.setUserName(user);
	    });

	    core.events.on('core:dom:set:title', function ( title ) {
	      dom.setTitle(title);
	    });

	    // core.events.emit( "core:dom:clear" );

	    core.events.on('core:dom:build:application', function () {
	      console.log('Dom <- core:dom:build:application');
	      dom.build();
	    });

	    core.events.on('core:dom:application:show', function () {
	      console.log( ' Dom <- core:dom:application:show' );
	      // core.dom.application.application.showCards();
	    });

	    core.events.on('core:dom:application:hide', function () {
	      console.log( ' Dom <- core:dom:application:hide' );
	      // core.dom.application.application.hideCards();
	    });

	    core.events.on('core:dom:attach:progressbar', function () {
	      console.log( '* Dom <- core:dom:attach:progressbar' );
	      dom.splashscreen.element.style.display = 'block';
	    });

	    core.events.on('core:dom:remove:progressbar', function () {
	      console.log( '* Dom <- core:dom:remove:progressbar' );
	      
	      setTimeout( function () {
	        dom.splashscreen.element.style.display = 'none';
	        dom.application.style.display  = 'block';
	        core.events.emit("core:router:update");
	        dom.removeProgressBar();
	      }, 500);

	    });

	    core.events.on('core:dom:editor:show', function () {
	      console.log( ' Dom <- core:dom:editor:show' );
	    });
	    core.events.on('core:dom:editor:hide', function () {
	      console.log( ' Dom <- core:dom:editor:hide' );
	    });

	    core.events.on('core:dom:set:title', function (title) {
	      console.log( ' Dom <- core:dom:set:title' );
	      // core.dom.application.application.setAttribute('caption', title);
	    });

	    core.events.on('core:dom:splashscreen:progress:set', function (percent) {
	      console.log( ' Dom <- core:dom:splashscreen:progress:set', percent );
	      try {
	        dom.progressbar.element.MaterialProgress.setProgress(percent);
	      } catch(e) {
	        console.log(e);
	      }
	    });
	  }, false);
	};

	Dom.prototype.build = function () {
	  console.log('Dom :: build application');
	  // this.editor = document.querySelector('#editor');


	  // Прелоадер
	  this.createProgressBar();
	  
	  // Инициализация прилодульки
	  this.createApplication();

	  // Главное меню
	  this.createHeader();

	  // Боковое меню
	  this.createDrawer();

	  // Сама приложулька
	  this.createApplicationContent();
	  
	  // Футер
	  this.createFooter();

	  // Загрузочный экран для документов
	  this.createContentWrapper();

	  setTimeout( core.events.emit('core:dom:build:ready') ,1000);
	};



	/* Application */
	Dom.prototype.createApplication = function(){
	  
	  var application = core.elements.create({
	    elementType: 'simple',
	    class: ["mdl-layout", "mdl-js-layout", "mdl-layout--fixed-header", "animated"],
	  });
	  
	  this.application = application.element;
	};

	Dom.prototype.createApplicationContent = function(){
	  this.leftPanel = core.elements.create({
	    elementType: 'simple',
	    class : ["mdl-cell", "mdl-cell--2-col", "page-content-panel-animation", "content-leftPanel", "mdl-cell--hide-tablet", "mdl-cell--hide-phone"]
	  });
	  this.content = core.elements.create({
	    elementType: 'simple',
	    // mdl-color--white mdl-shadow--4dp content mdl-color-text--grey-800 mdl-cell mdl-cell--8-col
	    class : ["mdl-cell", "mdl-cell--8-col", "page-content-panel-animation", "content-content"]
	  });
	  this.infoPanel = core.elements.create({
	    elementType: 'simple',
	    class : ["mdl-cell", "mdl-cell--2-col", "page-content-panel-animation", "content-infoPanel"]
	  });

	  this.grid = core.elements.create({
	    elementType: 'simple',
	    class : ["mdl-grid"],
	    items : [
	      this.leftPanel,
	      this.content,
	      this.infoPanel
	    ]
	  });

	  this.pageContent = core.elements.create({
	    elementType: 'simple',
	    class : [ "page-content", "app-container-grid", "mdl-shadow--4dp" ],
	    items : [
	      this.grid,
	    ]
	  });

	  this.main = core.elements.create({
	    elementType: 'simple',
	    type  : 'main',
	    class : [ "app-main-ribbon-offset", "mdl-layout__content", "core-layout-offset"],
	    items : [
	      this.pageContent,
	    ]
	  });

	  this.application.appendChild( this.main.element );
	  document.body.appendChild( this.application );
	};

	Dom.prototype.createContentWrapper = function(){
	  this.wrapper = core.elements.create({
	    elementType: 'simple',
	    class: [ "content-wrapper", "content-wrapper-hide" ],
	    items : [
	      core.elements.create({
	        elementType: 'simple',
	        class : [ "wrapper-top", "mdl-spinner", "mdl-js-spinner", "is-active" ],
	      }),
	    ]
	  });

	  var box = this.grid.element.getBoundingClientRect();


	  this.wrapper.element.style.position = 'absolute';
	  this.wrapper.element.style.left = box.left + 'px';
	  this.wrapper.element.style.width = box.width + 'px';

	  console.log( box, this.wrapper );

	  this.grid.element.appendChild( this.wrapper.element );
	}

	/* ProgressBar */
	Dom.prototype.createProgressBar = function(){

	  this.logo = core.elements.create({
	    elementType: 'simple',
	    class : [ "mdl-typography--text-center", "mdl-cell", "mdl-cell--12-col", "mdl-cell--bottom" ],
	    items : [
	      core.elements.create({
	        elementType: 'icon',
	        icon: 'work'
	      })
	    ]
	  });

	  this.progressbar = core.elements.create({
	    elementType: 'simple',
	    class : [ "mdl-cell", "mdl-cell--12-col-phone", "mdl-cell--6-col-desktop", "mdl-cell--3-offset-desktop", "mdl-progress", "mdl-js-progress" ]
	  });

	  this.splashscreen = core.elements.create({
	    elementType: 'simple',
	    class : [ "mdl-grid", "animated", "core-splashscreen-fixed" ],
	    items : [
	      this.logo,
	      this.progressbar
	    ]
	  });

	  this.splashscreen.element.style.display = 'none';
	  document.body.appendChild( this.splashscreen.element );
	};
	Dom.prototype.removeProgressBar = function(){

	  core.events.remove('core:dom:attach:progressbar');
	  core.events.remove('core:dom:remove:progressbar');
	  core.events.remove('core:dom:splashscreen:progress:set');

	  
	  this.splashscreen.element.remove();

	  delete this.logo;
	  delete this.progressbar;
	  delete this.splashscreen;
	};

	/* MainMenu */
	Dom.prototype.createHeader = function(){
	  
	  this.title = core.elements.create({
	    elementType : 'simple',
	    type        : 'span',
	    class       : ["mdl-layout-title"],
	    text : 'Конструктор отчетов',
	  });

	  this.subTitle = core.elements.create({
	    elementType: 'simple',
	    class: ['mdl-navigation'],
	    items : [
	      
	    ]
	  });

	  this.search = core.elements.create({
	    elementType: 'search',
	  });

	  this.navigation = core.elements.create({
	    elementType : 'simple',
	    type        : 'nav',
	    class       : ["mdl-navigation", /*"mdl-layout--large-screen-only"*/],
	    // для теста
	    // items       : [
	    //   core.elements.create( {
	    //     elementType : 'menu',
	    //     position    : 'right',
	    //     icon: 'star',
	    //     fab: true,
	    //     color: true,
	    //     items: [
	    //       {
	    //         text: 'lol'
	    //       },
	    //       {
	    //         text: 'lol'
	    //       }
	    //     ]
	    //   })
	    // ]
	  });

	  this.header = core.elements.create({
	    elementType : 'simple',
	    type        : 'header',
	    class       : ["mdl-layout__header", "core-fixed", "mdl-color--grey-100", "mdl-color-text--grey-800"],
	    items : [
	      core.elements.create({
	        elementType: 'simple',
	        class: ["mdl-layout__header-row", "mdl-layout__header-row--primary" ],
	        items : [
	          this.title,
	          core.elements.create({ elementType: 'spacer' }),
	          this.navigation,
	        ]
	      }),
	      core.elements.create({
	        elementType: 'simple',
	        class: ["mdl-layout__header-row", "mdl-layout__header-row--secondary", "mdl-color--grey-50" ],
	        items : [
	          this.subTitle,
	          core.elements.create({ elementType: 'spacer' }),
	          core.elements.create({
	            elementType: 'simple',
	            class: ['mdl-navigation'],
	            items : [
	              core.elements.create({
	                elementType: 'button',
	                class: [ "mdl-color-text--grey-600" ],
	                icon: 'view_module',
	                tooltip: 'view_module'
	              }),
	              core.elements.create({
	                elementType : 'menu',
	                position    : 'right',
	                class       : [ 'mdl-cell--hide-phone' ],
	                icon        : 'sort',
	                items       : [
	                  {
	                    text: "По дате редактирования",
	                    // icon: 'sort',
	                  },
	                  {
	                    text: "По дате редактирования",
	                    // icon: 'sort',
	                  },
	                  {
	                    text: "По дате редактирования",
	                    // icon: 'sort',
	                  },
	                  {
	                    text: "По дате создания",
	                    disabled: true,
	                    icon: 'sort',
	                    devider: true,
	                  },
	                  {
	                    text: "По дате редактирования",
	                    // icon: 'sort',
	                  }
	                ]
	              }),
	              core.elements.create({
	                elementType: 'button',
	                class: [ "mdl-color-text--grey-600" ],
	                icon: 'refresh',
	                tooltip: 'refresh'
	              }),
	            ]
	          }),
	        ]
	      })
	    ]
	  });

	  var ribbon = core.elements.create({
	    elementType : 'simple',
	    class       : [ 'ribbon' ]
	  });
	  

	  this.application.appendChild( this.header.element );
	  this.application.appendChild( ribbon.element );
	  // this.setTitle( 'App title' );
	};

	Dom.prototype.setTitle = function ( title ) {
	  if ( !title ) {
	    throw new Error('setTitle -> can`t set title')
	  }
	  // this.title.element.textContent = title;
	  this.subTitle.element.textContent = title;
	};

	Dom.prototype.setUserName = function ( user ) {
	  
	  // this.title.element.textContent = title;
	  
	  var settings = core.elements.create({
	    elementType : 'button',
	    icon : 'settings',
	    flex : true,
	    callback : {
	      context  : this,
	      function : function(e){
	        e.preventDefault();
	        console.log( 'dom-userMenu > settings click' );
	      },
	    }
	  });

	  var user = core.elements.create({
	    elementType : 'menu',
	    position    : 'right',
	    class       : [ 'mdl-cell--hide-phone' ],
	    text        : user.name,
	    icon        : 'person',
	    // fab         : true,
	    items       : [
	      { text: user.name },
	      { text: user.provider.name }
	    ]
	  });

	  this.userPanel = core.elements.create({
	    elementType : 'simple',
	    class : [ 'list__flex' ],
	    items : [
	      user,
	      settings,
	    ]
	  });

	  this.navigation.element.appendChild( this.userPanel.element );
	};

	/* DRAWER */
	Dom.prototype.createDrawer = function(){

	  this.drawerTitle = core.elements.create({
	    elementType: 'simple',
	    type  : 'span',
	    class : [ "mdl-layout-title", "mdl-color-text--grey-800" ]
	  });

	  this.drawerNavigation = core.elements.create({
	    elementType: 'simple',
	    type  : 'nav',
	    class : ["mdl-navigation"],
	    items : [
	      core.elements.create({
	        elementType : 'button',
	        class : 'mdl-navigation__link',
	        text  : 'Отчёты',
	        color: true,
	        // raised: true,
	        ripple: true,
	        callback : {
	          function : function(e){
	            e.preventDefault();
	            core.dom.application.MaterialLayout.toggleDrawer();
	            core.events.emit("core:router:check", 'reports')
	          },
	          context  : this
	        }
	      }),
	      core.elements.create({
	        elementType : 'button',
	        class : 'mdl-navigation__link',
	        text  : 'Бизнес-процессы',
	        callback : {
	          function : function(e){
	            e.preventDefault();
	            core.dom.application.MaterialLayout.toggleDrawer();
	            core.events.emit("core:router:check", 'bps')
	          },
	          context  : this
	        }
	      }),
	      core.elements.create({
	        elementType : 'button',
	        class : 'mdl-navigation__link',
	        text  : 'Экранные формы',
	        color: true,
	        raised: true,
	        ripple: true,
	        callback : {
	          function : function(e){
	            e.preventDefault();
	            core.dom.application.MaterialLayout.toggleDrawer();
	            core.events.emit("core:router:check", 'web-forms')
	          },
	          context  : this
	        }
	      }),
	      core.elements.create({
	        elementType : 'button',
	        class : 'mdl-navigation__link',
	        text  : 'Печатные формы',
	        callback : {
	          function : function(e){
	            e.preventDefault();
	            core.dom.application.MaterialLayout.toggleDrawer();
	            core.events.emit("core:router:check", 'print-forms')
	          },
	          context  : this
	        }
	      }),

	    ]
	  });

	  this.drawer = core.elements.create({
	    elementType : 'simple',
	    class       : ["mdl-layout__drawer"],
	    items: [
	      this.drawerTitle,
	      this.drawerNavigation,
	    ]
	  });

	  this.application.appendChild( this.drawer.element );
	  this.setDrawerTitle('App title');
	};

	Dom.prototype.setDrawerTitle = function ( title ) {
	  if ( !title ) {
	    throw new Error('setDrawerTitle -> can`t set title')
	  }
	  this.drawerTitle.element.textContent = title;
	};

	Dom.prototype.createFooter = function(){
	  
	  this.footer = core.elements.create({
	    elementType: 'simple',
	    class: [ "mdl-mini-footer", "app-footer" ],
	  });
	  
	  this.main.element.appendChild( this.footer.element );
	};


	/* INFO PANEL */
	Dom.prototype.toggleInfoPanel = function(){
	  console.log('DOM: toggleInfoPanel');
	  this.content.element.classList.toggle('mdl-cell--10-col');
	  this.infoPanel.element.classList.toggle('zero-width');
	};

	Dom.prototype.showInfoPanel = function(){
	  this.content.element.classList.remove('mdl-cell--10-col');
	  this.infoPanel.element.classList.remove('zero-width');
	};
	Dom.prototype.hideInfoPanel = function(){
	  this.content.element.classList.add('mdl-cell--10-col');
	  this.infoPanel.element.classList.add('zero-width');
	};

	module.exports = Dom;

/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';

	var Preloader = function(){
	  this.tasks  = {
	    start  : [ 'router', 'snackbar', 'user' ],
	    load   : [ 'reports', 'criterias', 'criteriaKeys', 'bps', 'web-forms', 'print-forms' ],
	  };
	  this.total   = 0;
	  this.loaded  = 0;
	  this.percent = 0;
	  this.element = {};
	  this.bindEvents();
	};
	Preloader.prototype.bindEvents = function() {
	  var preloader = this;

	  document.addEventListener('DOMContentLoaded', function(){
	    core.events.subscribe( "core:preloader:start", function () {
	      console.log( "Preloader <-core:preloader:start" );
	      preloader.start();
	    });

	    core.events.subscribe( "core:preloader:task:ready", function () {
	      preloader.loaded++;
	      // console.log("* Preloader <- core:preloader:ready | " + `${parseInt( preloader.loaded, 10 )} ${parseInt( preloader.total, 10 )}` +  ` | ${parseInt( preloader.loaded, 10 ) === parseInt( preloader.total, 10 )}` +"\n\n");
	      
	      preloader.percent = Math.round( (preloader.loaded/preloader.total*100) / 5) * 5;
	      core.events.publish( "core:dom:splashscreen:progress:set", preloader.percent);

	      if ( parseInt( preloader.loaded, 10 ) === parseInt( preloader.total, 10 ) ) {
	        core.events.publish("core:preloader:finish");
	      }
	    });
	  });
	};

	Preloader.prototype.start = function() {
	  console.log( 'Preloader: start' );

	  for (var type in this.tasks) {
	    this.total += this.tasks[type].length;
	  }

	  for (var type in this.tasks) {
	    var tasks = this.tasks[type];
	    for (var i = tasks.length - 1; i >= 0; i--) {
	      var task = ['core', tasks[i], type].join(':');
	      console.log( 'Preloader ->', task );
	      core.events.publish( task );
	    }
	  }
	};
	Preloader.prototype.stop = function() {
	  console.log( 'Preloader: stop' );
	};
	Preloader.prototype.finish = function() {
	  console.log( 'Preloader: finish' );
	  // core.events.publish('core:progressbar:start');
	};
	Preloader.prototype.destroy = function() {
	  console.log( 'Preloader: destroy' );
	};

	module.exports = Preloader;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Route = __webpack_require__(10);

	function Router() {
	  this.pathRoot = '';
	  this.routes = [];
	  this.type = 'hash';
	  this.path = null;
	  this.hash = null;
	  this.context = this;
	  this.handler = window;

	  var namedParam = '([\\w-]+)';
	  this.namedParam = {
	    match: new RegExp('{(' + namedParam + ')}', 'g'),
	    replace: namedParam
	  };
	  this.bindEvents();
	};

	Router.prototype.Route = Route;
	Router.prototype.add =  function(route, callback) {
	  this.routes.push(new this.Route(route, callback, this));
	  return this;
	};
	Router.prototype.empty =  function() {
	  this.routes = [];
	  return this;
	};
	Router.prototype.setType =  function(type) {
	  this.type = type;
	  return this;
	};
	Router.prototype.setPathRoot =  function(url) {
	  this.pathRoot = url;
	  return this;
	};
	Router.prototype.setPath =  function(path) {
	  this.path = path;
	  return this;
	};
	Router.prototype.setHash =  function(hash) {
	  this.hash = hash;
	  return this;
	};
	Router.prototype.setContext =  function(context) {
	  this.context = context;
	  return this;
	};
	Router.prototype.setHandler =  function(handler) {
	  this.handler = handler;
	  return this;
	};
	Router.prototype.getUrl =  function(routeType) {

	  var url;
	  routeType = routeType || this.type;

	  if (routeType == 'path') {
	    var rootRegex = new RegExp('^' + this.pathRoot + '/?');
	    url = this.path || window.location.pathname.substring(1);
	    url = url.replace(rootRegex, '');
	  } else if (routeType == 'hash') {
	    url = this.hash || window.location.hash.substring(1);
	  }

	  return decodeURI(url);
	};
	Router.prototype.match =  function(path, callback) {
	  var route = new this.Route(path, callback, this);
	  if (route.test(this.getUrl())) {
	    return route.run();
	  }
	};
	Router.prototype.run =  function() {
	  var url   = this.getUrl(),
	      route = {};

	  for (var i in this.routes) {
	    route = this.routes[i];

	    if (route.test(url)) {
	      route.run();
	      return route;
	    }
	  }

	  if ( this.check() === false ) {
	    location.hash = '#reports';
	  }
	};

	Router.prototype.check =  function() {
	  var url   = this.getUrl(),
	      match = false;

	  for (var i in this.routes) {
	    var route = this.routes[i];
	    if (route.test(url)) {
	      match = true;
	    }
	  }
	  // console.log('router -> checkDefault', match);
	  return match === true ? route : false;
	};

	Router.prototype.update = function(options) {
	  options = options || {};

	  if ( options.type ){
	    this.setType(options.type)
	  }
	  if ( options.path ){
	    this.setPath(options.path)
	  }
	  if ( options.pathRoot ){
	    this.setPathRoot(options.pathRoot)
	  }
	  if ( options.hash ){
	    this.setHash(options.hash)
	  }
	  if ( options.context ){
	    this.setContext(options.context)
	  }
	  if ( options.handler ){
	    this.setHandler(options.handler)
	  }
	  if ( options.routes ){
	    var route;
	    for (route in options.routes) {
	      this.add(route, options.routes[route]);
	    }
	  }
	};

	Router.prototype.hashChange = function(){
	   window.addEventListener('hashchange', this.run.bind(this) );
	};

	Router.prototype.start = function() {
	  this.update({
	    pathRoot : '',
	    routes   : {

	      // отчёты - начальная страница
	      'reports' : function(params) {
	        console.log('[reports]: ', params);
	        core.events.publish( "core:reports:render" );
	      },
	      // отчёты - шаблоны
	      'reports/templates' : function(params) {
	        console.log('[reports/templates/]: ', params);
	      },
	      // отчёты - общие документы провайдера
	      'reports/shared' : function(params) {
	        console.log('[reports/shared/]: ', params);
	      },
	      // отчёты - мои документы
	      'reports/my' : function(params) {
	        console.log('[reports/my/]: ', params);
	      },
	      'reports/{id}' : function(params) {
	        console.log('[reports/{id}]: ', params);
	        core.events.publish( "core:report:load", params.id );
	        // core.events.publish( "core:dom:application:hide" );
	        // core.events.publish( "core:dom:editor:show" );
	      },
	      
	      'bps' : function(params) {
	        console.log('[bps]: ', params);
	        core.events.publish( "bps:reports:render" );
	      },
	      'bps/{id}' : function(params) {
	        console.log('[bps/{id}]: ', params);
	      },
	      
	      'print-forms' : function(params) {
	        console.log('[print-forms]: ', params);
	      },
	      'print-forms/{id}' : function(params) {
	        console.log('[print-forms/{id}]: ', params);
	      },
	      
	      'web-forms' : function(params) {
	        core.events.publish( "core:web-forms:render" );
	      },
	      'web-forms/new' : function(params) {
	        console.log('[web-forms/new]: ', params);
	        core.events.publish( "core:web-forms:new" );
	      },
	      'web-forms/{id}' : function(params) {
	        core.events.publish( "core:web-form:load",   params.id );
	        core.events.publish( "core:web-form:render", params.id );
	      },

	      'preview/{id}' : function(params) {
	        console.log('[web-forms/{id}]: ', params);
	      },
	    }
	  });
	  this.run();
	};
	Router.prototype.stop = function() {
	  // console.log( 'Router: stop' );
	};
	Router.prototype.destroy = function() {
	  // console.log( 'Router: destroy' );
	};
	Router.prototype.bindEvents = function() {
	  var router = this;
	  document.addEventListener('DOMContentLoaded', function(){

	    core.events.subscribe("core:router:web-forms:new", function(){
	      console.log('Router <- core:router:web-forms:new');
	      location.hash = [ '#', core.modules['web-forms'].route, '/', 'new' ].join('');
	    });
	    

	    core.events.subscribe("core:router:web-forms:show", function( _id ){
	      console.log('Router <- core:router:web-forms:show', _id );
	      location.hash = [ '#', core.modules['web-forms'].route, '/', _id ].join('');
	    });
	    
	    core.events.subscribe( 'core:router:reports:show', function (doc) {
	      console.log( 'Router <- core:router:reports:show', doc );
	      core.events.publish( "core:dom:set:title", doc.name );
	      // location.hash = `#reports/${doc.id}`;
	      location.hash = '#reports/'+doc.id;
	    });

	    core.events.subscribe("core:router:default", function(){
	      console.log('Router <- core:router:default');
	      location.hash = '#reports';
	    });

	    core.events.subscribe("core:router:go", function( url ){
	      console.log('Router <- core:router:go', url);
	      location.hash = [ core.dom.application.application.getAttribute('type'), url ].join('/');
	    });

	    core.events.subscribe("core:router:check", function(route){
	      console.log('Router <- core:router:check', route);
	      location.hash = '#' + route;
	    });

	    core.events.subscribe("core:router:start", function(){
	      console.log('Router <- core:router:start');
	      core.events.publish( "core:preloader:task:ready" );
	      router.hashChange();
	    });

	    core.events.subscribe("core:router:update", function(){
	      console.log('Router <- core:router:update');
	      router.start();
	    });
	  });
	};

	module.exports = Router

/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";

	function Route(path, callback, router) {
	  this.path     = path;
	  this.callback = callback;
	  this.router   = router;
	  this.values   = [];
	};
	Route.prototype.regex =  function() {

	  var path = this.path;

	  if (typeof path === 'string') {
	    return new RegExp('^' + path.replace(/\//g, '\\/').replace(this.router.namedParam.match, this.router.namedParam.replace) + '$');
	  }
	  return path;
	};
	Route.prototype.params =  function() {

	  var obj = {},
	    name, values = this.values,
	    params = values,
	    i, t = 0,
	    path = this.path;

	  if (typeof path === 'string') {
	    t = 1;
	    params = path.match(this.router.namedParam.match);
	  }

	  for (i in params) {
	    name = t ? params[i].replace(this.router.namedParam.match, '$1') : i;
	    obj[name] = values[i];
	  }

	  return obj;
	};
	Route.prototype.test =  function(url) {
	  // console.log('Route:test -> url: ', url, this.regex(), url.match(this.regex()) );
	  
	  var matches;
	  if ( matches = url.match(this.regex()) ) {
	    this.values = matches.slice(1);
	    return true;
	  }
	  return false;
	};
	Route.prototype.run =  function() {
	  if (typeof this.callback === 'string') {
	    return this.router.handler[this.callback](this.params());
	  }
	  return this.callback.apply(this.router.context, [this.params()]);
	};
	module.exports = Route

/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";

	var Snackbar = function() {

	  this.element       = {};
	  this.textElement   = {};
	  this.actionElement = {};

	  this.active        = false;
	  this.actionHandler = undefined;
	  this.message       = undefined;
	  this.actionText    = undefined;
	  this.queuedNotifications = [];
	  this.setActionHidden(true);
	  this.bindEvents();
	};
	Snackbar.prototype.Constant = {
	  ANIMATION_LENGTH: 500
	};
	Snackbar.prototype.cssClasses = {
	  SNACKBAR: 'mdl-snackbar',
	  MESSAGE:  'mdl-snackbar__text',
	  ACTION:   'mdl-snackbar__action',
	  ACTIVE:   'mdl-snackbar--active'
	};
	Snackbar.prototype.displaySnackbar = function() {
	  this.element.setAttribute('aria-hidden', 'true');

	  if (this.actionHandler) {
	    this.actionElement.textContent = this.actionText;
	    this.actionElement.addEventListener('click', this.actionHandler);
	    this.setActionHidden(false);
	  }

	  this.textElement.textContent = this.message;
	  this.element.classList.add(this.cssClasses.ACTIVE);
	  this.element.setAttribute('aria-hidden', 'false');
	  setTimeout(this.cleanup.bind(this), this.timeout);
	};
	Snackbar.prototype.showSnackbar = function(data) {
	  if (data === undefined) {
	    console.error('Please provide a data object with at least a message to display.');
	    return false;
	  }

	  if (data.message === undefined) {
	    console.error('Please provide a message to be displayed.');
	    return false;
	  }

	  if (data.actionHandler && !data.actionText) {
	    console.error('Please provide action text with the handler.');
	    return false;
	  }

	  if (this.active) {
	    this.queuedNotifications.push(data);
	  } else {
	    this.active = true;
	    this.message = data.message;
	    if (data.timeout) {
	      this.timeout = data.timeout;
	    } else {
	      this.timeout = 2750;
	    }
	    if (data.actionHandler) {
	      this.actionHandler = data.actionHandler;
	    }
	    if (data.actionText) {
	      this.actionText = data.actionText;
	    }
	    this.displaySnackbar();
	  }
	};
	Snackbar.prototype.checkQueue = function() {
	  if ( this.queuedNotifications.length > 0) {
	    this.showSnackbar(this.queuedNotifications.shift());
	  }
	};
	Snackbar.prototype.cleanup = function() {
	  this.element.classList.remove(this.cssClasses.ACTIVE);
	  setTimeout(function() {
	    this.element.setAttribute('aria-hidden', 'true');
	    this.textElement.textContent = '';
	    if (!this.actionElement.getAttribute('aria-hidden')) {
	      this.setActionHidden(true);
	      this.actionElement.textContent = '';
	      this.actionElement.removeEventListener('click', this.actionHandler);
	    }
	    this.actionHandler = undefined;
	    this.message = undefined;
	    this.actionText = undefined;
	    this.active = false;
	    this.checkQueue();
	  }.bind(this), (this.Constant.ANIMATION_LENGTH));
	};
	Snackbar.prototype.setActionHidden = function(value) {
	  if ( Object.keys(this.actionElement).length ) {
	    value ? this.actionElement.setAttribute('aria-hidden', 'true') : this.actionElement.removeAttribute('aria-hidden');
	  }
	};

	Snackbar.prototype.start = function() {
	  console.log( 'Snackbar: start' );
	  
	  // <div id="mdl-snackbar" class="mdl-snackbar">
	  //   <div class="mdl-snackbar__text"></div>
	  //   <button class="mdl-snackbar__action" type="button"></button>
	  // </div>

	  var coreSnackbar = document.createElement("div");
	  coreSnackbar.id = 'mdl-snackbar';
	  coreSnackbar.classList.add('mdl-snackbar');
	  
	  var coreSnackbarText = document.createElement("div");
	  coreSnackbarText.classList.add('mdl-snackbar__text');
	  coreSnackbar.appendChild( coreSnackbarText );

	  var coreSnackbarButton = document.createElement("button");
	  coreSnackbarButton.classList.add('mdl-snackbar__action');
	  coreSnackbar.appendChild( coreSnackbarButton );

	  core.dom.snackbar = coreSnackbar;
	  core.dom.root.body.appendChild( coreSnackbar );
	  // core.dom.application.appendChild( coreSnackbar );
	  
	  this.element       = coreSnackbar;
	  this.textElement   = this.element.querySelector('.' + this.cssClasses.MESSAGE);
	  this.actionElement = this.element.querySelector('.' + this.cssClasses.ACTION);
	};
	Snackbar.prototype.stop = function() {
	  console.log( 'Snackbar: stop' );
	};
	Snackbar.prototype.destroy = function() {
	  console.log( 'Snackbar: destroy' );
	  this.element.remove();
	  delete this.element;
	};

	Snackbar.prototype.bindEvents = function() {
	  var snackbar = this;
	  document.addEventListener('DOMContentLoaded', function(){

	    core.events.subscribe("core:snackbar:start", function(){
	      console.log('Snackbar <- core:snackbar:start');
	      core.events.publish( "core:preloader:task:ready" );
	      snackbar.start();
	    });

	  });
	};



	module.exports = Snackbar;

/***/ },
/* 12 */
/***/ function(module, exports) {

	var Template = function(config){
	  this.name = config.name || '';
	  this.path = config.path || '';
	  this.raw  = config.raw  || '';
	  return this;
	};
	Template.prototype.load = function() {
	  core.events.publish( "core:template:load", this.name );
	  return this;
	};

	var Templates = function(){
	  this.templates = {};
	  this.ready     = false;
	  this.loaded    = 0;
	  this.toLoad    = [ 'reports-show', 'reports-index', 'core-progressbar', 'core-layout' ];

	  this.bindEvents();
	};
	Templates.prototype.Template = Template;

	Templates.prototype.add = function(name) {
	  this.templates[ name ] = new this.Template({ name: name }).load();
	};

	Templates.prototype.init = function() {

	  for (var i = this.toLoad.length - 1; i >= 0; i--) {
	    this.add( this.toLoad[i] );
	  };

	  core.events.publish( "core:templates:load", this.templates );
	};

	Templates.prototype.bindEvents = function() {
	  var templates = this;

	  document.addEventListener('DOMContentLoaded', function(){
	    core.events.subscribe("core:templates:load:success", function ( tmp ){
	      console.log( 'Load:',tmp );
	    });
	    
	    core.events.subscribe("core:templates:load:fails",   function ( e ){
	      throw new Error(e);
	    });

	    core.events.subscribe("core:template:loaded", function (data) {
	      console.log('***', data.name, Object.keys(templates.templates).length, templates.toLoad.length);
	      
	      templates.templates[data.name].raw = data.raw;
	       
	      var dataNameParse = data.name.split('-');

	      var moduleRoot = dataNameParse[0],
	          moduleName = dataNameParse[1];

	      console.log('templates -> bindEvents > core:template:loaded : ', moduleRoot + ":" + moduleName + ":template:ready");
	      
	      core.events.publish( moduleRoot + ":" + moduleName + ":template:ready", templates.templates[data.name] );
	      templates.loaded++;

	      if ( templates.loaded === templates.toLoad.length ) {
	        core.events.publish("core:preloader:ready");
	      }
	       // templates.tempates[ data.name ].raw = data.data;
	    });

	    core.events.publish("");

	    core.events.subscribe("core:progressbar:template", function(){
	      core.events.publish("core:template:progressbar", templates.templates['core-progressbar']);
	    });

	    core.events.subscribe("core:reports:template", function(){
	      core.events.publish("core:template:reports", templates.templates['reports-index']);
	    });

	    core.events.subscribe("core:reports:editor:template", function(){
	      core.events.publish("core:template:reports:editor", templates.templates['reports-show']);
	    });

	    core.events.subscribe("core:template:start", function(){
	      console.log('core:template:start');
	      templates.start();
	    });

	    core.events.subscribe("core:start:all", function(){
	      console.log('core:start:templates');
	      templates.start();
	    });

	    core.events.subscribe("core:templates:start", function(){
	      console.log('Templates <- core:templates:start');
	      core.events.publish( "core:preloader:task:ready" );
	    });
	  });
	};


	Templates.prototype.start = function() {
	  this.init();
	};

	Templates.prototype.stop = function() {
	  // console.log( 'Templates: stop' );
	};

	Templates.prototype.destroy = function() {
	  // console.log( 'Templates: destroy' );
	};

	module.exports = Templates

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";

	var ReportSettings = function ReportSettings(config){
	  this.currentDate = new Date();
	  this.currentYear  = this.currentDate.getFullYear();
	  this.periodStart  = this.currentDate;
	  this.periodEnd    = this.currentDate;
	  this.main         = this.currentDate.getFullYear();
	  this.compare      = this.currentDate.getFullYear()-1;
	  
	  this.isYearReport = config.isYearReport || false;
	  this.isTemplate   = config.isTemplate || false;
	  this.isNew        = config.isNew || true;
	};

	var Report = function Report(config){
	  this.element     = {};
	  this._id         = config._id         || '';
	  this.name        = config.name        || '';
	  this.description = config.description || '';
	  this.author      = config.author;
	  this.providerId  = config.provider_id;
	  this.query       = {};
	  this.globalQuery = {};
	  this.settings    = new ReportSettings(config.settings);
	};
	Report.prototype.init = function(){

	  this.detachEvents();
	  this.attachEvents();
	  this.destroyEditor();
	  
	  console.log( 'Report -> init' );

	  core.events.publish("core:reports:editor:template");
	  core.events.publish("core:report:load", this._id );
	};
	Report.prototype.update = function(html){
	  console.log( 'Report -> update' );
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};
	Report.prototype.load = function(){
	  console.log( 'Report -> bindEvents' );
	};

	Report.prototype.detachEvents = function(){
	  core.events.remove("core:template:reports:editor");
	  core.events.remove("core:report:loaded");
	};

	Report.prototype.attachEvents = function(){
	  var report = this;
	  
	  core.events.subscribe("core:template:reports:editor", function(template){
	    report.update( template.raw );
	  });
	};

	Report.prototype.cardClickHandler = function(e){
	  console.log( 'Report: cardClickHandler', e, this );
	  location.hash = '#reports/' + this._id;
	};

	Report.prototype.editor = function( config ){
	};


	Report.prototype.render = function( config ){

	  this.element = core.elements.create({
	    elementType : 'card',
	    preventCopy : true,

	    // height : 200,
	    // width  : 200,
	    class: [ "mdl-cell", "mdl-cell--4-col" ],
	    title    : this.name,
	    // subTitle : this.description,
	    shadow : 8,
	    // media  : {
	    //   // image src
	    //   src: '',
	    // },
	    description : this.name,
	    actions : [
	      core.elements.create({
	        elementType : 'button',
	        preventCopy : true,
	        name        : 'test-check',
	        icon        : 'star'
	      }),

	      core.elements.create({
	        elementType : 'spacer'
	      }),

	      core.elements.create({
	        elementType : 'icon',
	        icon: 'star'
	      }),
	    ],
	    menu : [
	      core.elements.create({
	        elementType : 'button',
	        preventCopy : true,
	        name        : 'test-check',
	        icon        : 'star'
	      }),
	    ]
	  })

	  return this.element.element;
	};


	var Reports = function Reports(){
	  this.element   = {};
	  this.documents = [];
	  this.current   = {};

	  this.leftPanel = {};
	  this.content   = {};
	  this.infoPanel = {};

	  this.bindEvents();
	};


	Reports.prototype.renderLeftPanel = function(){
	  var list = core.elements.create( {
	    elementType : 'list',
	    items: [
	      // минимальный вариант
	      {
	        title : 'menu item'
	      },

	      // минимальный вариант + иконка
	      {
	        title : 'menu item',
	        icon  : 'event'
	      },

	      {
	        title : 'menu item',
	        icon  : 'event',
	        subTitle : 'menu item',
	      },

	      {
	        title : 'menu item',
	        icon  : 'event',
	        action : {
	          icon : 'star',
	        },
	      },
	      {
	        title : 'menu item',
	        icon  : 'event',
	        action : {
	          href : '#',
	          icon : 'star',
	          title : 'tesst'
	        },
	      },
	      {
	        title : 'menu item',
	        subTitle : 'menu item',
	        icon  : 'event',
	        action : {
	          href : '#',
	          icon : 'star',
	          title : 'tesst'
	        },
	      },
	      {
	        title : 'menu item',
	        subTitle : 'menu item',
	        icon  : 'event',
	        action : {
	          element: core.elements.create({
	            elementType : 'button',
	            preventCopy : true,
	            name        : 'test-check',
	            fab         : true,
	            icon        : 'star'
	          })
	        },
	      },
	    ]
	  });

	  core.dom.leftPanel.element.appendChild( list.element );
	}

	Reports.prototype.renderInfoPanel = function(){
	  var list = core.elements.create( {
	    elementType : 'list',
	    items: [
	      // минимальный вариант
	      {
	        title : 'menu item'
	      },

	      // минимальный вариант + иконка
	      {
	        title : 'menu item',
	        icon  : 'event'
	      },

	      {
	        title : 'menu item',
	        icon  : 'event',
	        subTitle : 'menu item',
	      },

	      {
	        title : 'menu item',
	        icon  : 'event',
	        action : {
	          icon : 'star',
	        },
	      },
	      {
	        title : 'menu item',
	        icon  : 'event',
	        action : {
	          href : '#',
	          icon : 'star',
	          title : 'tesst'
	        },
	      },
	      {
	        title : 'menu item',
	        subTitle : 'menu item',
	        icon  : 'event',
	        action : {
	          href : '#',
	          icon : 'star',
	          title : 'tesst'
	        },
	      },
	      {
	        title : 'menu item',
	        subTitle : 'menu item',
	        icon  : 'event',
	        action : {
	          element: core.elements.create({
	            elementType : 'button',
	            preventCopy : true,
	            name        : 'test-check',
	            fab         : true,
	            icon        : 'star'
	          })
	        },
	      },
	    ]
	  });

	  core.dom.infoPanel.element.appendChild( list.element );

	}


	Reports.prototype.renderContent = function(){
	  var reports = this;

	  this.content = document.createElement('div');
	  this.content.className = 'mdl-spinner mdl-js-spinner mdl-spinner--single-color is-active';

	  core.dom.content.element.appendChild( this.content );
	  core.events.publish('core:dom:material:update');
	  

	  var load = new Promise( function( resolve, reject ){
	     setTimeout( function(){
	       if ( reports.documents.length ) {
	         var df = document.createDocumentFragment();
	         
	         for(var j = 0, length = reports.documents.length; j < length; j++){
	           console.log( reports.documents[j] );
	           var report = reports.documents[j];
	           df.appendChild( report.render() );
	         }

	         resolve( df );
	       } else {
	         reject( false );
	       }
	      
	     }, 5000 );
	  });

	  load.then( function( documentFragment ){
	    reports.content.className   = 'mdl-grid documentCards animated';
	    reports.content.textContent = '';
	    reports.content.appendChild( documentFragment );
	  }).catch( function ( error ) {
	    reports.content.className = '';
	    reports.content.innerHTML = 'no elements';
	    throw new Error( 'Reports -> renderContent', error );
	  });
	}

	Reports.prototype.render = function() {
	  
	  core.events.publish( "core:dom:application:clear" );
	  core.events.publish( "core:current:set", this );


	  this.renderLeftPanel();
	  this.renderContent();
	  this.renderInfoPanel();

	  core.events.publish('core:dom:material:update');
	}

	Reports.prototype.Report = Report;
	Reports.prototype.init = function(){
	  core.events.publish( "[ + ] core:reports:init" );

	  this.element = document.createElement('div');
	  this.render();
	};
	Reports.prototype.bindEvents = function(){
	  var reports = this;

	  document.addEventListener('DOMContentLoaded', function(){

	    
	    core.events.subscribe("core:reports:render", function(){
	      reports.render();
	    });

	    core.events.subscribe("core:report:loaded", function(data){
	      
	      var report = JSON.parse( data.raw );
	      report.settings = {
	        isYearReport : report.yearReport,
	        isTemplate   : report.template,
	        isNew        : report.new
	      };

	      console.log( 'core:report:loaded', report );
	      reports.current = new reports.Report( report );

	      core.events.publish("core:events:editor:set:html", core.utils.Base64.decode( report.body ) );

	      // report.loadEditor( data.raw.body );
	    });

	    core.events.subscribe("core:reports:loaded", function(data){
	      for (var i = data.length - 1; i >= 0; i--) {
	        var _d = data[i];
	        var report = {
	          _id         : _d._id,
	          name        : _d.name,
	          description : _d.description,
	          update_at   : _d.updated_at,
	          
	          author : {
	            id   : _d.author_id,
	            name : _d.author_id
	          },

	          providerId  : _d.provider_id,

	          query       : _d.query,
	          globalQuery : _d.globalQuery,

	          settings : {
	            periodStart  : _d.periodStart,
	            periodEnd    : _d.periodEnd,
	            main         : _d.main,
	            compare      : _d.compare,
	            isYearReport : _d.yearReport,
	            isTemplate   : _d.template,
	            providerSelected : _d.providerSelected
	          }
	        };
	        reports.add( report );
	      }
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe("core:reports:start", function( template ){
	      console.log('Reports <- core:reports:start');
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe("core:template:reports", function( template ){
	      
	      reports.updateRootElement( template.raw );
	    });

	    // клик по меню с документами
	    core.events.subscribe("core:reports:menu:select", function( menuItem ){
	      // console.log( 'Reports <- core:reports:menu:select', menuItem );
	      core.events.publish( "core:router:go", menuItem.getAttribute('action') );
	    });

	  });
	};

	Reports.prototype.add = function(  config ) {
	  this.documents.push( new this.Report(config) );
	};
	Reports.prototype.clear = function(config) {
	  this.documents = {};
	};
	Reports.prototype.find = function(id) {
	  for (var type in this.documents) {
	    for (var i = this.documents[type].length - 1; i >= 0; i--) {
	      if( this.documents[type][i]._id === id ){
	        return this.documents[type][i];
	      }
	    }
	  }
	};

	Reports.prototype.start = function() {
	  console.log( 'Reports: start' );
	  this.init();
	};
	Reports.prototype.stop = function() {
	  console.log( 'Reports: stop' );
	};
	Reports.prototype.destroy = function() {
	  console.log( 'Reports: destroy' );
	  this.element = [];
	};

	module.exports = Reports;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var WebForms = function WebForms(){
	  this.forms     = [];
	  this.leftPanel = {};
	  this.content   = {};
	  this.infoPanel = {};
	  this.route     = 'web-forms';
	  this.title     = 'Экранные формы';
	  
	  this.active    = {};
	  
	  this.bindEvents();
	};

	WebForms.prototype.WebForm = __webpack_require__(56);

	WebForms.prototype.init = function(){
	};
	WebForms.prototype.import = function( data ){
	  var data = '[{"element":"<div style=\\"top: 80px; left: 450px; position: absolute;\\" class=\\"\\">label<input name=\\"test-input\\" type=\\"text\\" placeholder=\\"texttium\\" style=\\"margin: 0px 10px;\\"></div>","options":{"drag":{"activeClass":"active-border","snapX":10,"snapY":10,"axisX":true,"axisY":true,"restrict":"document"},"id":"","title":""}},{"element":"<div style=\\"top: 180px; left: 410px; position: absolute;\\" class=\\"drag-active\\">label<input name=\\"test-input\\" type=\\"text\\" placeholder=\\"texttium\\" style=\\"margin: 0px 10px;\\"><div class=\\"drag-config-button\\" style=\\"top: 164px; left: 330.828px; height: 21px; width: 222.594px;\\"></div></div>","options":{"drag":{"activeClass":"active-border","snapX":10,"snapY":10,"axisX":true,"axisY":true,"restrict":"document"},"id":"","title":""}}]';

	  var elements = [];
	  
	  try {
	    elements = JSON.parse( data );
	  } catch( error ){
	    throw new Error( error );
	  }

	  if ( elements.length ) {
	    var df = document.createDocumentFragment();

	    for(var k = 0, length = elements.length; k < length; k++){
	      
	      var element = document.createElement('div');
	      element.innerHTML = elements[k].element;

	      // core.modules.drag.clonedElementAttachEvents( element );
	      core.modules.drag.add( element, elements[k].options.drag );
	      // core.modules.drag.add( element, { snapX: 10,  snapY: 10, activeClass: "active-border" } );

	      df.appendChild( element );

	    }

	  core.dom.content.appendChild( df );

	  };
	};
	WebForms.prototype.add = function( config ) {
	  var form = new this.WebForm(config);
	  this.forms.push( form );
	  return form;
	};
	WebForms.prototype.find = function( id ) {
	  var form = {};

	  for (var i = 0; i < this.forms.length; i++) {
	    if ( this.forms[i]._id === id ) {
	      form = this.forms[i];
	    }
	  }
	  return form;
	};
	WebForms.prototype.show = function( form ) {
	  var webForm = this.find( form._id );
	  // console.log( 'WebForms: show -> ', form, webForm );

	  if ( webForm ) {
	    webForm.load(form);
	    this.active = webForm;
	  } else {
	    throw new Error('web-form not found!');
	  }
	};
	WebForms.prototype.clear = function(config) {
	  this.forms = {};
	};

	WebForms.prototype.renderLeftPanel = function() {


	  this.leftPanel = core.elements.create({
	    elementType : 'simple',
	    class : [ this.CSS.LEFT_PANEL ],
	    items : [
	      core.elements.create({
	      elementType : 'list',
	      items: [
	        {
	          title : core.elements.create({
	            elementType : 'button',
	            text        : 'Создать',
	            raised: true,
	            color: true,
	            callback : {
	              context  : this,
	              function : function(e){
	                e.preventDefault();
	                core.events.publish( "core:router:web-forms:new" );
	              },
	            }
	          }),
	        },
	        {
	          title    : 'Шаблоны',
	          subTitle : '0 форм',
	          icon     : 'event',
	          action   : {
	            icon     : 'add',
	            color    : true,
	            callback : {
	              context  : this,
	              function : function(e){
	                e.preventDefault();
	                console.log( 'webforms-leftMenu > template icon click' );
	              },
	            }
	          },
	          // callback : {
	          //   context  : this,
	          //   function : function(e){
	          //     e.preventDefault();
	          //     console.log( 'webforms-leftMenu > template click' );
	          //   },
	          // }
	        },
	        {
	          title    : 'Общие формы',
	          subTitle : '0 форм',
	          icon     : 'event',
	          action   : {
	            icon     : 'add',
	            color    : true,
	          },
	          callback : {
	            context  : this,
	            function : function(e){
	              e.preventDefault();
	              console.log( 'webforms-leftMenu > shared click' );
	            },
	          }
	        },
	        {
	          title    : 'Мои формы',
	          subTitle : '0 форм',
	          icon     : 'event',
	          action   : {
	            icon     : 'add',
	            color    : true,
	          },
	          callback : {
	            context  : this,
	            function : function(e){
	              e.preventDefault();
	              console.log( 'webforms-leftMenu > my click' );
	            },
	          }
	        },
	      ]
	    })
	    ]
	  });

	  core.events.emit( "core:dom:leftPanel:clear" );
	  core.events.emit( "core:dom:leftPanel:set", this.leftPanel );
	  core.events.emit( "core:dom:material:update" );
	}
	WebForms.prototype.renderContent = function() {
	  this.content = {};

	  if ( this.forms.length ) {

	    var df = document.createDocumentFragment();
	    // this.menu = core.elements.create({
	    //   elementType: 'simple',
	    //   class : ["mdl-cell", "mdl-cell--12-col", "page-content-panel-animation", "menu-content"],
	    //   text: 'menu-panel'
	    // });

	    for (var i = this.forms.length - 1; i >= 0; i--) {
	      var data = this.forms[i];

	      var form = core.elements.create({
	        elementType : 'card',
	        class: [ this.CSS.CELL, 'mdl-cell--3-col', 'mdl-cell--12-col-phone', 'mdl-cell--4-col-tablet'],
	        shadow : 8,
	        // height : 200,
	        // width  : 300,
	        media: 'assets/img/doc.png',
	        title : data.name,
	        // title : '',
	        // subTitle: data.name,
	        description: data.description,
	        menu: [
	          core.elements.create( {
	            elementType : 'menu',
	            position    : 'right',
	            icon: 'more_vert',
	            // color: true,
	            items: [
	              {
	                text: 'hide',
	                callback : {
	                  context: this,
	                  function : function(e){
	                    core.events.emit('core:dom:infoPanel:hide');
	                  }
	                }
	              },
	              {
	                text: 'show',
	                callback : {
	                  context: this,
	                  function : function(e){
	                    core.events.emit('core:dom:infoPanel:show');
	                  }
	                }
	              }
	            ]
	          })
	        ],
	        _data : data,
	        callback : {
	          // context  : this,
	          function : function(e){
	            // console.log('event handler', this._config._data._id);
	            core.events.emit("core:router:web-forms:show", this._config._data._id);
	          }
	        }
	      });

	      df.appendChild( form.element );
	    }
	    this.content = core.elements.create({
	      elementType : 'simple',
	      class : ['mdl-grid']
	    });
	    // this.content.element.appendChild( this.menu.element );
	    this.content.element.appendChild( df );
	    core.events.emit('core:dom:material:update');
	  } else {
	    // empty forms
	    this.content = core.elements.create({
	      elementType: 'simple',
	      class : [ this.CSS.CELL, "mdl-cell--12-col-phone", "mdl-cell--6-col-desktop", "mdl-cell--3-offset-desktop", "mdl-progress", "mdl-js-progress" ],
	      items: [
	        this.menu
	      ]
	    });
	  }

	  core.events.emit( "core:dom:content:clear" );
	  core.events.emit( "core:dom:content:set", this.content );
	}
	WebForms.prototype.renderInfoPanel = function( element ) {
	  // var table = core.elements.create({
	  //   elementType : 'table',
	  //   selectable: true,
	  //   class : [ 'webforms-infopanel-table' ],
	  //   head  : [ 'id', 'name', 'test' ],
	  //   body  : [
	  //     [4 , 5, 5],
	  //     [1 , 2, 2],
	  //     [1 , 2, 2],
	  //     [1 , 2, 2],
	  //     [1 , 2, 2],
	  //     [1 , 2, 2],
	  //     [1 , 2, 2],
	  //   ]
	  // });

	  // var button = core.elements.create({
	  //   elementType : 'button',
	  //   class       : [ 'menu-content-button' ],
	  //   text        : 'Создать',
	  //   color       : true,
	  //   raised      : true
	  // });

	  // this.infoPanel = core.elements.create({
	  //   elementType : 'simple',
	  //   // text        : 'Создать',
	  //   items : [
	  //     button,
	  //     table
	  //   ]
	  // });

	  core.events.emit( "core:dom:infoPanel:clear" );
	  // core.events.emit( "core:dom:infoPanel:set", this.infoPanel );
	}

	WebForms.prototype.render = function(){
	  core.events.emit( "core:current:set", this );
	  core.events.emit( "core:dom:application:clear" );

	  this.renderLeftPanel();
	  this.renderContent();
	  this.renderInfoPanel();
	  
	  core.events.emit( "core:dom:infoPanel:hide" );
	  core.events.emit( "core:dom:material:update" );
	  core.events.emit( "core:dom:set:title", this.title );
	};

	WebForms.prototype.preview = function() {
	  var params = "menubar=no,location=no,resizable=yes,scrollbars=yes,status=no,height=500,width=500,left=100,top=100"
	  var _window = window.open( '#preview/123' , "Preview", params );
	  console.log( _window.document.body.innerHTML );
	};
	WebForms.prototype.showElementInfo = function( element ) {
	  if ( element ) {
	    
	    this.active = element;

	    var config  = element._config;
	    console.log( 'renderInfoPanel render ->', element );

	    if ( config && Object === config.constructor) {
	      core.events.emit( "core:dom:infoPanel:clear" );

	      var form = document.createElement('div');

	      for ( var key in config ) {
	        var item = core.elements.create({
	          elementType : 'input',
	          name   : config[key],
	          value  : key + '__' +  config[key],
	        });
	        form.appendChild( item.element );
	      }
	      this.infoPanel = form;
	      
	      core.events.emit( "core:dom:infoPanel:set", this.infoPanel );
	      core.events.emit( "core:dom:material:update" );
	    };
	  }
	}

	WebForms.prototype.renderEditorLeftPanel = function() {
	  console.log( 'WebForms: renderEditorLeftPanel' );

	  this.leftPanel = core.elements.create({
	    elementType : 'simple',
	    class : [ this.CSS.LEFT_PANEL ],
	    items : [
	      core.elements.create({
	        elementType : 'input',
	        class : [ '_drag' ],
	        name : 'test',
	        label : 'test',
	        float : true,
	      }),
	      core.elements.create({
	        elementType : 'label',
	        class : [ '_drag' ],
	        text : 'label'
	      }),
	      core.elements.create({
	        elementType : 'checkbox',
	        class : [ '_drag' ],
	        label : 'checkbox'
	      }),
	      core.elements.create({
	        elementType : 'radio',
	        class : [ '_drag' ],
	        label : 'radio',
	        name  : 'radio',
	        value : 'radio',
	      }),
	      core.elements.create({
	        elementType : 'textarea',
	        class : [ '_drag' ],
	        label : 'radio',
	        name  : 'area',
	        rows : 2,
	        cols : 10,
	      }),
	    ]
	  });

	  core.events.emit( "core:dom:leftPanel:clear" );
	  core.events.emit( "core:dom:leftPanel:set", this.leftPanel );
	  core.events.emit( "core:dom:material:update" );
	  
	  core.events.emit( "core:drag:attachEvents" );

	};

	WebForms.prototype.renderEditorContent = function() {
	  console.log( 'WebForms: renderEditorContent' );
	  this.content = core.elements.create({
	    elementType : 'dialog',
	    title : 'TEST',
	    
	    content : core.elements.create({
	      elementType: 'icon',
	      icon: 'work',
	    }),

	    actions: [
	      {
	        text: 'submit',
	        submit :  {
	          // context  : this,
	          function : function(){
	            console.log( 'webforms-leftMenu > renderEditorContent submit  dialog click' );
	          },
	        }
	      },
	      {
	        text: 'cancel',
	        cancel : {
	          context  : this,
	          function : function(){
	            console.log( 'webforms-leftMenu > renderEditorContent  cancel dialog click' );
	          },
	        }
	      },
	    ]
	  });

	  core.events.emit( "core:dom:content:clear" );
	  core.events.emit( "core:dom:content:set", this.content );
	};
	WebForms.prototype.renderEditorInfoPanel = function() {
	  console.log( 'WebForms: renderEditorInfoPanel' );
	};

	WebForms.prototype.renderEditor = function( form ) {
	  core.events.emit( "core:dom:application:clear" );

	  this.renderEditorLeftPanel();
	  this.renderEditorContent();
	  this.renderEditorInfoPanel();
	  
	  core.events.emit( "core:dom:infoPanel:hide" );
	  core.events.emit( "core:dom:material:update" );

	  core.events.emit( "core:dom:set:title", form.name );

	  setTimeout( function(){
	    core.events.emit( "core:dom:content:wrapper:hide");
	  }, 500 );
	};

	WebForms.prototype.CSS = {
	  LEFT_PANEL : 'webforms-leftPanel',
	  CELL : 'mdl-cell',
	};

	WebForms.prototype.CONFIG = {
	  EMPTY_FORM : {
	    _id         : "__new",
	    name        : "Новая форма",
	    description : "Новая форма",
	    authorId    : '', // core.global.user.id,
	    providerId  : '', // core.global.provider.id,
	  }
	};

	WebForms.prototype.createNewForm = function() {
	  console.log( 'WebForms: createNewForm' );
	  var form = this.add( this.CONFIG.EMPTY_FORM );
	  this.active = form;
	  this.show( form );
	};

	WebForms.prototype.start = function() {
	  console.log( 'WebForms: start' );
	  this.bindEvents();
	};
	WebForms.prototype.stop = function() {
	  console.log( 'WebForms: stop' );
	  this.detachEvents();
	};
	WebForms.prototype.destroy = function() {
	  console.log( 'WebForms: destroy' );
	  this.element.remove();

	  for( var key in this ){
	    delete this[ key ];
	  }

	  this.detachEvents();
	};
	WebForms.prototype.detachEvents = function(){
	  core.events.remove("core:web-forms:start");
	  core.events.remove("core:web-forms:stop");
	  core.events.remove("core:web-forms:destroy");
	  core.events.remove("core:web-forms:render");
	  core.events.remove("core:web-forms:drag:export:result");
	  core.events.remove("core:web-forms:infoPanel:show");
	  core.events.remove("core:web-forms:loaded");
	  core.events.remove("core:web-form:show");
	  core.events.remove("core:web-form:ready");
	  core.events.remove("core:web-form:render");
	  core.events.remove("core:web-form:new");
	}

	WebForms.prototype.bindEvents = function(){
	  var webForms = this;
	  document.addEventListener('DOMContentLoaded', function(){ 
	    
	    core.events.on("core:web-forms:render", function(){
	      webForms.render();
	    });

	    core.events.on("core:web-forms:start", function(){
	      webForms.start();
	    });

	    core.events.on("core:web-forms:stop", function(){
	      webForms.stop();
	    });

	    core.events.on("core:web-forms:destroy", function(){
	      webForms.destroy();
	    });

	    core.events.on("core:web-form:show", function( form ){
	      console.log('WebForm :: core:web-form:show', form );
	      webForms.renderEditor( form );
	    });

	    core.events.on("core:web-forms:drag:export:result", function( result ){
	      console.log( 'core:web-forms:drag:export:result', result );
	    });

	    core.events.on("core:web-forms:infoPanel:show", function( config ){
	      console.log( 'core:web-forms:infoPanel:show', config );
	      webForms.renderInfoPanel(config);
	    });

	    core.events.on("core:web-forms:loaded", function( data ){
	      var forms = [];
	      
	      try{
	        forms = JSON.parse( data );
	      } catch (e){
	        throw new Error( 'Error while web-forms loading', e );
	      }

	      if ( forms.length ) {
	        for (var i = forms.length - 1; i >= 0; i--) {
	          webForms.add( forms[i] );
	        }

	        // webForms.renderContent();
	      }
	    });

	    core.events.on("core:web-form:ready", function( data ){
	      // console.log( 'WebForm :: core:web-form:ready > ', data );
	      var webForm = {};

	      try {
	        webForm = JSON.parse( data );
	        webForms.show( webForm );
	      } catch (e) {
	        // throw new Error(e);
	      }
	    });
	    
	    core.events.on("core:web-form:render", function( form ){
	      console.log( 'WebForm :: core:web-form:render > ', form );
	      core.events.emit( "core:dom:content:wrapper:show");
	    });

	    core.events.on("core:web-forms:new", function(){
	      core.events.emit( "core:dom:content:wrapper:show");
	      console.log( 'WebForm :: core:web-form:new > ');
	      webForms.createNewForm();
	    });

	  });
	};

	module.exports = WebForms;

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";

	var PrintFormSettings = function(config){
	  this.current_date = new Date();
	  this.currentYear  = this.current_date.getFullYear();
	  this.periodStart  = this.current_date;
	  this.periodEnd    = this.current_date;
	  this.main         = this.current_date.getFullYear();
	  this.compare      = this.current_date.getFullYear()-1;
	  this.isYearPrintForm = config.isYearPrintForm || false;
	  this.isTemplate   = config.isTemplate || false;
	  this.isNew        = config.isNew || true;
	};

	var PrintForm = function(config){
	  this.element     = {};
	  this._id         = config._id         || '';
	  this.name        = config.name        || '';
	  this.description = config.description || '';
	  this.author      = config.author;
	  this.providerId  = config.provider_id;
	  this.query       = {};
	  this.globalQuery = {};
	  this.settings    = new PrintFormSettings(config.settings);
	};
	PrintForm.prototype.init = function(){

	  this.detachEvents();
	  this.attachEvents();
	  this.destroyEditor();
	  
	  
	  console.log( 'PrintForm -> init' );

	  this.element = document.createElement('div');
	  core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	  core.events.publish("core:print-forms:editor:template");
	  core.events.publish("core:print-form:load", this._id );
	};
	PrintForm.prototype.update = function(html){
	  console.log( 'PrintForm -> update' );
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};
	PrintForm.prototype.load = function(){
	  console.log( 'PrintForm -> bindEvents' );
	};
	PrintForm.prototype.detachEvents = function(){
	  core.events.remove("core:template:print-forms:editor");
	  core.events.remove("core:print-form:loaded");
	};
	PrintForm.prototype.destroyEditor = function() {
	  if ($('div#paper').data('froala.editor')) {
	    $('div#paper').froalaEditor('destroy');
	  }
	};

	PrintForm.prototype.loadEditor = function(body) {
	  var html = core.utils.Base64.decode(body);

	  var initialize = new Promise(function(resolve, reject) {
	    window.jQuery('div#paper').froalaEditor({
	      toolbarButtons   : ['file-o', 'floppy-o', 'adjust', 'phone',  'textRotate', 'calculator', '|', 'bold', 'italic', 'underline', 'fontSize', '|', 'color', /*'paragraphStyle'*/ , '|', 'paragraphFormat', '|', 'alignLeft', 'alignCenter', 'alignRight', '|', /*'formatOL'*/, 'formatUL', '|', 'outdent', 'indent', '|', 'insertImage', 'insertTable', '|', 'html', '|', 'undo', 'redo', '|', /*'cog', 'rotateDocument' */, 'customCalculationCell'/*, '|', 'zoom-out', 'zoom-in'*/ ],
	      language         : 'ru',
	      charCounterCount : false,
	      toolbarSticky    : false
	    });
	    resolve(true);
	  });

	  initialize.then(function(editor) {
	    $('div#paper').froalaEditor('html.set', (html ? html : '<p>') + '<p>');
	  }).then(function(editor) {
	    // var parent = document.querySelector('.fr-wrapper').parentNode;
	    // parent.removeChild( document.querySelector('.fr-wrapper').nextSibling ) ;
	    // return editor;
	  }).catch(function(result) {

	    console.log("ERROR!", result);
	  });

	};
	PrintForm.prototype.loadEditors = function(body) {
	  var html = core.utils.Base64.decode(body);
	  console.log( 'decoded:', html );
	}


	PrintForm.prototype.attachEvents = function(){
	  var printForm = this;
	  
	  core.events.subscribe("core:template:print-forms:editor", function(template){
	    printForm.update( template.raw );
	  });
	  
	  core.events.subscribe("core:print-form:loaded", function(data){
	    printForm.loadEditor( data.raw.body );
	  });
	  
	};
	PrintForm.prototype.render = function(){
	  console.log( 'PrintForm -> render', this );

	  var helper = {
	    '_id': {
	      text: function (params) {
	        return this._id || '-_id-';
	      }
	    },
	    'name': {
	      text: function (params) {
	        return this.name || '-name-';
	      }
	    },
	    'description': {
	      text: function (params) {
	        return this.description || '-description-';
	      }
	    },
	    'providerId': {
	      text: function (params) {
	        return this.providerId || '-providerId-';
	      }
	    },
	    'query': {
	      text: function (params) {
	        return this.query || '-query-';
	      }
	    },
	    'globalQuery': {
	      text: function (params) {
	        return this.globalQuery || '-globalQuery-';
	      }
	    }
	  };

	  Transparency.render( this.element.querySelector('#print-form'), this, helper );
	};


	var PrintForms = function(){
	  this.element   = {};
	  this.documents = {};
	  this.bindEvents();
	};
	PrintForms.prototype.PrintForm = PrintForm;
	PrintForms.prototype.init = function(){
	  core.events.publish( "[ + ] core:print-forms:init" );

	  this.element = document.createElement('div');
	  // core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	  
	  core.events.publish("core:print-forms:template");
	};
	PrintForms.prototype.bindEvents = function(){
	};
	PrintForms.prototype.updateRootElement = function(html){
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};

	PrintForms.prototype.render = function(){
	  if ( !Object.keys(this.documents).length ){
	    return false;
	  }

	  for (var type in this.documents) {
	    // console.log( 'render -> type, documents', type,this.element.querySelector('.'+type),   this.documents[type] );
	    var helper = {
	      type: {
	        text: function (params) {
	          return this.type;
	        }
	      }
	    };
	    helper[type] = {
	        '_id': {
	          text: function (params) {
	            return this._id || '-id-';
	          }
	        },
	        name: {
	          text: function (params) {
	            return this.name || '-name-';
	          }
	        },
	        link: {
	          href: function (params) {
	            return '#print-forms/' + this._id;
	          }
	        }
	    };

	    var config = {
	      type: type
	    };
	    config[type] = this.documents[type];

	    Transparency.render( this.element.querySelector('.print-form-'+type), config, helper );
	  }
	};

	PrintForms.prototype.add = function( type, config ) {

	  if ( !this.documents.hasOwnProperty(type) ) {
	    this.documents[type] = [];
	  }

	  this.documents[type].push( new this.PrintForm(config) );
	};
	PrintForms.prototype.clear = function(config) {
	  this.documents = {};
	};
	PrintForms.prototype.find = function(id) {
	  for (var type in this.documents) {
	    for (var i = this.documents[type].length - 1; i >= 0; i--) {
	      if( this.documents[type][i]._id === id ){
	        return this.documents[type][i];
	      }
	    }
	  }
	};

	PrintForms.prototype.show = function(id) {
	  console.log( 'PrintForms: show -> ', id);
	  var printForm = this.find(id);
	  if ( print-form ) {
	    printForm.init();
	  } else {
	    throw new Error('template not found!');
	  }
	};

	PrintForms.prototype.start = function() {
	  console.log( 'PrintForms: start' );
	  this.init();
	};
	PrintForms.prototype.stop = function() {
	  console.log( 'PrintForms: stop' );
	};
	PrintForms.prototype.destroy = function() {
	  console.log( 'PrintForms: destroy' );
	  this.element = [];
	};

	module.exports = PrintForms;

/***/ },
/* 16 */
/***/ function(module, exports) {

	"use strict";

	var BusinessFormSettings = function(config){
	  this.current_date = new Date();
	  this.currentYear  = this.current_date.getFullYear();
	  this.periodStart  = this.current_date;
	  this.periodEnd    = this.current_date;
	  this.main         = this.current_date.getFullYear();
	  this.compare      = this.current_date.getFullYear()-1;
	  this.BsYearbusinessForm = config.BsYearbusinessForm || false;
	  this.isTemplate   = config.isTemplate || false;
	  this.isNew        = config.isNew || true;
	};

	var BusinessForm = function(config){
	  this.element     = {};
	  this._id         = config._id         || '';
	  this.name        = config.name        || '';
	  this.description = config.description || '';
	  this.author      = config.author;
	  this.providerId  = config.provider_id;
	  this.query       = {};
	  this.globalQuery = {};
	  this.settings    = new BusinessFormSettings(config.settings);
	};
	BusinessForm.prototype.init = function(){

	  this.detachEvents();
	  this.attachEvents();
	  this.destroyEditor();
	  
	  
	  console.log( 'BusinessForm -> init' );

	  this.element = document.createElement('div');
	  core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	  core.events.publish("core:bps:editor:template");
	  core.events.publish("core:bp:load", this._id );
	};
	BusinessForm.prototype.update = function(html){
	  console.log( 'BusinessForm -> update' );
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};
	BusinessForm.prototype.load = function(){
	  console.log( 'BusinessForm -> bindEvents' );
	};
	BusinessForm.prototype.detachEvents = function(){
	  core.events.remove("core:template:bps:editor");
	  core.events.remove("core:bp:loaded");
	};
	BusinessForm.prototype.destroyEditor = function() {
	  if ($('div#paper').data('froala.editor')) {
	    $('div#paper').froalaEditor('destroy');
	  }
	};

	BusinessForm.prototype.loadEditor = function(body) {
	  var html = core.utils.Base64.decode(body);

	  var initialize = new Promise(function(resolve, reject) {
	    window.jQuery('div#paper').froalaEditor({
	      toolbarButtons   : ['file-o', 'floppy-o', 'adjust', 'phone',  'textRotate', 'calculator', '|', 'bold', 'italic', 'underline', 'fontSize', '|', 'color', /*'paragraphStyle'*/ , '|', 'paragraphFormat', '|', 'alignLeft', 'alignCenter', 'alignRight', '|', /*'formatOL'*/, 'formatUL', '|', 'outdent', 'indent', '|', 'insertImage', 'insertTable', '|', 'html', '|', 'undo', 'redo', '|', /*'cog', 'rotateDocument' */, 'customCalculationCell'/*, '|', 'zoom-out', 'zoom-in'*/ ],
	      language         : 'ru',
	      charCounterCount : false,
	      toolbarSticky    : false
	    });
	    resolve(true);
	  });

	  initialize.then(function(editor) {
	    $('div#paper').froalaEditor('html.set', (html ? html : '<p>') + '<p>');
	  }).then(function(editor) {
	    // var parent = document.querySelector('.fr-wrapper').parentNode;
	    // parent.removeChild( document.querySelector('.fr-wrapper').nextSibling ) ;
	    // return editor;
	  }).catch(function(result) {

	    console.log("ERROR!", result);
	  });

	};
	BusinessForm.prototype.loadEditors = function(body) {
	  var html = core.utils.Base64.decode(body);
	  console.log( 'decoded:', html );
	}


	BusinessForm.prototype.attachEvents = function(){
	  var bp = this;
	  
	  core.events.subscribe("core:template:bps:editor", function(template){
	    bp.update( template.raw );
	  });
	  
	  core.events.subscribe("core:bp:loaded", function(data){
	    bp.loadEditor( data.raw.body );
	  });
	  
	};
	BusinessForm.prototype.render = function(){
	  console.log( 'BusinessForm -> render', this );

	  var helper = {
	    '_id': {
	      text: function (params) {
	        return this._id || '-_id-';
	      }
	    },
	    'name': {
	      text: function (params) {
	        return this.name || '-name-';
	      }
	    },
	    'description': {
	      text: function (params) {
	        return this.description || '-description-';
	      }
	    },
	    'providerId': {
	      text: function (params) {
	        return this.providerId || '-providerId-';
	      }
	    },
	    'query': {
	      text: function (params) {
	        return this.query || '-query-';
	      }
	    },
	    'globalQuery': {
	      text: function (params) {
	        return this.globalQuery || '-globalQuery-';
	      }
	    }
	  };

	  Transparency.render( this.element.querySelector('#bp'), this, helper );
	};


	var BusinessForms = function(){
	  this.element   = {};
	  this.documents = {};
	  this.bindEvents();
	};

	BusinessForms.prototype.addItemToLeftPanel = function( config ){
	  // <li class="menu-item mdl-list__item mdl-list__item--two-line" action="my">
	  //   <span class="mdl-list__item-primary-content">
	  //     <i class="material-icons mdl-list__item-avatar">folder</i>
	  //     <span class="document-name">Мои документы</span>
	  //     <span class="mdl-list__item-sub-title">100 документов</span>
	  //   </span>
	  // </li>
	  // 
	  var item = document.createElement('li');
	  item.className = 'menu-item mdl-list__item';
	  item.setAttribute('action', config.action );

	  var content = document.createElement('span');
	  content.className = 'mdl-list__item-primary-content';

	  if ( config.icon ) {
	    var icon = document.createElement('i');
	    icon.className   = 'material-icons mdl-list__item-avatar';
	    icon.textContent = config.icon;
	    content.appendChild( icon );
	  }

	  if ( config.name ) {
	    var name = document.createElement('span');
	    name.className   = 'document-name';
	    name.textContent = config.name;
	    content.appendChild( name );
	  }

	  if ( config.count ) {
	    var count = document.createElement('span');
	    count.className   = 'mdl-list__item-sub-title';
	    count.textContent = config.count;
	    content.appendChild( count );
	  }

	  if ( config.name && config.count ) {
	    item.classList.add('mdl-list__item--two-line');
	  }

	  item.appendChild( content );
	  this.leftPanel.appendChild( item );
	}

	BusinessForms.prototype.renderLeftPanel = function(){
	  this.leftPanel = document.createElement('ul');
	  this.leftPanel.className = 'panel menu-list mdl-list mdl-cell--hide-phone mdl-shadow--0dp';
	  
	  this.addItemToLeftPanel({
	    action : 'event',
	    name   : 'event_bps',
	    icon   : 'event',
	    count  : '100'
	  });
	  this.addItemToLeftPanel({
	    action : 'code',
	    name   : 'code_bps',
	    icon   : 'code'
	  });
	  this.addItemToLeftPanel({
	    action : 'done',
	    name   : 'done_bps',
	    icon   : 'done',
	    count  : '100'
	  });
	  this.addItemToLeftPanel({
	    action : 'start',
	    name   : 'start_bps',
	    icon   : 'start'
	  });

	  core.dom.leftPanel.appendChild( this.leftPanel );


	  // <ul class="panel menu-list mdl-list mdl-cell--hide-phone mdl-shadow--0dp">
	    
	  //   <li class="menu-item mdl-list__item mdl-list__item--two-line" action="shared">
	  //     <span class="mdl-list__item-primary-content">
	  //       <i class="material-icons mdl-list__item-avatar">folder_shared</i>
	  //       <span class="document-name">Общие документы</span>
	  //       <span class="mdl-list__item-sub-title">100 документов</span>
	  //     </span>
	  //   </li>
	    
	  //   <li class="menu-item mdl-list__item mdl-list__item--one-line" action="templates">
	  //     <span class="mdl-list__item-primary-content">
	  //       <i class="material-icons mdl-list__item-avatar">person</i>
	  //       <span class="document-name">Шаблоны</span>
	  //       <span class="mdl-list__item-sub-title"></span>
	  //     </span>
	  //   </li>
	  // </ul>
	}

	BusinessForms.prototype.render = function() {
	  core.events.publish( "core:dom:application:clear" );
	  this.renderLeftPanel();
	  // this.buildContent();
	  // this.buildInfoPanel();
	  // core.dom.content
	  // core.dom.infoPanel
	}


	BusinessForms.prototype.BusinessForm = BusinessForm;
	BusinessForms.prototype.init = function(){
	  core.events.publish( "[ + ] core:bps:init" );

	  this.element = document.createElement('div');
	  // core.dom.application.querySelector('.core-layout-application').appendChild( this.element );
	  
	  core.events.publish("core:bps:template");
	};
	BusinessForms.prototype.bindEvents = function(){
	  var bps = this;

	  document.addEventListener('DOMContentLoaded', function(){
	    
	    core.events.subscribe("bps:reports:render", function(){
	      bps.render();
	    });

	    core.events.subscribe("core:bps:loaded", function(rawData){
	      // console.log( 'RAW BusinessForms', rawData );
	      for (var type in rawData ) {
	        var data = rawData[type];

	        // console.log( '***++', type, rawData.raw[type] );
	        
	        for (var i = data.length - 1; i >= 0; i--) {
	          var _d = data[i];
	          var bp = {
	            _id         : _d._id,
	            name        : _d.name,
	            description : _d.description,
	            update_at   : _d.updated_at,
	            
	            author : {
	              id   : _d.author_id,
	              name : _d.author_id
	            },

	            providerId  : _d.provider_id,

	            query       : _d.query,
	            globalQuery : _d.globalQuery,

	            settings : {
	              periodStart  : _d.periodStart,
	              periodEnd    : _d.periodEnd,
	              main         : _d.main,
	              compare      : _d.compare,
	              BsYearbusinessForm : _d.BearbusinessForm,
	              isTemplate   : _d.template,
	              providerSelected : _d.providerSelected
	            }
	          };
	          bps.add( type, bp );
	          
	          // core.events.publish("core:card:add", {
	          //   type:type,
	          //   bp:bp
	          // });
	        }
	      }
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe("core:bps:start", function( template ){
	      console.log('BusinessForms <- core:bps:start');
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe("core:template:bps", function( template ){
	      bps.updateRootElement( template.raw );
	    });

	    // клик по меню с документами
	    core.events.subscribe("core:bps:menu:select", function( menuItem ){
	      console.log( 'BusinessForms <- core:bps:menu:select', menuItem );
	      core.events.publish( "core:router:default" );
	    });

	  });
	};
	BusinessForms.prototype.updateRootElement = function(html){
	  this.element.innerHTML = html;
	  this.element.classList.add('animated');
	  this.element.classList.add('fadeIn');
	  this.render();
	};

	BusinessForms.prototype._render = function(){
	  if ( !Object.keys(this.documents).length ){
	    return false;
	  }

	  for (var type in this.documents) {
	    // console.log( 'render -> type, documents', type,this.element.querySelector('.'+type),   this.documents[type] );
	    var helper = {
	      type: {
	        text: function (params) {
	          return this.type;
	        }
	      }
	    };
	    helper[type] = {
	        '_id': {
	          text: function (params) {
	            return this._id || '-id-';
	          }
	        },
	        name: {
	          text: function (params) {
	            return this.name || '-name-';
	          }
	        },
	        link: {
	          href: function (params) {
	            return '#bps/' + this._id;
	          }
	        }
	    };

	    var config = {
	      type: type
	    };
	    config[type] = this.documents[type];

	    Transparency.render( this.element.querySelector('.bp-'+type), config, helper );
	  }
	};

	BusinessForms.prototype.add = function( type, config ) {

	  if ( !this.documents.hasOwnProperty(type) ) {
	    this.documents[type] = [];
	  }

	  this.documents[type].push( new this.BusinessForm(config) );
	};
	BusinessForms.prototype.clear = function(config) {
	  this.documents = {};
	};
	BusinessForms.prototype.find = function(id) {
	  for (var type in this.documents) {
	    for (var i = this.documents[type].length - 1; i >= 0; i--) {
	      if( this.documents[type][i]._id === id ){
	        return this.documents[type][i];
	      }
	    }
	  }
	};

	BusinessForms.prototype.show = function(id) {
	  console.log( 'BusinessForms: show -> ', id);
	  var bp = this.find(id);
	  if ( bp ) {
	    bp.init();
	  } else {
	    throw new Error('template not found!');
	  }
	};

	BusinessForms.prototype.start = function() {
	  console.log( 'BusinessForms: start' );
	  this.init();
	};
	BusinessForms.prototype.stop = function() {
	  console.log( 'BusinessForms: stop' );
	};
	BusinessForms.prototype.destroy = function() {
	  console.log( 'BusinessForms: destroy' );
	  this.element = [];
	};

	module.exports = BusinessForms;

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = function(){
	  document.addEventListener('DOMContentLoaded', function(){ 

	    core.events.subscribe("core:dom:build:ready", function(){
	      console.log('Core <- core:dom:build:ready');

	      core.events.publish("core:dom:attach:progressbar");
	      core.events.publish("core:preloader:start");
	    });

	    core.events.subscribe("core:preloader:finish", function(){
	      console.log('Core <- core:preloader:finish');
	      core.events.publish("core:dom:remove:progressbar");
	    });

	    core.events.subscribe( "core:template:load", function (template) {
	      core.worker.postMessage( [ 'template:load', template ] )
	    });

	    core.events.subscribe( "core:current:set", function ( module ) {
	      core.setCurrent( module );
	    });

	    // загрузка всех отчетов
	    // core.events.subscribe( "core:reports:loaded", function (data) {
	    //   console.log( "core:reports:loaded", data );
	    //   core.worker.postMessage( [ 'reports:load', {} ] )
	    // });

	    // загрузка отчета по id
	    core.events.subscribe( "core:report:load", function (id) {
	      core.worker.postMessage( [ 'reports:id', id ] )
	    });

	    core.events.subscribe( "core:web-form:load", function (id) {
	      core.worker.postMessage( [ 'web-forms:id', id ] )
	    });

	    core.events.subscribe( "core:events:editor:set:html", function ( html ) {
	      core.dom.content.innerHTML = '';

	      if ( $(core.dom.content).data('froala.editor')) {
	        $(core.dom.content).froalaEditor('destroy');
	      }
	      
	      $( core.dom.content ).froalaEditor();
	      $( core.dom.content ).froalaEditor('html.set', html );
	    });


	    core.events.subscribe( "core:layout:template:ready", function (template) {
	      // console.log('layout: ', template);
	      core.events.publish('core:dom:build', template );
	    });


	    core.events.subscribe( "core:reports:load", function () {
	      console.log('Core <- core:reports:load' );
	      core.worker.postMessage( [ 'reports:load', '' ] );
	    });


	    core.events.subscribe( "core:web-forms:load", function ( id ) {
	      console.log('Core <- core:web-forms:load' );
	      core.worker.postMessage( [ 'web-forms:load', '' ] );
	    });
	    core.events.subscribe( "core:web-forms:loaded", function (template) {
	      console.log('Core <- core:web-forms:loaded' );
	      core.events.publish( "core:preloader:task:ready" );
	    });
	    core.events.subscribe( "core:print-forms:load", function (template) {
	      console.log('Core <- core:print-forms:load' );
	      core.worker.postMessage( [ 'print-forms:load', '' ] );
	    });
	    core.events.subscribe( "core:print-forms:loaded", function (template) {
	      console.log('Core <- core:print-forms:loaded' );
	      core.events.publish( "core:preloader:task:ready" );
	    });
	    core.events.subscribe( "core:bps:load", function (template) {
	      console.log('Core <- core:bps:load' );
	      core.worker.postMessage( [ 'bps:load', '' ] );
	    });
	    core.events.subscribe( "core:bps:loaded", function (template) {
	      console.log('Core <- core:bps:loaded' );
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe( "core:criterias:load", function (template) {
	      console.log('Core <- core:criterias:load' );
	      core.worker.postMessage( [ 'criterias:load', '' ] );
	    });
	    core.events.subscribe( "core:criterias:loaded", function (template) {
	      console.log('Core <- core:criterias:loaded' );
	      core.events.publish( "core:preloader:task:ready" );
	    });

	    core.events.subscribe( "core:criteriaKeys:loaded", function (template) {
	      console.log('Core <- core:criteriaKeys:loaded' );
	      core.events.publish( "core:preloader:task:ready" );
	    });
	    core.events.subscribe( "core:criteriaKeys:load", function (template) {
	      console.log('Core <- core:criteriaKeys:load' );
	      core.worker.postMessage( [ 'criteriaKeys:load', '' ] );
	    });

	    core.events.subscribe('core:custom:load', function(){
	      var elements = [ 'layout', 'progressbar' ];

	      console.log( 'Core <- core:custom:load ' );
	      core.loadCustomElements( elements );
	      core.events.publish( "core:preloader:task:ready" );
	    });



	    // core.worker.postMessage( [ 'reports:all', {} ] );
	  }, false);
	}(window);

/***/ },
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var RestrictionDecorator = __webpack_require__(28);
	var AxisDecorator        = __webpack_require__(30);
	var SnapDecorator        = __webpack_require__(31);
	var PositionDecorator    = __webpack_require__(29);
	var Positions            = __webpack_require__(32);

	var isDrag = false;

	var Drag = function(el, config) {
	  var scope = this;

	  this.el = el;
	  this.options = {
	    activeClass : config && config.hasOwnProperty('activeClass') ? config.activeClass : '',
	    snapX       : config && config.hasOwnProperty('snapX')       ? config.snapX       : 1,
	    snapY       : config && config.hasOwnProperty('snapY')       ? config.snapY       : 1,
	    axisX       : config && config.hasOwnProperty('axisX')       ? config.axisX       : true,
	    axisY       : config && config.hasOwnProperty('axisY')       ? config.axisY       : true,
	    restrict    : config && config.hasOwnProperty('restrict')    ? config.restrict    : 'document',
	    onStart     : config && config.hasOwnProperty('onStart')     ? config.onStart     : function(e, obj) {},
	    onDrag      : config && config.hasOwnProperty('onDrag')      ? config.onDrag      : function(e, obj) {},
	    onStop      : config && config.hasOwnProperty('onStop')      ? config.onStop      : function(e, obj) {}
	  };
	  var box = this.el.getBoundingClientRect();

	  this.el.style.top      = box.top  + 'px';
	  this.el.style.left     = box.left + 'px';
	  this.el.style.position = "absolute";

	  this.Positions = new Positions(this.options);

	  if (this.options.axisX == false || this.options.axisY == false) {
	    this.Positions = new AxisDecorator(this.Positions);
	  }

	  if (this.options.snapX != 1 || this.options.snapY != 1) {
	    this.Positions = new SnapDecorator(this.Positions);
	  }

	  this.Positions = new RestrictionDecorator(
	    this.Positions,
	    this.el,
	    this.options.restrict
	  );

	  this.el.onmousedown = function(e) {
	    scope.mousedownHandler(e);
	  };

	  this.el.ontouchstart = function(e) {
	    e.preventDefault();
	    scope.mousedownHandler(e.changedTouches[0]);
	  };
	};
	Drag.prototype.mousedownHandler = function(e) {

	  var event = document.all ? window.event : e,
	    scope   = this,
	    mouseX  = document.all ? window.event.clientX : e.pageX,
	    mouseY  = document.all ? window.event.clientY : e.pageY;

	  if (event.preventDefault) {
	    event.preventDefault();
	  }
	  else {
	    document.onselectstart = function() {
	      return false;
	    };
	  }

	  if ( this.options.activeClass ) {
	    this.el.classList.add( this.options.activeClass );
	  }

	  if (typeof this.options.onStart === 'function') {
	    this.options.onStart(event, this.el);
	  }

	  isDrag = true;
	  this.el.style.zIndex = 99999;

	  this.Positions.setPoints({
	    firstMouseX : mouseX,
	    firstMouseY : mouseY,
	    elementX    : (mouseX - this.el.offsetLeft),
	    elementY    : (mouseY - this.el.offsetTop)
	  });

	  document.onmousemove = function(e) {
	    var event = document.all ? window.event : e;
	    scope.mousemoveHandler(event);
	  };

	  document.ontouchmove = function(e) {
	    var event = e.changedTouches[0];
	    scope.mousemoveHandler(event);
	  };

	  document.onmouseup = function(e) {
	    var event = document.all ? window.event : e;
	    scope.mouseupHandler(event);
	  };

	  document.ontouchend = function(e) {
	    var event = e.changedTouches[0];
	    scope.mouseupHandler(event);
	  };
	};
	Drag.prototype.mousemoveHandler = function(e) {
	  var mouseX = document.all ? window.event.clientX : e.pageX,
	      mouseY = document.all ? window.event.clientY : e.pageY;

	  this.Positions.setPoints({
	    lastMouseX: mouseX,
	    lastMouseY: mouseY
	  });

	  if (isDrag === false){
	    return;
	  }

	  if (this.Positions.getX() !== null) {
	    this.el.style.left = this.Positions.getX() + 'px';
	  }

	  if (this.Positions.getY() !== null) {
	    this.el.style.top = this.Positions.getY() + 'px';
	  }

	  e['distanceX'] = this.Positions.getDistanceX();
	  e['distanceY'] = this.Positions.getDistanceY();

	  if (typeof this.options.onDrag === 'function') {
	    this.options.onDrag(e, this.el);
	  }
	};
	Drag.prototype.mouseupHandler = function(e) {
	  if (isDrag === false)
	    return;

	  if ( this.options.activeClass ) {
	    this.el.classList.remove( this.options.activeClass );
	  }

	  e['distanceX'] = this.Positions.getDistanceX();
	  e['distanceY'] = this.Positions.getDistanceY();

	  if (typeof this.options.onStop === 'function') {
	    this.options.onStop(e, this.el);
	  }

	  this.el.style.zIndex = '';
	  isDrag = false;
	};



	var Draggy = function( config ){
	  this.elements = [];
	  this.active   = {};
	  this.attachEvents();
	};

	Draggy.prototype.Constant = {
	  'ACTIVE'   : 'drag-active',
	  'DRAG_OVER': 'drag-over',
	  'DRAG_END':  'drag-end'
	}

	Draggy.prototype.Drag = Drag;

	Draggy.prototype.copy = function () {
	  
	  this.dropZone     = core.dom.content.element;
	  this.dragElements = core.dom.leftPanel.element.querySelectorAll('._drag');
	  this.elementDragged = null;

	  for (var i = 0; i < this.dragElements.length; i++) {
	    console.log( 'el++ ', this.dragElements[i]._config );
	    this.dragElementAttachEvents( this.dragElements[i] );
	  };

	  this.dropZoneAttachEvents();
	}

	Draggy.prototype.dragElementAttachEvents = function( element ){
	  element.setAttribute( 'draggable', true );
	  element.addEventListener('dragstart', this.dragElementDragStart.bind( this, element ) );
	  element.addEventListener('dragend',   this.dragElementDragEnd.bind(   this, element ) );
	};

	Draggy.prototype.dragElementRemoveEvents = function( element ){
	  element.removeAttribute( 'draggable' );
	  element.removeEventListener('dragstart', this.dragElementDragStart );
	  element.removeEventListener('dragend',   this.dragElementDragEnd );
	};

	Draggy.prototype.dragElementDragStart = function( element, e ){
	  console.log('dragstart', element, element._config);
	  e.dataTransfer.effectAllowed = 'move';
	  e.dataTransfer.setData('text', element.outerHTML);
	  e.dataTransfer.setData('config', JSON.stringify(element._config) );
	  element.elementDragged = element;
	}

	Draggy.prototype.dragElementDragEnd   = function( element, e ){
	  // console.log('dragend', element, element._config, e);
	  element.elementDragged = null;
	}

	Draggy.prototype.dropZoneAttachEvents = function(){
	  this.dropZone.addEventListener('dragover',  this.dropZoneDragOver.bind( this, this.dropZone ) );
	  this.dropZone.addEventListener('dragenter', this.dropZoneDragEnter.bind( this, this.dropZone ) );
	  this.dropZone.addEventListener('dragleave', this.dropZoneDragLeave.bind( this, this.dropZone ) );
	  this.dropZone.addEventListener('drop',      this.dropZoneDrop.bind( this, this.dropZone ) );
	};

	Draggy.prototype.dropZoneDragOver  = function( element, e ){
	  // console.log('dragover');
	  e.preventDefault();
	  e.dataTransfer.dropEffect = 'move';
	}

	Draggy.prototype.dropZoneDragEnter = function( element , e ){
	  // console.log('dragenter');
	  element.classList.add(this.Constant.DRAG_OVER)
	  element.classList.remove(this.Constant.DRAG_END)
	}

	Draggy.prototype.dropZoneDragLeave = function( element, e ){
	  // console.log('dragleave');
	  element.classList.remove(this.Constant.DRAG_OVER)
	  element.classList.add(this.Constant.DRAG_END)
	}

	Draggy.prototype.dropZoneDrop = function( element, e ){
	  console.log('drop', element, element._config );
	  e.preventDefault();
	  e.stopPropagation();
	  
	  // _drag.innerHTML = e.dataTransfer.getData('text');
	  // _drag._config   = JSON.parse( e.dataTransfer.getData('config') );
	  var _config = JSON.parse( e.dataTransfer.getData('config') );
	  _config.preventCopy = false;

	  var _element = core.elements.create( _config );

	  var _drag = document.createElement('div');
	  _drag.appendChild( _element.element );

	  _drag._DragOptions = { snapX: 10,  snapY: 10, activeClass: "active-border" };

	  element.appendChild( _drag );

	  this.dragElementRemoveEvents( _drag );
	  this.clonedElementAttachEvents( _drag );
	  core.modules.drag.add( _drag , _drag._DragOptions );
	  
	  element.elementDragged = null;
	  core.events.publish( "core:dom:material:update" );
	  
	}


	Draggy.prototype.clonedElementAttachEvents = function( element ){
	  element.addEventListener('mouseover',   this.clonedElementMouseOn.bind(  this, element ) );
	  element.addEventListener('mouseout',  this.clonedElementMouseOut.bind( this, element ) );
	};

	Draggy.prototype.clonedElementMouseOn = function( element, e ){
	  
	  // console.log( 'clonedElementMouseOn -> ', element, e );

	  if ( !element.querySelector('.drag-config-button') ) {
	    this.addConfigButton( element );
	  }
	}

	Draggy.prototype.clonedElementMouseOut = function( element, e ){
	  // console.log( 'Draggy.prototype.clonedElementMouseOut ->', element, e );
	  if ( !!element.querySelector('.drag-config-button') && element !== this.active ) {
	    this.removeConfigButton( element );
	  }
	}

	Draggy.prototype.addConfigButton = function( element ){
	  var box = element.getBoundingClientRect();

	  var config = document.createElement('div');
	  config.classList.add('drag-config-button')

	  config.style.positions = 'absolute';
	  config.style.top       = box.top + 'px';
	  config.style.left      = box.left + 'px';
	  config.style.height    = box.height + 'px';
	  config.style.width     = box.width + 20 + 'px';

	  // <button class="mdl-button mdl-js-button mdl-button--icon">
	  //   <i class="material-icons">mood</i>
	  // </button>
	  
	  var configButton = document.createElement('button');
	  configButton.className = 'mdl-button mdl-js-button mdl-button--icon';
	  var icon = document.createElement('icon');
	  icon.className = 'material-icons drag-small-font';
	  icon.textContent = 'settings';
	  configButton.appendChild( icon );

	  var deleteButton = document.createElement('button');
	  deleteButton.className = 'mdl-button mdl-js-button mdl-button--icon';
	  var icon = document.createElement('icon');
	  icon.className = 'material-icons drag-small-font';
	  icon.textContent = 'clear';
	  deleteButton.appendChild( icon );

	  configButton.addEventListener( 'click', this.showInfoPanel.bind(this, element ) );
	  deleteButton.addEventListener( 'click', this.deleteElement.bind(this, element ) );
	  
	  config.appendChild( configButton );
	  config.appendChild( deleteButton );

	  element.appendChild( config );
	}

	Draggy.prototype.showInfoPanel = function( element, e ){
	  console.log( 'showInfoPanel', element, element._DragOptions, element._config );
	  
	  core.events.publish("core:web-forms:infoPanel:show", element.firstElementChild );
	  core.events.publish("core:dom:infoPanel:show");
	}

	Draggy.prototype.deleteElement = function( element, e ){
	  console.log( 'deleteElement', element );
	  this.remove( element );
	}

	Draggy.prototype.remove = function( element ){
	  console.log( 'Draggy.prototype.remove', element );
	  
	  for (var i = 0, length = this.elements.length; i < length; i++) {
	    
	    if ( this.elements[i].el == element ) {
	      this.elements[i].el.remove();
	      this.elements.splice(i, 1);

	      core.events.publish("core:dom:infoPanel:hide");
	      setTimeout( function(){ core.events.publish("core:dom:infoPanel:clear") } , 500);
	      break;
	    };

	  };
	}

	Draggy.prototype.removeConfigButton = function( element ){
	  // console.log( 'Draggy.prototype.removeConfigButton ->', element );
	  if ( !!element.querySelector('.drag-config-button') ) {
	    element.querySelector('.drag-config-button').remove();
	  }
	}

	Draggy.prototype.setActive = function( element, e ){
	  // console.log( 'setActive', e, element, element._config);

	  for(var k = 0, length = this.elements.length; k < length; k++){
	    if ( this.elements[k].el !== element ) {
	      this.elements[k].el.classList.remove( this.Constant.ACTIVE );
	      this.removeConfigButton( this.elements[k].el );
	    } else {
	      element.classList.add( this.Constant.ACTIVE );
	      this.active = element;
	    }
	  }
	};

	Draggy.prototype.add = function( element, config ){
	  console.log( 'Draggy.prototype.add', element, element._config );
	  
	  this.elements.push( new this.Drag( element, config ) );
	  element.addEventListener('click', this.setActive.bind(this, element) );
	};

	Draggy.prototype.export = function(){
	  var result = [];

	  for(var k = 0, length = this.elements.length; k < length; k++){
	    result.push({
	      element : this.elements[k].el.outerHTML,
	      options : {
	        drag    : this.elements[k].options,
	        id      : this.elements[k].el.id,
	        name    : this.elements[k].el.name,
	        title   : this.elements[k].el.title,
	        require : this.elements[k].el.require
	      }
	    });
	  }

	  return JSON.stringify(result);
	};

	Draggy.prototype.attachEvents = function(){
	  var draggy = this;
	  document.addEventListener('DOMContentLoaded', function(){

	    core.events.subscribe("core:drag:attachEvents", function(){
	      console.log('Draggy <- core:drag:attachEvents');
	      draggy.copy();
	    });

	    core.events.subscribe("core:drag:export", function(){
	      console.log('Draggy <- core:drag:export');

	      core.events.publish("core:web-forms:drag:export:result", draggy.export() );
	    });

	  });
	};



	module.exports = Draggy;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PositionDecorator = __webpack_require__(29);


	var RestrictionDecorator = function (Positions, el, restrictEl) {
	  PositionDecorator.call(this, Positions);

	  restrictEl = restrictEl || 'document';
	  this.el = el;

	  if (restrictEl == 'document') {
	    this.restrictWidth = window.innerWidth || document.body.clientWidth;
	    this.restrictHeight = window.innerHeight || document.body.clientHeight;
	  }
	  else {

	    if (typeof restrictEl != 'object'){
	      throw new Error('Restrict must be object: document.getElementById("obj_id")');
	    }

	    restrictEl.style.position = 'relative';

	    this.restrictWidth = restrictEl.offsetWidth;
	    this.restrictHeight = restrictEl.offsetHeight;
	  }
	}
	RestrictionDecorator.prototype = new PositionDecorator();
	RestrictionDecorator.prototype.getX = function() {
	  if (this.Positions.getX() < 0) {
	    return 0;
	  }
	  else if (this.Positions.getX() >
	    (this.restrictWidth - this.el.offsetWidth)) {
	    return (this.restrictWidth - this.el.offsetWidth);
	  }

	  return this.Positions.getX();
	};
	RestrictionDecorator.prototype.getY = function() {
	  if (this.Positions.getY() < 0) {
	    return 0;
	  }
	  else if (this.Positions.getY() >
	    (this.restrictHeight - this.el.offsetHeight)) {
	    return (this.restrictHeight - this.el.offsetHeight);
	  }

	  return this.Positions.getY();
	};
	module.exports = RestrictionDecorator;

/***/ },
/* 29 */
/***/ function(module, exports) {

	'use strict';

	function PositionDecorator(Positions) {
	  this.Positions = Positions;
	}
	PositionDecorator.prototype.getOptions = function() {
	  return this.Positions.getOptions();
	};
	PositionDecorator.prototype.setPoints = function(points) {
	  this.Positions.setPoints(points);
	};
	PositionDecorator.prototype.getPoints = function() {
	  return this.Positions.getPoints();
	};
	PositionDecorator.prototype.getDistanceX = function() {
	  return this.Positions.getDistanceX();
	};
	PositionDecorator.prototype.getDistanceY = function() {
	  return this.Positions.getDistanceY();
	};
	PositionDecorator.prototype.getX = function() {
	  return this.Positions.getX();
	};
	PositionDecorator.prototype.getY = function() {
	  return this.Positions.getY();
	};
	module.exports = PositionDecorator;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PositionDecorator = __webpack_require__(29);

	var AxisDecorator = function (Positions) {
	  PositionDecorator.call(this, Positions);
	};
	AxisDecorator.prototype = new PositionDecorator();
	AxisDecorator.prototype.getX = function() {
	  var axisX = this.Positions.getOptions().axisX;

	  if (axisX == true) {
	    return this.Positions.getX();
	  }

	  return null;
	};
	AxisDecorator.prototype.getY = function() {
	  var axisY = this.Positions.getOptions().axisY;

	  if (axisY == true) {
	    return this.Positions.getY();
	  }

	  return null;
	};
	module.exports = AxisDecorator;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PositionDecorator = __webpack_require__(29);

	var SnapDecorator = function (Positions) {
	  PositionDecorator.call(this, Positions);
	};
	SnapDecorator.prototype = new PositionDecorator();
	SnapDecorator.prototype.getX = function() {
	  var snapX = this.Positions.getOptions().snapX;

	  return (Math.round(
	    this.Positions.getX() / snapX
	  ) * snapX);
	};
	SnapDecorator.prototype.getY = function() {
	  var snapY = this.Positions.getOptions().snapY;

	  return (Math.round(
	    this.Positions.getY() / snapY
	  ) * snapY);
	};

	module.exports = SnapDecorator;

/***/ },
/* 32 */
/***/ function(module, exports) {

	'use strict';

	var Positions = function(options) {
	  this.options = options;
	  this.points = {
	    elementX: 0,
	    elementY: 0,
	    firstMouseX : 0,
	    firstMouseY : 0,
	    lastMouseX  : 0,
	    lastMouseY  : 0
	  };
	}

	Positions.prototype.getOptions = function() {
	  return this.options;
	};
	Positions.prototype.setPoints =  function(points) {
	  
	  if (points.elementX){
	    this.points.elementX = points.elementX;
	  }

	  if (points.elementY){
	    this.points.elementY = points.elementY;
	  }

	  if (points.firstMouseX){
	    this.points.firstMouseX = points.firstMouseX;
	  }

	  if (points.firstMouseY){
	    this.points.firstMouseY = points.firstMouseY;
	  }

	  if (points.lastMouseX){
	    this.points.lastMouseX = points.lastMouseX;
	  }

	  if (points.lastMouseY){
	    this.points.lastMouseY = points.lastMouseY;
	  }
	};
	Positions.prototype.getPoints = function() {
	  return this.points;
	};
	Positions.prototype.getDistanceX = function() {
	  return Math.abs(this.points.lastMouseX - this.points.firstMouseX);
	};
	Positions.prototype.getDistanceY = function() {
	  return Math.abs(this.points.lastMouseY - this.points.firstMouseY);
	};
	Positions.prototype.getX = function() {
	  return (this.points.lastMouseX - this.points.elementX);
	};
	Positions.prototype.getY = function() {
	  return (this.points.lastMouseY - this.points.elementY);
	};

	module.exports = Positions;

/***/ },
/* 33 */,
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Element = function Element(){
	  this.elements = [];
	};

	Element.prototype.create = function( options ) {
	  var element = null;

	  switch ( options.elementType ) {
	    // forms
	    
	    case 'form':
	      element = this.Form;
	      break;
	    case 'label':
	      element = this.Label;
	      break;
	    case 'input':
	      element = this.Input;
	      break;
	    case 'checkbox':
	      element = this.Checkbox;
	      break;
	    case 'radio':
	      element = this.Radio;
	      break;
	    case 'textarea':
	      element = this.Textarea;
	      break;
	    case 'switch':
	      element = this.Switch;
	      break;

	    case 'list':
	      element = this.List;
	      break;
	    case 'button':
	      element = this.Button;
	      break;
	    case 'card':
	      element = this.Card;
	      break;
	    case 'progressbar':
	      element = this.Progressbar;
	      break;
	    
	    case 'spacer':
	      element = this.Spacer;
	      break;
	    case 'simple':
	      element = this.Simple
	      break;
	    case 'icon':
	      element = this.Icon;
	      break;
	    case 'menu':
	      element = this.Menu;
	      break;
	    case 'table':
	      element = this.Table;
	      break;
	    case 'dialog':
	      element = this.Dialog;
	      break;
	    case 'search':
	      element = this.Search;
	      break;

	    default:
	      break;
	  }
	  
	  if( element === null ) {
	    return false;
	  }

	  var _element = new element( options );

	  if ( options.hasOwnProperty('preventCopy') && !options.preventCopy ) {
	    this.elements.push( _element );
	  }
	  return _element;
	}
	Element.prototype.Form     = __webpack_require__(44);
	Element.prototype.Input    = __webpack_require__(36);
	Element.prototype.Checkbox = __webpack_require__(38);
	Element.prototype.Radio    = __webpack_require__(37);
	Element.prototype.Switch   = __webpack_require__(42);
	Element.prototype.Textarea = __webpack_require__(39);
	Element.prototype.Label    = __webpack_require__(35);

	Element.prototype.Search   = __webpack_require__(59);
	Element.prototype.Dialog   = __webpack_require__(58);

	Element.prototype.Simple   = __webpack_require__(50);
	Element.prototype.Table    = __webpack_require__(55);
	Element.prototype.Menu     = __webpack_require__(53);
	Element.prototype.Icon     = __webpack_require__(49);
	Element.prototype.Spacer   = __webpack_require__(48);

	Element.prototype.Button   = __webpack_require__(43);
	Element.prototype.List     = __webpack_require__(45);
	Element.prototype.Card     = __webpack_require__(46);

	module.exports = Element;

/***/ },
/* 35 */
/***/ function(module, exports) {

	var Label = function Label( config ) {
	  // console.log( 'Label', config );

	  this.element = document.createElement('label');
	  // this.element.className = 'mdl-textfield__label';
	  
	  if ( config && config.hasOwnProperty('text') ) {
	    this.setText( config.text );
	  };
	  if ( config && config.hasOwnProperty('class') ) {
	    this.setClass( config.class );
	  };
	  if ( config && config.hasOwnProperty('for') ) {
	    this.setFor( config.for );
	  };

	  this.element._config = config;

	  this.render();
	}

	Label.prototype.setName = function( string ){
	  // console.log('Label.prototype.setName', string);
	  this.element.name = string;
	};
	Label.prototype.setText = function( string ){
	  // console.log('Label.prototype.setText', string);
	  this.element.textContent = string;
	};
	Label.prototype.setClass = function( string ){
	  // console.log('Label.prototype.setClass', string);
	  this.element.className = string;
	};
	Label.prototype.setFor = function( element ){
	  // console.log('Label.prototype.setFor', element);
	  this.element.setAttribute( 'for', element.id );
	};
	Label.prototype.render = function(){
	  // console.log( 'Label.prototype.render' );
	  return this;
	};

	module.exports = Label;

/***/ },
/* 36 */
/***/ function(module, exports) {

	var Input = function( config ) {
	  this.element = document.createElement( 'div' );
	  this.element.classList.add( this.CSS.ROOT );
	  this.element.classList.add( this.CSS.ROOT_JS );


	  this.input = document.createElement( 'input' );
	  this.input.classList.add( this.CSS.INPUT );
	  this.input.type = 'text';
	  this.input.id   = core.utils.generateId();

	  this.element.setAttribute( 'for', this.input.id );

	  this.label = document.createElement( 'label' );
	  this.label.classList.add( this.CSS.LABEL );

	  this.element.appendChild( this.input );
	  this.element.appendChild( this.label );

	  this._config = config;
	  this.element._config = config;

	  // <!-- Textfield with Floating Label -->
	  //   <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
	  //     <input class="mdl-textfield__input" type="text" id="sample3">
	  //     <label class="mdl-textfield__label" for="sample3">Text...</label>
	  //   </div>

	  this.render();
	}

	Input.prototype.setLabel = function( string ){
	  this.label.textContent = string;
	};
	Input.prototype.setFloat = function(){
	  this.element.classList.add( this.CSS.LABEL_FLOAT );
	};
	Input.prototype.setClass = function( string ){
	  this.element.classList.add( string );
	};

	Input.prototype.render = function( string ){

	  if ( this._config && this._config.hasOwnProperty('class') ) {
	    this.setClass( this._config.class );
	  };
	  if ( this._config && this._config.hasOwnProperty('label') ) {
	    this.setLabel( this._config.label );
	  };
	  if ( this._config && this._config.hasOwnProperty('float') && this._config.float === true ) {
	    this.setFloat();
	  };

	  return this;
	};

	Input.prototype.CSS = {
	  ROOT        : "mdl-textfield",
	  ROOT_JS     : "mdl-js-textfield",
	  INPUT       : "mdl-textfield__input",
	  LABEL       : "mdl-textfield__label",
	  LABEL_FLOAT : "mdl-textfield--floating-label",
	};

	module.exports = Input;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var Radio = function( config ) {
	  this.element = document.createElement( 'label' );
	  this.element.classList.add( this.CSS.CHECKBOX );
	  this.element.classList.add( this.CSS.CHECKBOX_JS );
	  this.element.classList.add( this.CSS.RIPPLE );


	  this.radio = document.createElement( 'input' );
	  this.radio.classList.add( this.CSS.INPUT );
	  this.radio.type = 'radio';
	  this.radio.id   = core.utils.generateId();

	  this.element.setAttribute( 'for', this.radio.id );

	  this.label = document.createElement( 'span' );
	  this.label.classList.add( this.CSS.LABEL );

	  this.element.appendChild( this.radio );
	  this.element.appendChild( this.label );

	  this._config = config;
	  this.element._config = config;

	  // <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="option-1">
	  //   <input type="radio" id="option-1" class="mdl-radio__button" name="options" value="1" checked>
	  //   <span class="mdl-radio__label">First</span>
	  // </label>

	  this.render();
	}
	Radio.prototype = Object.create( __webpack_require__(36).prototype );
	Radio.prototype.constructor = Radio;

	Radio.prototype.setChecked = function( checked ){
	  this.radio.setAttribute('checked', checked);
	}
	Radio.prototype.setLabel = function( string ){
	  this.label.textContent = string;
	};
	Radio.prototype.setClass = function( string ){
	  this.element.classList.add( string );
	};
	Radio.prototype.setName = function( string ){
	  this.radio.name = string;
	};
	Radio.prototype.setValue = function( string ){
	  this.radio.value = string;
	};

	Radio.prototype.render = function( string ){

	  if ( this._config && this._config.hasOwnProperty('class') ) {
	    this.setClass( this._config.class );
	  };
	  if ( this._config && this._config.hasOwnProperty('checked') ) {
	    this.setChecked( this._config.checked );
	  };
	  if ( this._config && this._config.hasOwnProperty('label') ) {
	    this.setLabel( this._config.label );
	  };
	  if ( this._config && this._config.hasOwnProperty('name') ) {
	    this.setName( this._config.name );
	  };
	  if ( this._config && this._config.hasOwnProperty('value') ) {
	    this.setValue( this._config.value );
	  };

	  return this;
	};

	Radio.prototype.CSS = {
	  INPUT       : "mdl-radio__button",
	  CHECKBOX    : "mdl-radio",
	  CHECKBOX_JS : "mdl-js-radio",
	  LABEL       : "mdl-radio__label",
	  RIPPLE      : "mdl-js-ripple-effect",
	};

	module.exports = Radio;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var Checkbox = function( config ) {
	  this.element = document.createElement( 'label' );
	  this.element.classList.add( this.CSS.CHECKBOX );
	  this.element.classList.add( this.CSS.CHECKBOX_JS );
	  this.element.classList.add( this.CSS.RIPPLE );


	  this.checkbox = document.createElement( 'input' );
	  this.checkbox.classList.add( this.CSS.INPUT );
	  this.checkbox.type = 'checkbox';
	  this.checkbox.id   = core.utils.generateId();

	  this.element.setAttribute( 'for', this.checkbox.id );

	  this.label = document.createElement( 'span' );
	  this.label.classList.add( this.CSS.LABEL );

	  this.element.appendChild( this.checkbox );
	  this.element.appendChild( this.label );

	  this._config = config;
	  this.element._config = config;

	  // <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="checkbox-1">
	  //   <input type="checkbox" id="checkbox-1" class="mdl-checkbox__input" checked>
	  //   <span class="mdl-checkbox__label">Checkbox</span>
	  // </label>

	  this.render();
	}
	Checkbox.prototype = Object.create( __webpack_require__(36).prototype );
	Checkbox.prototype.constructor = Checkbox;

	Checkbox.prototype.setChecked = function( checked ){
	  this.checkbox.setAttribute('checked', checked);
	}

	Checkbox.prototype.setLabel = function( string ){
	  this.label.textContent = string;
	};
	Checkbox.prototype.setClass = function( string ){
	  this.element.classList.add( string );
	};

	Checkbox.prototype.render = function( string ){

	  if ( this._config && this._config.hasOwnProperty('class') ) {
	    this.setClass( this._config.class );
	  };
	  if ( this._config && this._config.hasOwnProperty('checked') ) {
	    this.setChecked( this._config.checked );
	  };
	  if ( this._config && this._config.hasOwnProperty('label') ) {
	    this.setLabel( this._config.label );
	  };

	  return this;
	};

	Checkbox.prototype.CSS = {
	  INPUT       : "mdl-checkbox__input",
	  CHECKBOX    : "mdl-checkbox",
	  CHECKBOX_JS : "mdl-js-checkbox",
	  LABEL       : "mdl-checkbox__label",
	  RIPPLE      : "mdl-js-ripple-effect",
	};

	module.exports = Checkbox;

/***/ },
/* 39 */
/***/ function(module, exports) {

	var Textarea = function( config ) {
	  this.element = document.createElement( 'div' );
	  this.element.classList.add( this.CSS.TEXTAREA );
	  this.element.classList.add( this.CSS.TEXTAREA_JS );


	  this.textarea = document.createElement( 'textarea' );
	  this.textarea.classList.add( this.CSS.INPUT );
	  this.textarea.type = 'text';
	  this.textarea.id   = core.utils.generateId();

	  this.element.setAttribute( 'for', this.textarea.id );

	  this.label = document.createElement( 'label' );
	  this.label.classList.add( this.CSS.LABEL );

	  this.element.appendChild( this.textarea );
	  this.element.appendChild( this.label );

	  this._config = config;
	  this.element._config = config;

	  // <div class="mdl-textfield mdl-js-textfield">
	  //   <textarea class="mdl-textfield__input" type="text" rows= "10" cols="200" id="sample5" ></textarea>
	  //   <label class="mdl-textfield__label" for="sample5">Text lines...</label>
	  // </div>

	  this.render();
	}
	Textarea.prototype.setRows = function( string ){
	  this.textarea.rows = string;
	};
	Textarea.prototype.setCols = function( string ){
	  this.textarea.cols = string;
	};
	Textarea.prototype.setLabel = function( string ){
	  this.label.textContent = string;
	};
	Textarea.prototype.setClass = function( string ){
	  this.element.classList.add( string );
	};

	Textarea.prototype.render = function( string ){

	  if ( this._config && this._config.hasOwnProperty('class') ) {
	    this.setClass( this._config.class );
	  };
	  if ( this._config && this._config.hasOwnProperty('label') ) {
	    this.setLabel( this._config.label );
	  };
	  if ( this._config && this._config.hasOwnProperty('rows') ) {
	    this.setRows( this._config.rows );
	  };
	  if ( this._config && this._config.hasOwnProperty('cols') ) {
	    this.setCols( this._config.cols );
	  };

	  return this;
	};

	Textarea.prototype.CSS = {
	  INPUT       : "mdl-textfield__input",
	  TEXTAREA    : "mdl-textfield",
	  TEXTAREA_JS : "mdl-js-textfield",
	  LABEL       : "mdl-textfield__label"
	};

	module.exports = Textarea;

/***/ },
/* 40 */,
/* 41 */,
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var Switch = function( config ) {
	  this.element      = document.createElement( 'input' );
	  this.element.className = 'mdl-switch__input';
	  this.element.type = 'checkbox';
	  this.element.id   = core.utils.generateId();


	  this.config = config;
	  this.element._config = config;

	  this.render();
	}
	Switch.prototype = Object.create( __webpack_require__(38).prototype );
	Switch.prototype.constructor = Switch;

	Switch.prototype.setChecked = function( checked ){
	  this.element.checked = checked;
	}

	Switch.prototype.setLabel = function( string ){
	  var config = {
	    class : 'mdl-switch mdl-js-switch mdl-js-ripple-effect',
	    for   : this.element
	  };

	  this.label = new this.Label( config );
	};

	Switch.prototype.render = function( string ){
	//////////////
	// Switch //
	//////////////
	// <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="checkbox-1">
	//   <input type="checkbox" id="checkbox-1" class="mdl-checkbox__input" checked>
	//   <span class="mdl-checkbox__label">Switch</span>
	// </label>
	  
	  for( var key in this.config ){
	    var action = core.utils.toCamelCase( 'set.' + key );

	    try{
	      this[ action ]( this.config[ key ] );
	    } catch(e) {
	      // throw new Error('no method in prototype')
	    }
	  }

	  if ( this.hasOwnProperty('label') ) {

	    var span = document.createElement('span');
	    span.className = 'mdl-switch__label';
	    // span.textContent = this.config.label;

	    this.label.element.appendChild( this.element );
	    this.label.element.appendChild( span );

	    this.element = this.label.element;
	  }

	  this.element._config = this.config;
	  return this;
	};


	module.exports = Switch;

/***/ },
/* 43 */
/***/ function(module, exports) {

	var Button = function Button( config ) {
	  this.config = config;

	  this.element = document.createElement( 'button' );
	  this.element.classList.add( this.CSS.BUTTON );
	  this.element.classList.add( this.CSS.BUTTON_JS );
	  this.element.id = core.utils.generateId();

	  this.render();
	}

	Button.prototype.CSS = {
	  BUTTON      : 'mdl-button',
	  BUTTON_FLEX : 'mdl-button__flex',
	  BUTTON_JS   : 'mdl-js-button',
	  BUTTON_ICON : 'mdl-button--icon',
	  FAB         : 'mdl-button--fab',
	  FAB_MINI    : 'mdl-button--mini-fab',
	  EFFECT      : 'mdl-js-ripple-effect',
	  RAISED      : 'mdl-button--raised',
	  ACCENT      : 'mdl-button--accent',
	  ICON        : 'material-icons',
	  RIPPLE      : 'mdl-js-ripple-effect',
	  TOOLTIP     : 'mdl-tooltip',
	}

	Button.prototype.setText = function( text ) {
	  this.element.textContent = text;
	}
	Button.prototype.setFlex = function( text ) {
	  this.element.classList.add( this.CSS.BUTTON_FLEX );
	}
	Button.prototype.setCallback = function( config ) {
	  this.context  = config.context;
	  this.function = config.function;
	}
	Button.prototype.setFab = function() {
	  this.element.classList.add( this.CSS.FAB );
	  this.element.classList.add( this.CSS.FAB_MINI );
	}
	Button.prototype.setRipple = function() {
	  this.element.classList.add( this.CSS.EFFECT );
	}
	Button.prototype.setTooltip = function( text ) {
	  this.tooltip = document.createElement('div');
	  this.tooltip.classList.add( this.CSS.TOOLTIP );
	  this.tooltip.textContent = text;
	  this.tooltip.setAttribute( 'for', this.element.id );
	  this.element.appendChild( this.tooltip );
	}
	Button.prototype.setRaised = function() {
	  this.element.classList.add( this.CSS.RAISED );
	}
	Button.prototype.setColor = function() {
	  this.element.classList.add( this.CSS.ACCENT );
	}
	Button.prototype.setFlat = function() {
	  return this;
	}
	Button.prototype.setClass = function( classes ){
	  if ( classes.length ) {
	    for (var i = classes.length - 1; i >= 0; i--) {
	      this.element.classList.add( classes[i] );
	    }
	  } else {
	    this.element.className += ' ' + classes;
	  }
	};

	Button.prototype.setIcon = function( _icon ) {
	  this.element.classList.add( this.CSS.BUTTON_ICON );

	  var icon = document.createElement('i');
	  icon.classList.add( this.CSS.ICON );
	  icon.textContent = _icon;
	  
	  this.element.appendChild( icon );
	}


	Button.prototype.render = function() {

	  for( var key in this.config ){
	    var action = core.utils.toCamelCase( 'set.' + key );

	    try{
	      this[ action ]( this.config[ key ] );
	    } catch(e) {
	      // throw new Error('no method in prototype')
	      // console.log('no method in prototype', action);
	    }
	  }

	  if ( this.config && this.config.hasOwnProperty('class') ) {
	    this.setClass( this.config.class );
	  };

	  this.element._config = this.config;

	  if ( this.config.hasOwnProperty('callback') && typeof this.config.callback.function === 'function' ) {
	    this.config.callback.context = this.config.callback.context || this;
	    this.element.addEventListener( 'click', this.config.callback.function.bind( this.config.callback.context ), false );
	  }

	  return this;
	};
	module.exports = Button;

/***/ },
/* 44 */
/***/ function(module, exports) {

	var Form = function Form( config ) {

	  this.element = document.createElement('from');
	  
	  if ( config && config.hasOwnProperty('text') ) {
	    this.setText( config.text );
	  };
	  if ( config && config.hasOwnProperty('class') ) {
	    this.setClass( config.class );
	  };
	  if ( config && config.hasOwnProperty('action') ) {
	    this.setAction( config.action );
	  };
	  
	  this.element._config = config;

	  this.render();
	}

	Form.prototype.setName = function( string ){
	  this.element.name = string;
	};
	Form.prototype.setText = function( string ){
	  this.element.textContent = string;
	};
	Form.prototype.setAction = function( string ){
	  this.element.action = string;
	};
	Form.prototype.setClass = function( string ){
	  this.element.className = string;
	};
	Form.prototype.render = function(){
	  return this;
	};

	module.exports = Form;

/***/ },
/* 45 */
/***/ function(module, exports) {

	var List = function List( config ) {

	  this.element = document.createElement('ul');
	  this.element.classList.add( this.CSS.LIST )
	  
	  if ( config && config.hasOwnProperty('class') ) {
	    this.setClass( config.class );
	  };

	  this._config = config;
	  this.element._config = config;
	  
	  this.render();
	}

	List.prototype.setClass = function( string ){
	  this.element.classList.add( string );
	};

	List.prototype.CSS = {
	  LIST                     : 'mdl-list',
	  LIST_ITEM                : "mdl-list__item",
	  LIST_ITEM_TWO_LINE       : "mdl-list__item--two-line",
	  SUB_TITLE                : "mdl-list__item-sub-title",
	  PRIMARY_CONTENT          : "mdl-list__item-primary-content",
	  PRIMARY_CONTENT_HOVER    : "mdl-list__item-primary-content__hover",
	  SECONDARY_CONTENT        : "mdl-list__item-secondary-content",
	  SECONDARY_INFO           : "mdl-list__item-secondary-info",
	  SECONDARY_ACTION         : "mdl-list__item-secondary-action",
	  SECONDARY_ACTION_PRIMARY : "mdl-color-text--grey-400",
	  SECONDARY_ACTION_ACCENT  : "mdl-color-text--accent",
	  MATERIAL_ICONS           : "material-icons",
	  ITEM_ICON                : "mdl-list__item-icon",
	  ITEM_AVATAR              : "mdl-list__item-avatar",
	  BUTTON                   : 'mdl-button',
	  BUTTON_JS                : 'mdl-button-js',
	  BUTTON_ICON              : 'mdl-button--icon',
	}

	List.prototype.render = function(){
	  
	  if ( this._config.hasOwnProperty('items') && this._config.items.constructor === Array ) {
	    var df = document.createDocumentFragment();

	    for (var i = 0, length = this._config.items.length; i < length; i++) {
	      var item = this._config.items[i];

	      var element = document.createElement('li');
	      element.classList.add( this.CSS.LIST_ITEM );

	      if ( item.hasOwnProperty('title') ) {
	        var title = document.createElement('span');
	        title.classList.add( this.CSS.PRIMARY_CONTENT );
	        title.textContent = item.title;

	        if ( item.title.hasOwnProperty('element') ) {
	          title.textContent = '';
	          title.appendChild( item.title.element );
	        }
	        element.appendChild( title );
	      }

	      if ( item.hasOwnProperty('icon') ) {
	        var icon = document.createElement('i');
	        icon.classList.add( this.CSS.MATERIAL_ICONS );
	        icon.classList.add( this.CSS.ITEM_AVATAR );
	        icon.textContent = item.icon;

	        title.insertBefore( icon, title.firstChild );
	      }

	      if ( item.hasOwnProperty('subTitle') ) {
	        var subTitle = document.createElement('span');
	        subTitle.classList.add( this.CSS.SUB_TITLE );
	        subTitle.textContent = item.subTitle;
	        
	        element.classList.add( this.CSS.LIST_ITEM_TWO_LINE );
	        title.appendChild( subTitle );
	      }

	      if ( item.hasOwnProperty('action') ) {
	        
	        var action = document.createElement('span');
	        action.classList.add( this.CSS.SECONDARY_CONTENT );

	        
	        if ( item.action.hasOwnProperty('title') ) {
	          var secondaryInfo = document.createElement('span');
	          secondaryInfo.classList.add( this.CSS.SECONDARY_INFO );
	          secondaryInfo.textContent = item.action.title;
	          action.appendChild( secondaryInfo );
	        }

	        if ( item.action.hasOwnProperty('callback') ) {
	          var button = document.createElement('button');
	          // button.classList.add( this.CSS.SECONDARY_ACTION );
	          // button.classList.add( this.CSS.SECONDARY_ACTION_PRIMARY );
	          button.classList.add( this.CSS.BUTTON );
	          // button.classList.add( this.CSS.BUTTON_JS );
	          button.classList.add( this.CSS.BUTTON_ICON );
	          // button.href = '#';
	          action.appendChild( button );

	          if ( item.action.hasOwnProperty('color') && item.action.color === true ) {
	            button.classList.add( this.CSS.SECONDARY_ACTION_ACCENT );
	          }

	          if ( item.action.hasOwnProperty('callback') && typeof item.action.callback.function === 'function' ) {
	            item.action.callback.context = item.action.callback.context || this;
	            button.addEventListener( 'click', item.action.callback.function.bind( item.action.callback.context ) );
	          }

	          if ( item.action.hasOwnProperty('icon') ) {
	            var secondaryIcon = document.createElement('i');
	            secondaryIcon.classList.add( this.CSS.MATERIAL_ICONS );
	            secondaryIcon.textContent = item.action.icon;
	            button.appendChild( secondaryIcon );
	          }

	        }

	        if ( item.hasOwnProperty('callback') && typeof item.callback.function === 'function' ) {
	          item.callback.context = item.callback.context || this;
	          element.classList.add( this.CSS.PRIMARY_CONTENT_HOVER )
	          element.addEventListener( 'click', item.callback.function.bind( item.callback.context ) );
	        }

	        if ( item.action.hasOwnProperty('element') ) {
	          console.log( 'item.action.element', item.action.element );
	          action.appendChild( item.action.element.element );
	        }
	        
	        element.appendChild( action );
	      }


	      df.appendChild( element );
	      // если передали элемент, то ничего не делаем, просто подпихиваем его сюда
	    }

	    this.element.appendChild( df );
	  }

	  return this;
	};

	module.exports = List;

/***/ },
/* 46 */
/***/ function(module, exports) {

	var Card = function Card( config ) {

	  this.element = document.createElement('div');
	  this.element.classList.add( this.CSS.ROOT );
	  
	  if ( config && config.hasOwnProperty('class') ) {
	    this.setClass( config.class );
	  };
	  if ( config && config.hasOwnProperty('width') ) {
	    this.setWidth( config.width );
	  };
	  if ( config && config.hasOwnProperty('height') ) {
	    this.setHeight( config.height );
	  };

	  if ( config && config.hasOwnProperty('shadow') ) {
	    this.setShadow( config.shadow );
	  };

	  this.element._config = config;
	  this._config = config;

	  this.render();
	}


	Card.prototype.setWidth = function( string ){
	  this.element.style.width = string + 'px';
	};
	Card.prototype.setHeight = function( string ){
	  this.element.style.height = string + 'px';
	};
	Card.prototype.setClass = function( classes ){
	  if ( classes.length ) {
	    for (var i = classes.length - 1; i >= 0; i--) {
	      this.element.classList.add( classes[i] );
	    }
	  } else {
	    this.element.className += ' ' + classes;
	  }
	};
	Card.prototype.setShadow = function( shadow ){
	  this.element.classList.add( "mdl-shadow--" + shadow + "dp" );
	};

	Card.prototype.CSS = {
	  FLEX           : "mdl-card--flex",
	  SHADOW         : "mdl-shadow--2dp",
	  ROOT           : "mdl-card",
	  BORDER         : "mdl-card--border",
	  EXPAND         : "mdl-card--expand",
	  TITLE          : "mdl-card__title",
	  TITLE_TEXT     : "mdl-card__title-text",
	  TITLE_ACTIVE   : 'mdl-card__title--active',
	  SUB_TITLE_TEXT : "mdl-card__subtitle-text",
	  MEDIA          : "mdl-card__media",
	  SUPPORT_TEXT   : "mdl-card__supporting-text",
	  ACTIONS        : "mdl-card__actions",
	  MENU           : "mdl-card__menu",

	}


	Card.prototype.render = function(){

	  var df = document.createDocumentFragment();

	  if ( this._config.hasOwnProperty('title') ){
	    this.title = document.createElement('div');
	    this.title.classList.add( this.CSS.TITLE );
	    
	    if ( this._config.hasOwnProperty('expand') && this._config.expand === true ){
	      this.title.classList.add( this.CSS.EXPAND );
	    }

	    var titleText = document.createElement('h2');
	    titleText.classList.add( this.CSS.TITLE_TEXT );
	    titleText.textContent = this._config.title;

	    this.title.appendChild( titleText );
	    
	    if ( this._config.hasOwnProperty('subTitle') ){
	      var subTitle = document.createElement('div');
	      subTitle.classList.add( this.CSS.SUB_TITLE_TEXT );
	      subTitle.textContent = this._config.subTitle;
	      this.title.appendChild( subTitle );
	    }

	    if ( this._config.hasOwnProperty('callback') && this._config.callback.function.constructor === Function ) {
	      
	      this._config.callback.context = this._config.callback.context || this;
	      this.title.addEventListener( 'click', this._config.callback.function.bind( this._config.callback.context ) );
	      this.title.classList.add( this.CSS.TITLE_ACTIVE );
	      this.title.classList.add( this.CSS.BORDER );

	    }
	    
	    df.appendChild( this.title );
	  }

	  if ( this._config.hasOwnProperty('media') ){
	    if ( this.title ) {
	      // this.title.style.height = '276px';
	      // this.title.style.background = "url('" + this._config.media + "')";
	      // this.title.style.backgroundPosition = 'top';
	      // this.title.style.backgroundRepeat  = 'no-repeat';
	      // this.title.style.backgroundColor   = '#C5CAE9';
	    }
	  }

	  if ( this._config.hasOwnProperty('description') ){
	    var description = document.createElement('h2');
	    description.classList.add( this.CSS.SUPPORT_TEXT );
	    description.textContent = this._config.description;
	    df.appendChild( description );
	  }

	  if ( this._config.hasOwnProperty('actions') && this._config.actions.constructor === Array ) {
	    var action = document.createElement('div');
	    action.classList.add( this.CSS.ACTIONS );
	    action.classList.add( this.CSS.BORDER );
	    action.classList.add( this.CSS.FLEX );

	    for (var i = 0, length = this._config.actions.length; i < length; i++) {
	      var item = this._config.actions[i];

	      if ( item.hasOwnProperty('element') ) {
	        action.appendChild( item.element );
	      }
	    }
	    df.appendChild( action );
	  }

	  if ( this._config.hasOwnProperty('menu') && this._config.menu.constructor === Array ) {
	    var action = document.createElement('div');
	    action.classList.add( this.CSS.MENU );

	    for (var i = 0, length = this._config.menu.length; i < length; i++) {
	      var item = this._config.menu[i];

	      if ( item.hasOwnProperty('element') ) {
	        action.appendChild( item.element );
	      }
	    }
	    df.appendChild( action );
	  }
	  // <div class="mdl-card mdl-shadow--2dp">
	  //   <div class="mdl-card__title">
	  //     <h2 class="mdl-card__title-text">Welcome</h2>
	  //   </div>

	  //   <div class="mdl-card__supporting-text">
	  //     Lorem ipsum dolor sit amet, consectetur adipiscing elit.
	  //     Mauris sagittis pellentesque lacus eleifend lacinia...
	  //   </div>
	  
	  //   <div class="mdl-card__actions mdl-card--border">
	  //     <a class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect">
	  //       Get Started
	  //     </a>
	  //   </div>
	  
	  //   <div class="mdl-card__menu">
	  //     <button class="mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect">
	  //       <i class="material-icons">share</i>
	  //     </button>
	  //   </div>
	  // </div>

	  this.element.appendChild( df );
	  return this;

	  // var card = core.elements.create( {
	  //   elementType : 'card',
	  //   preventCopy : true,

	  //   title    : "title",
	  //   subTitle : "subTitle",
	  //   shadow : 4,
	  //   media  : {
	  //     // image src
	  //     src: '',
	  //   },
	  //   description : {},
	  //   actions : [
	  //     core.elements.create({
	  //       elementType : 'button',
	  //       preventCopy : true,
	  //       name        : 'test-check',
	  //       fab         : true,
	  //       icon        : 'star'
	  //     }),
	  //     '<div class="mdl-layout-spacer"></div>'
	  //     ,
	  //     core.elements.create({
	  //       elementType : 'button',
	  //       preventCopy : true,
	  //       name        : 'test-check',
	  //       fab         : true,
	  //       icon        : 'star'
	  //     })
	  //   ]
	  // });
	};

	module.exports = Card;

/***/ },
/* 47 */,
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var Spacer = function Spacer( config ) {

	  this.element = document.createElement('div');
	  this.element.classList.add( this.CSS.ROOT );
	  this.element._config = config;

	  this.populate();
	  this.render();
	}
	Spacer.prototype = Object.create( __webpack_require__(50).prototype );
	Spacer.prototype.constructor = Spacer;

	Spacer.prototype.CSS = {
	  ROOT: 'mdl-layout-spacer'
	}
	module.exports = Spacer;

/***/ },
/* 49 */
/***/ function(module, exports) {

	var Icon = function Icon( config ) {

	  this.element = document.createElement('i');
	  this.element.classList.add( this.CSS.ROOT );
	  this.element._config = config;

	  if ( config && config.hasOwnProperty('icon') ) {
	    this.setIcon( config.icon );
	  };

	  this.render();
	}

	Icon.prototype.CSS = {
	  ROOT: 'material-icons'
	}

	Icon.prototype.setIcon = function( string ){
	  this.element.textContent = string;
	};

	Icon.prototype.render = function(){
	  return this;
	};

	module.exports = Icon;

/***/ },
/* 50 */
/***/ function(module, exports) {

	var Simple = function Simple( config ) {

	  this.type = 'div';
	  
	  if ( config && config.hasOwnProperty('type') ) {
	    this.type = config.type;
	  };

	  this.element = document.createElement( this.type );
	  this.element._config = config;
	  this._config = config;

	  this.populate();
	  this.render();
	}
	Simple.prototype.populate = function(){
	  if ( this._config && this._config.hasOwnProperty('text') ) {
	    this.setText( this._config.text );
	  };
	  if ( this._config && this._config.hasOwnProperty('class') ) {
	    this.setClass( this._config.class );
	  };
	  if ( this._config && this._config.hasOwnProperty('items') ) {
	    this.addItems();
	  };
	};
	Simple.prototype.setText = function( string ){
	  this.element.textContent = string;
	};
	Simple.prototype.setId = function( id ){
	  this.element.id = id;
	};
	Simple.prototype.setHref = function( href ){
	  this.element.href = href;
	};
	Simple.prototype.setClass = function( classes ){
	  if ( classes.length ) {
	    for (var i = classes.length - 1; i >= 0; i--) {
	      this.element.classList.add( classes[i] );
	    }
	  } else {
	    this.element.className += ' ' + classes;
	  }
	};
	Simple.prototype.addItems = function(){
	  if ( this._config.hasOwnProperty('items') && this._config.items.constructor === Array ) {
	    for (var i = 0, length = this._config.items.length; i < length; i++) {
	      var item = this._config.items[i];

	      if ( item.hasOwnProperty('element') ) {
	        this.element.appendChild( item.element );
	      }

	    }
	  }
	};

	Simple.prototype.render = function(){
	  return this;
	};

	module.exports = Simple;

/***/ },
/* 51 */,
/* 52 */,
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var Menu = function Menu( config ) {
	  this.active  = {};

	  this._config = config;

	  this.element = document.createElement('div');
	  this.element.classList.add( this.CSS.ROOT );

	  this.button = document.createElement('button');
	  this.button.id = core.utils.generateId();
	  this.button.classList.add( this.CSS.BUTTON );
	  this.button.classList.add( this.CSS.BUTTON_JS );

	  this.list = document.createElement('ul');
	  this.list.setAttribute( 'for', this.button.id );
	  this.list.classList.add( this.CSS.MENU );
	  this.list.classList.add( this.CSS.MENU_JS );
	  this.list.classList.add( this.CSS.MENU_RIGHT );

	  this.list.classList.add( this.CSS.RIPPLE );

	  this.element.appendChild( this.button );
	  this.element.appendChild( this.list );

	  this.render();
	}
	Menu.prototype = Object.create( __webpack_require__(50).prototype );
	Menu.prototype.constructor = Menu;

	Menu.prototype.CSS = {
	  ROOT          : 'mdl-menu--wrapper',
	  BUTTON        : 'mdl-button',
	  BUTTON_JS     : 'mdl-js-button',
	  BUTTON_ICON   : 'mdl-button--icon',
	  
	  FAB           : 'mdl-button--fab',
	  FAB_MINI      : 'mdl-button--mini-fab',
	  RAISED        : 'mdl-button--raised',
	  ACCENT        : 'mdl-button--accent',
	  
	  MENU          : 'mdl-menu',
	  MENU_JS       : 'mdl-js-menu',
	  MENU_RIGHT    : 'mdl-menu--bottom-right',
	  // MENU_RIGHT : 'mdl-menu--bottom-left',
	  MENU_ITEM     : 'mdl-menu__item',
	  ICON          : 'material-icons',
	  RIPPLE        : 'mdl-js-ripple-effect',
	  GRAY          : 'mdl-js-ripple-effect',
	  BOLD          : 'mdl-typography--font-bold',
	  GRAY_TEXT     : 'mdl-color-text--grey-800',
	  INLINE        : 'inline',
	  CELL          : 'mdl-cell',
	  CELL_HIDE     : 'mdl-cell--hide-phone',
	  DEVIDER       : 'mdl-menu__item--full-bleed-divider',
	}

	Menu.prototype.setIcon = function( icon ){
	  this.button.classList.add( this.CSS.BUTTON_ICON );
	  this.icon = document.createElement('i');
	  this.icon.classList.add( this.CSS.ICON );
	  this.icon.textContent = icon;
	  this.button.appendChild( this.icon );
	};

	Menu.prototype.setText = function( string ){
	  if ( this.button ) {
	    var text = document.createElement('h5');
	    text.classList.add( this.CSS.GRAY_TEXT );
	    text.classList.add( this.CSS.INLINE );
	    // text.classList.add( this.CSS.CELL );
	    text.classList.add( this.CSS.CELL_HIDE );
	    // text.classList.add( this.CSS.BOLD );
	    text.textContent = string;
	    this.element.insertBefore( text, this.button );
	  } else {
	    this.element.textContent = string;
	  }
	};
	Menu.prototype.setFab = function() {
	  this.button.classList.add( this.CSS.FAB );
	  this.button.classList.add( this.CSS.FAB_MINI );
	}
	Menu.prototype.setColor = function() {
	  this.button.classList.add( this.CSS.ACCENT );
	}

	Menu.prototype.render = function(){
	  
	  if ( this._config && this._config.hasOwnProperty('text') ) {
	    this.setText( this._config.text );
	  };

	  if ( this._config && this._config.hasOwnProperty('icon') ) {
	    this.setIcon( this._config.icon );
	  };

	  if ( this._config && this._config.hasOwnProperty('fab') ) {
	    this.setFab( this._config.fab );
	  };
	  if ( this._config && this._config.hasOwnProperty('color') ) {
	    this.setColor( this._config.color );
	  };
	  
	  if ( this._config.hasOwnProperty('items') && this._config.items.constructor === Array ) {
	    for (var i = 0, length = this._config.items.length; i < length; i++) {
	      var item = this._config.items[i];
	      // console.log( 'menu item', item );

	      if ( item.hasOwnProperty('element') ) {
	        this.element.appendChild( item.element );
	      }
	      // mdl-layout-spacer
	      var _item = document.createElement('li');
	      _item.classList.add( this.CSS.MENU_ITEM );
	      _item.textContent = item.text;

	      if ( item.hasOwnProperty('disabled') && item.disabled === true ) {
	        _item.setAttribute( 'disabled', true );
	      }
	      if ( item.hasOwnProperty('devider') && item.devider === true ) {
	        _item.classList.add( this.CSS.DEVIDER );
	      }

	      if ( item.hasOwnProperty('icon') ) {
	        _item.textContent = '';

	        var wrapper = document.createElement('span');
	        wrapper.classList.add( this.CSS.WRAPPER );
	        wrapper.classList.add( this.CSS.ROOT );

	        var icon = document.createElement('i');
	        icon.classList.add( this.CSS.ICON );
	        icon.classList.add( this.CSS.ROOT );
	        icon.textContent = item.icon;

	        var text = document.createElement('div');
	        text.classList.add( this.CSS.INLINE );
	        text.textContent = item.text;
	        
	        wrapper.appendChild( icon );
	        wrapper.appendChild( text );

	        _item.appendChild( wrapper );
	      }

	      if ( item.hasOwnProperty('callback') && typeof item.callback.function === 'function' ) {
	        item.callback.context = item.callback.context || this;
	        _item.addEventListener( 'click', item.callback.function.bind( item.callback.context ) );
	      }


	      this.list.appendChild( _item );
	      
	    }
	  }
	  return this;
	};


	module.exports = Menu;







/***/ },
/* 54 */
/***/ function(module, exports) {

	'use strict';
	var User = function(){
	  this.name = '';
	  this.id   = '';
	  this.provider = {
	    id   : '',
	    name : '',
	  };
	  this.bindEvents();
	};

	User.prototype.bindEvents = function() {
	  var user = this;

	  document.addEventListener('DOMContentLoaded', function(){
	    core.events.subscribe("core:user:start", function(){
	      console.log('core:user:start');
	      user.start();
	    });
	  });
	};

	User.prototype.start = function() {
	  this.name = core.global.user.name;
	  this.id   = core.global.user.id;
	  this.provider = {
	    id   : core.global.provider.id,
	    name : core.global.provider.name,
	  };
	  core.events.publish( "core:preloader:task:ready" );
	  core.events.publish( "core:dom:user:ready", this );
	};
	User.prototype.stop = function() {
	  // console.log( 'User: stop' );
	};
	User.prototype.destroy = function() {
	  // console.log( 'User: destroy' );
	};

	module.exports = User;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var Table = function Table( config ) {
	  this._config = config;

	  this.element = document.createElement('table');
	  this.element.classList.add( this.CSS.TABLE );
	  this.element.classList.add( this.CSS.TABLE_JS );

	  this.headRoot = document.createElement('thead');
	  this.head = document.createElement('tr');
	  this.headRoot.appendChild( this.head );

	  this.body = document.createElement('tbody');

	  this.element.appendChild( this.headRoot );
	  this.element.appendChild( this.body );

	  this.element._config = config;

	  this.populate();
	  this.render();
	}
	Table.prototype = Object.create( __webpack_require__(50).prototype );
	Table.prototype.constructor = Table;

	Table.prototype.setSelectable = function(){
	  this.element.classList.add( this.CSS.SELECTABLE );
	}

	Table.prototype.setAsc = function(){
	  this.head.classList.add( this.CSS.SORT_ASC );
	}
	Table.prototype.setDesc = function(){
	  this.head.classList.add( this.CSS.SORT_DESC );
	}
	Table.prototype.setHead = function(){
	  if ( this._config.hasOwnProperty('head') && this._config.head.constructor === Array ) {
	    var df = document.createDocumentFragment();

	    for (var i = 0; i < this._config.head.length; i++) {
	      var cell = this._config.head[i];
	      
	      if ( cell.hasOwnProperty('element') ) {
	        df.appendChild( cell.element );
	      } else {
	        var td = document.createElement('th');
	        td.classList.add( this.CSS.STRING );
	        td.textContent = cell;
	        df.appendChild( td );
	      }
	    }
	    this.head.appendChild( df );
	  }
	}
	Table.prototype.setBody = function(){
	  if ( this._config.hasOwnProperty('body') && this._config.body.constructor === Array ) {
	    var df = document.createDocumentFragment();

	    for (var i = 0; i < this._config.body.length; i++) {
	      var _item = this._config.body[i];
	      var tr = document.createElement('tr');

	      for (var z = 0; z < _item.length; z++) {
	        var cell = _item[z];
	        if ( cell.hasOwnProperty('element') ) {
	          tr.appendChild( cell.element );
	        } else {
	          var td = document.createElement('td');
	          td.classList.add( this.CSS.STRING );
	          td.textContent = cell;
	          tr.appendChild( td );
	        }
	      }

	      df.appendChild( tr );
	    }

	    this.body.appendChild( df );
	  }
	}

	Table.prototype.render = function(){
	  
	  if ( this._config.hasOwnProperty('head') ) {
	    this.setHead( this._config.head );
	  };

	  if ( this._config.hasOwnProperty('body') ) {
	    this.setBody( this._config.body );
	  };

	  if ( this._config.hasOwnProperty('selectable') ) {
	    this.setSelectable( this._config.selectable );
	  };
	  if ( this._config.hasOwnProperty('asc') ) {
	    this.setAsc( this._config.asc );
	  };
	  if ( this._config.hasOwnProperty('desc') ) {
	    this.setDesc( this._config.desc );
	  };

	  return this;
	}

	Table.prototype.CSS = {
	  TABLE      : 'mdl-data-table',
	  TABLE_JS   : 'mdl-js-data-table',
	  SELECTABLE : 'mdl-data-table--selectable',
	  SORT_ASC   : 'mdl-data-table__header--sorted-ascending',
	  SORT_DESC  : 'mdl-data-table__header--sorted-descending',
	  STRING     : 'mdl-data-table__cell--non-numeric',
	}
	module.exports = Table;

/***/ },
/* 56 */
/***/ function(module, exports) {

	"use strict";

	var WebForm = function(config){
	  this.element     = {};
	  this.raw         = {};
	  this.body        = '';
	  this._id         = config._id         || '';
	  this.name        = config.name        || '';
	  this.description = config.description || '';
	  this.authorId    = config.author_id   || '';
	  this.providerId  = config.provider_id || '';

	};

	WebForm.prototype.load = function( data ){
	  console.log( 'WebForm -> load', data );
	  this.raw = data;

	  this.detachEvents();
	  this.attachEvents();
	  this.initEditor();
	};

	WebForm.prototype.initEditor = function(){
	  if ( this.hasOwnProperty('raw') && this.raw.hasOwnProperty('body') ) {
	    this.body = core.utils.Base64.decode( this.raw.body );
	  }
	  // console.log( 'web-form -> initEditor : ', this );
	  core.events.emit('core:web-form:show', this );
	}

	WebForm.prototype.detachEvents = function(){
	  console.log('WebForm -> detachEvents');
	  // core.events.remove("core:template:web-forms:editor");
	  // core.events.remove("core:web-form:loaded");
	};
	WebForm.prototype.attachEvents = function(){
	  console.log('WebForm -> attachEvents');
	  // core.events.remove("core:template:web-forms:editor");
	  // core.events.remove("core:web-form:loaded");
	};


	module.exports = WebForm

/***/ },
/* 57 */,
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var supportCustomEvent = window.CustomEvent;

	if (!supportCustomEvent || typeof supportCustomEvent == 'object') {
	  supportCustomEvent = function CustomEvent(event, x) {
	    x = x || {};
	    var ev = document.createEvent('CustomEvent');
	    ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);
	    return ev;
	  };
	  supportCustomEvent.prototype = window.Event.prototype;
	}

	function findNearestDialog(el) {
	  while (el) {
	    if (el.nodeName.toUpperCase() == 'DIALOG') {
	      return /** @type {HTMLDialogElement} */ (el);
	    }
	    el = el.parentElement;
	  }
	  return null;
	}

	function safeBlur(el) {
	  if (el && el.blur && el != document.body) {
	    el.blur();
	  }
	}

	function inNodeList(nodeList, node) {
	  for (var i = 0; i < nodeList.length; ++i) {
	    if (nodeList[i] == node) {
	      return true;
	    }
	  }
	  return false;
	}

	function DialogInfo(dialog) {
	  this.dialog_ = dialog;
	  this.replacedStyleTop_ = false;
	  this.openAsModal_ = false;

	  if (!dialog.hasAttribute('role')) {
	    dialog.setAttribute('role', 'dialog');
	  }

	  dialog.show = this.show.bind(this);
	  dialog.showModal = this.showModal.bind(this);
	  dialog.close = this.close.bind(this);

	  if (!('returnValue' in dialog)) {
	    dialog.returnValue = '';
	  }

	  this.maybeHideModal = this.maybeHideModal.bind(this);
	  if ('MutationObserver' in window) {
	    var mo = new MutationObserver(this.maybeHideModal);
	    mo.observe(dialog, { attributes: true, attributeFilter: ['open'] });
	  } else {
	    dialog.addEventListener('DOMAttrModified', this.maybeHideModal);
	  }

	  Object.defineProperty(dialog, 'open', {
	    set: this.setOpen.bind(this),
	    get: dialog.hasAttribute.bind(dialog, 'open')
	  });

	  this.backdrop_ = document.createElement('div');
	  this.backdrop_.className = 'backdrop';
	  this.backdropClick_ = this.backdropClick_.bind(this);
	}

	DialogInfo.prototype = {

	  get dialog() {
	    return this.dialog_;
	  },

	  maybeHideModal: function() {
	    if (!this.openAsModal_) { return; }
	    if (this.dialog_.hasAttribute('open') &&
	        document.body.contains(this.dialog_)) { return; }

	    this.openAsModal_ = false;
	    this.dialog_.style.zIndex = '';

	    if (this.replacedStyleTop_) {
	      this.dialog_.style.top = '';
	      this.replacedStyleTop_ = false;
	    }

	    // Optimistically clear the modal part of this <dialog>.
	    this.backdrop_.removeEventListener('click', this.backdropClick_);
	    if (this.backdrop_.parentElement) {
	      this.backdrop_.parentElement.removeChild(this.backdrop_);
	    }
	    _Dialog.dm.removeDialog(this);
	  },

	  setOpen: function(value) {
	    if (value) {
	      this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');
	    } else {
	      this.dialog_.removeAttribute('open');
	      this.maybeHideModal();  // nb. redundant with MutationObserver
	    }
	  },

	  backdropClick_: function(e) {
	    var redirectedEvent = document.createEvent('MouseEvents');
	    redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,
	        e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,
	        e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);
	    this.dialog_.dispatchEvent(redirectedEvent);
	    e.stopPropagation();
	  },

	  focus_: function() {
	    var target = this.dialog_.querySelector('[autofocus]:not([disabled])');
	    if (!target) {
	      var opts = ['button', 'input', 'keygen', 'select', 'textarea'];
	      var query = opts.map(function(el) {
	        return el + ':not([disabled])';
	      });
	      query.push('[tabindex]:not([disabled]):not([tabindex=""])');
	      target = this.dialog_.querySelector(query.join(', '));
	    }
	    safeBlur(document.activeElement);
	    target && target.focus();
	  },

	  updateZIndex: function(backdropZ, dialogZ) {
	    this.backdrop_.style.zIndex = backdropZ;
	    this.dialog_.style.zIndex = dialogZ;
	  },

	  show: function() {
	    if (!this.dialog_.open) {
	      this.setOpen(true);
	      this.focus_();
	    }
	  },

	  showModal: function() {
	    if (this.dialog_.hasAttribute('open')) {
	      throw new Error('Failed to execute "showModal" on dialog: The element is already open, and therefore cannot be opened modally.');
	    }
	    if (!document.body.contains(this.dialog_)) {
	      throw new Error('Failed to execute "showModal" on dialog: The element is not in a Document.');
	    }
	    if (!_Dialog.dm.pushDialog(this)) {
	      throw new Error('Failed to execute "showModal" on dialog: There are too many open modal dialogs.');
	    }
	    this.show();
	    this.openAsModal_ = true;

	    if (_Dialog.needsCentering(this.dialog_)) {
	      _Dialog.reposition(this.dialog_);
	      this.replacedStyleTop_ = true;
	    } else {
	      this.replacedStyleTop_ = false;
	    }

	    this.backdrop_.addEventListener('click', this.backdropClick_);
	    this.dialog_.parentNode.insertBefore( this.backdrop_, this.dialog_.nextSibling );
	  },

	  close: function(opt_returnValue) {
	    if (!this.dialog_.hasAttribute('open')) {
	      throw new Error('Failed to execute "close" on dialog: The element does not have an "open" attribute, and therefore cannot be closed.');
	    }
	    this.setOpen(false);

	    if (opt_returnValue !== undefined) {
	      this.dialog_.returnValue = opt_returnValue;
	    }

	    var closeEvent = new supportCustomEvent('close', {
	      bubbles: false,
	      cancelable: false
	    });
	    this.dialog_.dispatchEvent(closeEvent);
	  }
	};



	var DialogManager = function() {
	  this.pendingDialogStack = [];

	  this.overlay = document.createElement('div');
	  this.overlay.className = '_dialog_overlay';
	  this.overlay.addEventListener('click', function(e) {
	    e.stopPropagation();
	  });

	  this.handleKey_ = this.handleKey_.bind(this);
	  this.handleFocus_ = this.handleFocus_.bind(this);
	  this.handleRemove_ = this.handleRemove_.bind(this);

	  this.zIndexLow_ = 100000;
	  this.zIndexHigh_ = 100000 + 150;
	};

	DialogManager.prototype.topDialogElement = function() {
	  if (this.pendingDialogStack.length) {
	    var t = this.pendingDialogStack[this.pendingDialogStack.length - 1];
	    return t.dialog;
	  }
	  return null;
	};

	DialogManager.prototype.blockDocument = function() {
	  document.body.appendChild(this.overlay);
	  document.body.addEventListener('focus', this.handleFocus_, true);
	  document.addEventListener('keydown', this.handleKey_);
	  document.addEventListener('DOMNodeRemoved', this.handleRemove_);
	};

	DialogManager.prototype.unblockDocument = function() {
	  document.body.removeChild(this.overlay);
	  document.body.removeEventListener('focus', this.handleFocus_, true);
	  document.removeEventListener('keydown', this.handleKey_);
	  document.removeEventListener('DOMNodeRemoved', this.handleRemove_);
	};

	DialogManager.prototype.updateStacking = function() {
	  var zIndex = this.zIndexLow_;

	  for (var i = 0; i < this.pendingDialogStack.length; i++) {
	    if (i == this.pendingDialogStack.length - 1) {
	      // this.overlay.style.zIndex = zIndex++;
	    }
	    this.pendingDialogStack[i].updateZIndex(zIndex++, zIndex++);
	  }
	};

	DialogManager.prototype.handleFocus_ = function(event) {
	  var candidate = findNearestDialog( event.target );
	  if (candidate != this.topDialogElement()) {
	    event.preventDefault();
	    event.stopPropagation();
	    safeBlur( (event.target) );

	    return false;
	  }
	};

	DialogManager.prototype.handleKey_ = function(event) {
	  if (event.keyCode == 27) {
	    event.preventDefault();
	    event.stopPropagation();
	    var cancelEvent = new supportCustomEvent('cancel', {
	      bubbles: false,
	      cancelable: true
	    });
	    var dialog = this.topDialogElement();
	    if (dialog.dispatchEvent(cancelEvent)) {
	      dialog.close();
	    }
	  }
	};

	DialogManager.prototype.handleRemove_ = function(event) {
	  if (event.target.nodeName.toUpperCase() != 'DIALOG') { return; }

	  var dialog = (event.target);
	  if (!dialog.open) { return; }

	  this.pendingDialogStack.some(function(dpi) {
	    if (dpi.dialog == dialog) {
	      dpi.maybeHideModal();
	      return true;
	    }
	  });
	};

	DialogManager.prototype.pushDialog = function(dpi) {
	  var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;
	  if (this.pendingDialogStack.length >= allowed) {
	    return false;
	  }
	  this.pendingDialogStack.push(dpi);
	  if (this.pendingDialogStack.length == 1) {
	    this.blockDocument();
	  }
	  this.updateStacking();
	  return true;
	};

	DialogManager.prototype.removeDialog = function(dpi) {
	  var index = this.pendingDialogStack.indexOf(dpi);
	  if (index == -1) { return; }

	  this.pendingDialogStack.splice(index, 1);
	  this.updateStacking();
	  if (this.pendingDialogStack.length == 0) {
	    this.unblockDocument();
	  }
	};




	var _Dialog = {};

	_Dialog.reposition = function(element) {
	  // var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
	  // var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;
	  // element.style.top = 'calc(45% - 32px)';//Math.max(scrollTop, topValue) + 'px';
	  element.classList.add('dialog-offset-y');
	};

	_Dialog.isInlinePositionSetByStylesheet = function(element) {
	  for (var i = 0; i < document.styleSheets.length; ++i) {
	    var styleSheet = document.styleSheets[i];
	    var cssRules = null;
	    // Some browsers throw on cssRules.
	    try {
	      cssRules = styleSheet.cssRules;
	    } catch (e) {}
	    if (!cssRules)
	      continue;
	    for (var j = 0; j < cssRules.length; ++j) {
	      var rule = cssRules[j];
	      var selectedNodes = null;
	      // Ignore errors on invalid selector texts.
	      try {
	        selectedNodes = document.querySelectorAll(rule.selectorText);
	      } catch(e) {}
	      if (!selectedNodes || !inNodeList(selectedNodes, element))
	        continue;
	      var cssTop = rule.style.getPropertyValue('top');
	      var cssBottom = rule.style.getPropertyValue('bottom');
	      if ((cssTop && cssTop != 'auto') || (cssBottom && cssBottom != 'auto'))
	        return true;
	    }
	  }
	  return false;
	};

	_Dialog.needsCentering = function(dialog) {
	  var computedStyle = window.getComputedStyle(dialog);
	  if (computedStyle.position != 'absolute') {
	    return false;
	  }

	  // We must determine whether the top/bottom specified value is non-auto.  In
	  // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but
	  // Firefox returns the used value. So we do this crazy thing instead: check
	  // the inline style and then go through CSS rules.
	  if ((dialog.style.top != 'auto' && dialog.style.top != '') ||
	      (dialog.style.bottom != 'auto' && dialog.style.bottom != ''))
	    return false;
	  return !_Dialog.isInlinePositionSetByStylesheet(dialog);
	};

	_Dialog.forceRegisterDialog = function(element) {
	  if (element.showModal) {
	    // console.warn('This browser already supports <dialog>, the polyfill may not work correctly', element);
	  }
	  if (element.nodeName.toUpperCase() != 'DIALOG') {
	    throw new Error('Failed to register dialog: The element is not a dialog.');
	  }
	  new DialogInfo(element);
	};

	_Dialog.registerDialog = function(element) {
	  if (element.showModal) {
	    // console.warn('Can"t upgrade <dialog>: already supported', element);
	  } else {
	    _Dialog.forceRegisterDialog(element);
	  }
	};

	_Dialog.dm = new DialogManager();

	// document.addEventListener('submit', function(e) {
	//   var target = e.target;
	//   if (!target || !target.hasAttribute('method')) { return; }
	//   if (target.getAttribute('method').toLowerCase() != 'dialog') { return; }
	//   e.preventDefault();

	//   var dialog = findNearestDialog( e.target );
	//   if (!dialog) { return; }

	//   var returnValue;
	//   var cands = [ document.activeElement, e.explicitOriginalTarget ];
	//   var els = ['BUTTON', 'INPUT'];
	//   cands.some(function(cand) {
	//     if (cand && cand.form == e.target && els.indexOf(cand.nodeName.toUpperCase()) != -1) {
	//       returnValue = cand.value;
	//       return true;
	//     }
	//   });
	//   dialog.close(returnValue);
	// }, true);

	var Dialog = function Dialog( config ) {

	  this._config = config;

	  this.element = document.createElement('dialog');
	  this.element.classList.add( this.CSS.ROOT );
	  this.element._config = config;
	  this.dialog = new this.DialogInfo( this.element );

	  this.title = document.createElement('div');
	  this.title.classList.add( this.CSS.TITLE );
	  
	  this.content = document.createElement('div');
	  this.content.classList.add( this.CSS.CONTENT );

	  this.actions = document.createElement('div');
	  this.actions.classList.add( this.CSS.ACTIONS );


	  this.populate();
	  this.render();
	}

	Dialog.prototype = Object.create( __webpack_require__(50).prototype );
	Dialog.prototype.constructor = Dialog;
	Dialog.prototype.DialogInfo  = DialogInfo;

	Dialog.prototype.CSS = {
	  ROOT         : 'mdl-dialog',
	  TITLE        : "mdl-dialog__title",
	  CONTENT      : "mdl-dialog__content",
	  ACTIONS      : "mdl-dialog__actions",
	  ACTIONS_FULL : "mdl-dialog__actions--full-width",
	  BUTTON       : "mdl-button",
	}

	// <dialog class="mdl-dialog">
	//   <div class="mdl-dialog__content">
	//     <p>
	//       Allow this site to collect usage data to improve your experience?
	//     </p>
	//   </div>
	//   <div class="mdl-dialog__actions mdl-dialog__actions--full-width">
	//     <button type="button" class="mdl-button">Agree</button>
	//     <button type="button" class="mdl-button close">Disagree</button>
	//   </div>
	// </dialog>


	Dialog.prototype.initCallback = function( call ){
	  if ( this._config.hasOwnProperty( call ) && typeof this._config[ call ].function === 'function' ) {
	    this._config[ call ].context = this._config[ call ].context || this;
	    this._config[ call ].function.bind( this._config[ call ].context );
	  }
	}

	Dialog.prototype.render = function(){
	  var dialog = this;

	  this.initCallback('before');

	  if ( this._config.hasOwnProperty('title') ) {
	    if ( this._config.hasOwnProperty('element') ) {
	      this.title.appendChild( element );
	    } else {
	      this.title.textContent = this._config.title;
	    }

	    this.element.appendChild( this.title );
	  }

	  if ( this._config.hasOwnProperty('content') ) {
	    if ( this._config.content.hasOwnProperty('element') ) {
	      this.content.appendChild( this._config.content.element );
	    } else {
	      this.content.textContent = this._config.content;
	    }

	    this.element.appendChild( this.content );
	  }

	  if ( this._config.hasOwnProperty('actions') && this._config.actions.constructor === Array ) {
	    var df = document.createDocumentFragment();

	    for (var i = 0, length = this._config.actions.length; i < length; i++) {
	      var item = this._config.actions[i];
	      item.submitCallback = function(){
	        dialog.element.close();
	        if ( typeof this.submit.function === 'function' ) {
	          this.submit.context = this.submit.context || this;
	          this.submit.function();
	        }
	      };
	      item.cancelCallback = function(){
	        dialog.element.close();
	        if ( typeof this.cancel.function === 'function' ) {
	          this.cancel.context = this.cancel.context || this;
	          this.cancel.function();
	        }
	      };

	      var button = document.createElement('button');
	      button.classList.add( this.CSS.BUTTON );

	      if ( item.hasOwnProperty('submit') ) {
	        button.addEventListener('click', item.submitCallback.bind( item ) );
	      }

	      if ( item.hasOwnProperty('cancel') ) {
	        button.addEventListener('click', item.cancelCallback.bind( item ) );
	      }

	      if ( item.hasOwnProperty('text') ) {
	        button.textContent = item.text;
	      }

	      df.appendChild( button );
	    }

	    this.actions.appendChild( df );
	    this.element.appendChild( this.actions );
	  }

	  this.initCallback('after');

	  return this.element;
	}


	module.exports = Dialog;

/***/ },
/* 59 */
/***/ function(module, exports) {

	var Search = function( config ) {
	  this.element = document.createElement( 'form' );
	  this.element.action = "#";
	  
	  this.wrapper = document.createElement( 'div' );
	  this.wrapper.classList.add( this.CSS.ROOT );
	  this.wrapper.classList.add( this.CSS.ROOT_JS );
	  this.wrapper.classList.add( this.CSS.EXPAND );
	  this.element.appendChild( this.wrapper );

	  this.labelSearch = document.createElement( 'label' );
	  this.labelSearch.classList.add( this.CSS.BUTTON );
	  this.labelSearch.classList.add( this.CSS.BUTTON_JS );
	  this.labelSearch.classList.add( this.CSS.BUTTON_ICON );
	  
	  this.iconSearch = document.createElement( 'i' );
	  this.iconSearch.classList.add( this.CSS.ICON );
	  this.iconSearch.textContent = 'search';

	  this.labelSearch.appendChild( this.iconSearch );

	  this.expandWrapper = document.createElement( 'div' );
	  this.expandWrapper.classList.add( this.CSS.EXPAND_HOLD );


	  this.input = document.createElement( 'input' );
	  this.input.classList.add( this.CSS.INPUT );
	  this.input.type = 'text';
	  this.input.id   = core.utils.generateId();


	  this.label = document.createElement( 'label' );
	  this.label.classList.add( this.CSS.LABEL );
	  this.expandWrapper.appendChild( this.input );
	  this.expandWrapper.appendChild( this.label );

	  this.labelSearch.setAttribute( 'for', this.input.id );
	  this.label.setAttribute( 'for', this.input.id );

	  this.wrapper.appendChild( this.labelSearch );
	  this.wrapper.appendChild( this.expandWrapper );

	  this._config = config;
	  this.element._config = config;


	  // <form action="#">
	  //   <div class="mdl-textfield mdl-js-textfield mdl-textfield--expandable">
	  //     <label class="mdl-button mdl-js-button mdl-button--icon" for="sample6">
	  //       <i class="material-icons">search</i>
	  //     </label>
	  //     <div class="mdl-textfield__expandable-holder">
	  //       <input class="mdl-textfield__input" type="text" id="sample6">
	  //       <label class="mdl-textfield__label" for="sample-expandable">Expandable Search</label>
	  //     </div>
	  //   </div>
	  // </form>


	  this.render();
	}
	Search.prototype.setIcon = function( string ){
	    this.iconSearch.textContent = string;
	};
	Search.prototype.setClass = function( string ){
	  this.element.classList.add( string );
	};

	Search.prototype.render = function( string ){

	  if ( this._config && this._config.hasOwnProperty('class') ) {
	    this.setClass( this._config.class );
	  };
	  if ( this._config && this._config.hasOwnProperty('icon') ) {
	    this.setIcon( this._config.icon );
	  };

	  return this;
	};

	Search.prototype.CSS = {
	  ROOT        : "mdl-textfield",
	  ROOT_JS     : "mdl-js-textfield",
	  EXPAND      : "mdl-textfield--expandable",
	  EXPAND_HOLD : "mdl-textfield__expandable-holder",
	  INPUT       : "mdl-textfield__input",
	  LABEL       : "mdl-textfield__label",
	  BUTTON      : "mdl-button",
	  BUTTON_JS   : "mdl-js-button",
	  BUTTON_ICON : "mdl-button--icon",
	  ICON        : "material-icons",
	};

	module.exports = Search;

/***/ }
/******/ ]);