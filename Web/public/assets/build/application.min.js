/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	core = (function(){
	  var Mediator  = __webpack_require__(1),
	      WebWorker = __webpack_require__(4),
	      Utils     = __webpack_require__(5),
	      Dom       = __webpack_require__(7),

	      Preloader = __webpack_require__(9);

	  var Core = function( config ){
	    this.events   = new Mediator();
	    this.worker   = new WebWorker();
	    this.utils    = new Utils();
	    this.dom      = new Dom();
	    this.modules  = {
	      preloader : new Preloader()
	    };
	    this.debug    = true;

	    this.bindEvents();
	  };

	  Core.prototype.bindEvents = function() {
	    __webpack_require__(11);
	  };

	  Core.prototype.start = function(module) {
	    // this.events.publish( "core::start:" + module );
	    this.events.publish("core::preloader:start")
	  };
	  
	  Core.prototype.destroy = function(module) {
	    this.events.publish( "core::destroy:" + module );
	  };

	  Core.prototype.startAll = function() {
	    console.log('core::startAll');
	    this.events.publish("core::preloader:start")
	    // setTimeout( core.events.publish("core::preloader:start"), 100 );
	  };
	  Core.prototype.destroyAll = function() {
	    this.events.publish("core::destroy:all");
	  };

	  return new Core();
	})();


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var Channel = __webpack_require__(2);
	var Subscriber = __webpack_require__(3);

	var Mediator = function() {
	  if (!(this instanceof Mediator)) {
	    return new Mediator();
	  }

	  this._channels = new Channel('');
	}
	Mediator.prototype.getChannel = function(namespace, readOnly) {
	  var channel = this._channels,
	      namespaceHierarchy = namespace.split(':'),
	      x = 0,
	      y = namespaceHierarchy.length;

	  if (namespace === '') {
	    return channel;
	  }

	  if (namespaceHierarchy.length > 0) {
	    for(x, y; x < y; x++) {

	      if (!channel.hasChannel(namespaceHierarchy[x])) {
	        if (readOnly) {
	          break;
	        } else {
	          channel.addChannel(namespaceHierarchy[x]);
	        }
	      }

	      channel = channel.returnChannel(namespaceHierarchy[x]);
	    }
	  }

	  return channel;
	}
	Mediator.prototype.subscribe = function(channelName, fn, options, context) {
	  var channel = this.getChannel(channelName || "", false);

	  options = options || {};
	  context = context || {};

	  return channel.addSubscriber(fn, options, context);
	}
	Mediator.prototype.once = function(channelName, fn, options, context) {
	  options = options || {};
	  options.calls = 1;

	  return this.subscribe(channelName, fn, options, context);
	}
	Mediator.prototype.getSubscriber = function(identifier, channelName) {
	  var channel = this.getChannel(channelName || "", true);
	  
	  
	  if (channel.namespace !== channelName) {
	    return null;
	  }

	  return channel.getSubscriber(identifier);
	}
	Mediator.prototype.remove = function(channelName, identifier) {
	  var channel = this.getChannel(channelName || "", true);
	  if (channel.namespace !== channelName) {
	    return false;
	  }

	  channel.removeSubscriber(identifier);
	}
	Mediator.prototype.publish = function(channelName) {
	  var channel = this.getChannel(channelName || "", true);
	  if (channel.namespace !== channelName) {
	    return null;
	  }

	  var args = Array.prototype.slice.call(arguments, 1);

	  args.push(channel);

	  channel.publish(args);
	}
	Mediator.prototype.on = Mediator.prototype.subscribe;
	Mediator.prototype.bind = Mediator.prototype.subscribe;
	Mediator.prototype.emit = Mediator.prototype.publish;
	Mediator.prototype.trigger = Mediator.prototype.publish;
	Mediator.prototype.off = Mediator.prototype.remove;

	Mediator.Channel = Channel;
	Mediator.Subscriber = Subscriber;

	module.exports = Mediator

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var Subscriber = __webpack_require__(3);

	var Channel = function(namespace, parent) {
	  if (!(this instanceof Channel)) {
	    return new Channel(namespace);
	  }

	  this.namespace = namespace || "";
	  this._subscribers = [];
	  this._channels = {};
	  this._parent = parent;
	  this.stopped = false;
	}
	Channel.prototype.addSubscriber = function(fn, options, context) {
	  var subscriber = new Subscriber(fn, options, context);

	  if (options && options.priority !== undefined) {
	    
	    
	    
	    options.priority = options.priority >> 0;

	    if (options.priority < 0) { options.priority = 0; }
	    if (options.priority >= this._subscribers.length) { options.priority = this._subscribers.length-1; }

	    this._subscribers.splice(options.priority, 0, subscriber);
	  }else{
	    this._subscribers.push(subscriber);
	  }

	  subscriber.channel = this;

	  return subscriber;
	}
	Channel.prototype.stopPropagation = function() {
	  this.stopped = true;
	}
	Channel.prototype.getSubscriber = function(identifier) {
	  var x = 0,
	      y = this._subscribers.length;

	  for(x, y; x < y; x++) {
	    if (this._subscribers[x].id === identifier || this._subscribers[x].fn === identifier) {
	      return this._subscribers[x];
	    }
	  }
	}
	Channel.prototype.setPriority = function(identifier, priority) {
	  var oldIndex = 0,
	      x = 0,
	      sub, firstHalf, lastHalf, y;

	  for(x = 0, y = this._subscribers.length; x < y; x++) {
	    if (this._subscribers[x].id === identifier || this._subscribers[x].fn === identifier) {
	      break;
	    }
	    oldIndex ++;
	  }

	  sub = this._subscribers[oldIndex];
	  firstHalf = this._subscribers.slice(0, oldIndex);
	  lastHalf = this._subscribers.slice(oldIndex+1);

	  this._subscribers = firstHalf.concat(lastHalf);
	  this._subscribers.splice(priority, 0, sub);
	}
	Channel.prototype.addChannel = function(channel) {
	  this._channels[channel] = new Channel((this.namespace ? this.namespace + ':' : '') + channel, this);
	}
	Channel.prototype.hasChannel = function(channel) {
	  return this._channels.hasOwnProperty(channel);
	}
	Channel.prototype.returnChannel = function(channel) {
	  return this._channels[channel];
	}
	Channel.prototype.removeSubscriber = function(identifier) {
	  var x = this._subscribers.length - 1;

	  
	  if (!identifier) {
	    this._subscribers = [];
	    return;
	  }

	  
	  for(x; x >= 0; x--) {
	    if (this._subscribers[x].fn === identifier || this._subscribers[x].id === identifier) {
	      this._subscribers[x].channel = null;
	      this._subscribers.splice(x,1);
	    }
	  }
	}
	Channel.prototype.publish = function(data) {
	  var x = 0,
	      y = this._subscribers.length,
	      shouldCall = false,
	      subscriber, l,
	      subsBefore,subsAfter;

	  
	  for(x, y; x < y; x++) {
	    
	    shouldCall = false;
	    subscriber = this._subscribers[x];

	    if (!this.stopped) {
	      subsBefore = this._subscribers.length;
	      if (subscriber.options !== undefined && typeof subscriber.options.predicate === "function") {
	        if (subscriber.options.predicate.apply(subscriber.context, data)) {
	          
	          shouldCall = true;
	        }
	      }else{
	        
	        shouldCall = true;
	      }
	    }

	    
	    if (shouldCall) {
	      
	      if (subscriber.options && subscriber.options.calls !== undefined) {
	        
	        subscriber.options.calls--;
	        
	        if (subscriber.options.calls < 1) {
	          this.removeSubscriber(subscriber.id);
	        }
	      }
	      
	      
	      subscriber.fn.apply(subscriber.context, data);

	      subsAfter = this._subscribers.length;
	      y = subsAfter;
	      if (subsAfter === subsBefore - 1) {
	        x--;
	      }
	    }
	  }

	  if (this._parent) {
	    this._parent.publish(data);
	  }

	  this.stopped = false;
	}

	module.exports = Channel;

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";


	var Subscriber = function(fn, options, context) {
	  if (!(this instanceof Subscriber)) {
	    return new Subscriber(fn, options, context);
	  }

	  this.id = this.guidGenerator();
	  this.fn = fn;
	  this.options = options;
	  this.context = context;
	  this.channel = null;
	}
	Subscriber.prototype.guid = function(options) {
	  return ( ( ( 1 + Math.random() ) * 0x10000)   | 0 ).toString(16).substring(1);
	}
	Subscriber.prototype.guidGenerator = function(options) {
	  var S4 = this.guid;
	  return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
	}
	Subscriber.prototype.update = function(options) {
	  if (options) {
	    this.fn = options.fn || this.fn;
	    this.context = options.context || this.context;
	    this.options = options.options || this.options;
	    if (this.channel && this.options && this.options.priority !== undefined) {
	        this.channel.setPriority(this.id, this.options.priority);
	    }
	  }
	} 

	module.exports = Subscriber

/***/ },
/* 4 */
/***/ function(module, exports) {

	var WebWorker = function(){
	  this.worker = new Worker("assets/js/core/worker/worker.js");
	  this.worker.onmessage = function( e ) {
	    console.log('FROM WORKER: ', e);
	    var data = e.data;
	    for (var key in data) {
	      if (data.hasOwnProperty(key)) {
	        // data[key];
	        switch (key) {
	          case 'template:loaded':
	            var templateName = Object.keys( data[key] )[0],
	                data         = data[key][templateName];
	            
	            core.events.publish("core::template:loaded", {
	              name : templateName,
	              raw  : data
	            });
	            
	            break;
	          case 'reports:loaded':
	            core.events.publish("core::reports:loaded", {
	              raw: JSON.parse( data[key] )
	            });
	            break;
	          case 'report:loaded':
	            core.events.publish("core::report:loaded", {
	              raw: JSON.parse( data[key] )
	            });
	            break;
	          default:
	            console.log('default');
	            break;
	        }

	      }
	    }
	  };
	  return this.worker;
	}; 
	module.exports = WebWorker;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var Base64 = __webpack_require__(6);

	var Utils = function(){
	  this.element = [];
	};
	Utils.prototype.Base64 = new Base64();

	Utils.prototype.merge = function (from, to) {
	  var result = {};

	  for ( var key in from ) {
	    if ( from.hasOwnProperty(key) ) {
	      if ( !result.hasOwnProperty(key) ) {
	        result[key] = from[key]
	      };
	    }
	  }
	  for (var key in to) {
	    if (to.hasOwnProperty(key)) {
	      if ( !result.hasOwnProperty(key) ) {
	        result[key] = to[key]
	      };
	    }
	  }
	  return result;
	}

	Utils.prototype.request = function( type, url, data, callback ) {
	  var request = new XMLHttpRequest();
	  request.open( type.toUpperCase(), url, true);

	  request.onload = function() {
	    if ( this.status >= 200 && this.status < 400 ) {
	      callback( this.response );
	    } else {
	      callback( new Error( this.response ) );
	    }
	  };

	  request.onerror = function() {
	    callback( new Error( this.response ) );
	  };

	  request.send();
	};
	Utils.prototype.get = function( url, data, callback ) {
	  this.request( 'get', url, data, callback );
	};
	Utils.prototype.post = function( url, data, callback ) {
	  this.request( 'post', url, data, callback );
	};
	Utils.prototype.put = function( url, data, callback ) {
	  this.request( 'put', url, data, callback );
	};
	Utils.prototype.delete = function( url, data, callback ) {
	  this.request( 'delete', url, data, callback );
	};

	Utils.prototype.start = function() {
	  console.log( 'Utils: start' );
	};
	Utils.prototype.stop = function() {
	  console.log( 'Utils: stop' );
	};
	Utils.prototype.destroy = function() {
	  console.log( 'Utils: destroy' );
	  this.element = [];
	};

	 module.exports = Utils;

/***/ },
/* 6 */
/***/ function(module, exports) {

	var Base64 = function(string){
	  this.b64tab = {};

	  this.b64tabPopulate();
	  return this;
	};
	Base64.prototype.b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	Base64.prototype.b64tabPopulate = function() {
	  var bin = this.b64chars;
	  for (var i = 0, l = bin.length; i < l; i++){
	    this.b64tab[bin.charAt(i)] = i
	  };
	  return this;
	};

	Base64.prototype.fromCharCode = String.fromCharCode;

	Base64.prototype.cb_utob = function(c) {
	  if (c.length < 2) {
	      var cc = c.charCodeAt(0);
	      return cc < 0x80 ? c
	          : cc < 0x800 ? (this.fromCharCode(0xc0 | (cc >>> 6))
	                        + this.fromCharCode(0x80 | (cc & 0x3f)))
	          : ( this.fromCharCode(0xe0 | ((cc >>> 12) & 0x0f) )
	            + this.fromCharCode(0x80 | ((cc >>>  6) & 0x3f) )
	            + this.fromCharCode(0x80 | ( cc         & 0x3f)));
	  } else {
	    var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);
	    
	    return (this.fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
	          + this.fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
	          + this.fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
	          + this.fromCharCode(0x80 | ( cc         & 0x3f)));
	  }
	};
	Base64.prototype.re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;

	Base64.prototype.utob = function(u) {
	  return u.replace(this.re_utob, this.cb_utob.bind(this));
	};
	Base64.prototype.cb_encode = function(ccc) {
	    var b64chars = this.b64chars;
	    var padlen = [0, 2, 1][ccc.length % 3],
	    ord = ccc.charCodeAt(0) << 16
	        | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
	        | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
	    chars = [
	        b64chars.charAt( ord >>> 18),
	        b64chars.charAt((ord >>> 12) & 63),
	        padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
	        padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
	    ];
	    return chars.join('');
	};
	Base64.prototype.btoa = function(b) {
	  return b.replace(/[\s\S]{1,3}/g, this.cb_encode.bind(this) )
	};
	Base64.prototype._encode = function (u) {
	  return this.btoa( this.utob(u) );
	};
	Base64.prototype.encodeURI = function(u) {
	  return this.encode(u, true)
	};
	// decoder stuff
	Base64.prototype.re_btou = new RegExp([
	    '[\xC0-\xDF][\x80-\xBF]',
	    '[\xE0-\xEF][\x80-\xBF]{2}',
	    '[\xF0-\xF7][\x80-\xBF]{3}'
	].join('|'), 'g');

	Base64.prototype.cb_btou = function(cccc) {
	    switch(cccc.length) {
	    case 4:
	        var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
	            |    ((0x3f & cccc.charCodeAt(1)) << 12)
	            |    ((0x3f & cccc.charCodeAt(2)) <<  6)
	            |     (0x3f & cccc.charCodeAt(3)),
	        offset = cp - 0x10000;
	        return (this.fromCharCode((offset  >>> 10) + 0xD800)
	                + this.fromCharCode((offset & 0x3FF) + 0xDC00));
	    case 3:
	        return this.fromCharCode(
	            ((0x0f & cccc.charCodeAt(0)) << 12)
	                | ((0x3f & cccc.charCodeAt(1)) << 6)
	                |  (0x3f & cccc.charCodeAt(2))
	        );
	    default:
	        return  this.fromCharCode(
	            ((0x1f & cccc.charCodeAt(0)) << 6)
	                |  (0x3f & cccc.charCodeAt(1))
	        );
	    }
	};
	Base64.prototype.btou = function(b) {
	  return b.replace(this.re_btou, this.cb_btou.bind(this) );
	};
	Base64.prototype.cb_decode = function(cccc) {
	  var len = cccc.length,
	  padlen = len % 4,
	  n = (len > 0   ? this.b64tab[cccc.charAt(0)] << 18 : 0)
	      | (len > 1 ? this.b64tab[cccc.charAt(1)] << 12 : 0)
	      | (len > 2 ? this.b64tab[cccc.charAt(2)] <<  6 : 0)
	      | (len > 3 ? this.b64tab[cccc.charAt(3)]       : 0),
	  chars = [
	      this.fromCharCode( n >>> 16),
	      this.fromCharCode((n >>>  8) & 0xff),
	      this.fromCharCode( n         & 0xff)
	  ];
	  chars.length -= [0, 0, 2, 1][padlen];
	  return chars.join('');
	};
	Base64.prototype.atob = function(a) {
	  return a.replace( /[\s\S]{1,4}/g, this.cb_decode.bind(this) );
	};
	Base64.prototype._decode = function( string ) {
	  return this.btou( this.atob( string ) );
	};
	Base64.prototype.replacer = function(char) {
	  console.log( 'replacer -> char:', char );
	  return char == '-' ? '+' : '/'
	}
	Base64.prototype.decode = function(string){
	  var str = String( string ).replace( /[-_]/g, this.replacer ).replace(/[^A-Za-z0-9\+\/]/g, '');
	  return this._decode( str );
	};
	Base64.prototype.encode = function( string, urisafe) {
	  return !urisafe ? this._encode(String( string )) : this._encode(String( string )).replace( /[+\/]/g, this.replacer ).replace(/=/g, '');
	};

	module.exports = Base64

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Dom = function(){
	  this.root        = document;
	  this.application = {};
	  this.snackbar    = {};

	  this.bindEvents();
	};

	Dom.prototype.bindEvents = function() {
	  var dom = this;
	  __webpack_require__(8);
	};
	Dom.prototype.build = function(template) {
	  console.log( 'Dom: build root', template );
	  
	  var element = document.createElement('div');
	  element.id = template.name;
	  element.innerHTML = template.raw;

	  this.application = element;
	  this.root.body.appendChild(element);

	  core.events.publish("core::start:progressbar");
	};
	Dom.prototype.start = function() {
	  console.log( 'Dom: start' );
	};
	Dom.prototype.stop = function() {
	  console.log( 'Dom: stop' );
	};
	Dom.prototype.destroy = function() {
	  console.log( 'Dom: destroy' );
	};

	module.exports = Dom;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var dom = __webpack_require__(7);

	module.exports = function(){
	  document.addEventListener('DOMContentLoaded', function(){ 
	    core.events.subscribe("core::start:all", function(){
	      console.log('core  > dom > bindEvents > core::start:all');
	      manager.start();
	    }, { priority: 0 });

	    core.events.subscribe("core::dom:updateApplication", function(application){
	      dom.root.body.appendChild(application);
	    }, { priority: 0 });

	    core.events.subscribe('core::dom:build', function(template){
	      dom.build(template);
	    });

	    core.events.subscribe('core::dom:application:clear', function(template){
	      console.log( ' clear ->', dom.application );
	      // dom.application.querySelector('.core-layout-application').innerHTML = '';
	    });
	  }, false);
	}(window.core);

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Preloader = function(){
	  this.tasks = {
	    init: {
	      modules: [ 'progressbar', 'router', 'templates', 'reports', 'snackbar' ]
	    },
	    load: [ 'reports', 'criterias', 'criteriaKeys' ]
	  };
	  this.bindEvents();
	};
	Preloader.prototype.bindEvents = function() {
	  __webpack_require__(10);
	};
	Preloader.prototype.start = function() {
	  console.log( 'Preloader: start' );
	};
	Preloader.prototype.finish = function() {
	  console.log( 'Preloader: finish' );
	  // core.events.publish('core::progressbar:start');
	};
	Preloader.prototype.stop = function() {
	  console.log( 'Preloader: stop' );
	};
	Preloader.prototype.destroy = function() {
	  console.log( 'Preloader: destroy' );
	};

	module.exports = Preloader;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var preloader = __webpack_require__(9);

	module.exports = function(){
	  document.addEventListener('DOMContentLoaded', function(){ 
	    
	    core.events.subscribe( "core::preloader:start", function () {
	      console.log( "preloader <-core::preloader:start" );
	      // core.events.publish("core::preloader:start");
	    });

	    core.events.subscribe( "core::preloader:finish", function () {
	      console.log( "preloader <-core::preloader:finish" );
	      // core.events.publish("core::template:start");
	    });

	    core.events.subscribe( "core::preloader:ready", function () {
	      console.log("preloader <- core::preloader:ready");
	      // core.events.publish("core::progressbar:build");
	    });

	  }, false);
	}(window);

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = function(){
	  document.addEventListener('DOMContentLoaded', function(){ 
	    
	    core.events.subscribe( "core::preloader:finish", function () {
	      console.log( "core::preloader:finish" );
	    });


	    core.events.subscribe("core::preloader:finish", function(){
	      console.log('core::preloader:finish');
	      
	      setTimeout(function(){
	        core.modules.progressbar.destroy();
	        core.events.remove("core::preloader:start");
	        core.events.remove("core::preloader:finish");
	      }, 1000);

	      core.modules.router.start();
	      core.events.publish('router::checkDefault');
	    });

	    core.events.subscribe("core::progressbar:finish", function(){
	      console.log('core::progressbar:finish');

	      core.events.remove("core::preloader:start");
	      core.events.remove("core::preloader:finish");

	      core.events.publish('core::router:start');
	    });

	    core.events.subscribe( "core::template:load", function (template) {
	      core.worker.postMessage( [ 'template:load', template ] )
	    });

	    // загрузка всех отчетов
	    core.events.subscribe( "core::reports:load", function () {
	      core.worker.postMessage( [ 'reports:all', {} ] )
	    });

	    // загрузка отчета по id
	    core.events.subscribe( "core::report:load", function (id) {
	      core.worker.postMessage( [ 'reports:id', id ] )
	    });

	    core.events.subscribe( "core::layout:template:ready", function (template) {
	      // console.log('layout: ', template);
	      core.events.publish('core::dom:build', template );
	    });

	    // core.worker.postMessage( [ 'reports:all', {} ] );
	  }, false);
	}(window);

/***/ }
/******/ ]);